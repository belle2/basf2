/**************************************************************************
 * BASF2 (Belle Analysis Framework 2)                                     *
 * Copyright(C) 2010 - Belle II Collaboration                             *
 *                                                                        *
 * Author: The Belle II Collaboration                                     *
 * Contributors: Ilya Komarov                                             *
 *                                                                        *
 * This software is provided "as is" without any warranty.                *
 **************************************************************************/

#pragma once
#include <TObject.h>
#include <map>
#include <vector>
#include <string>
//#include <analysis/dataobjects/Particle.h>
//#include <framework/dataobjects/EventMetaData.h>
//#include <framework/datastore/StoreObjPtr.h>

namespace Belle2 {
  // Just pair of numners - min and max values of bin border
  typedef std::pair<double, double> BinLimits;

  // N-dim bin: pairs of bin limits with name of the axis variable.
  typedef std::map<std::string, BinLimits> NDBin;

  // Map of bin limits with bin ID
  typedef std::map<BinLimits, double> Nameless1DMap;

  // Vector of axis names paired with 1D map.
  // Vector is left for consistency:
  // It doesn't have any sense for 1D, but have sense for 2D and 3D
  typedef std::pair< std::vector<std::string>, Nameless1DMap> Named1DMap;

  // Map of 2D bins with bin ID
  typedef std::map<BinLimits, Nameless1DMap> Nameless2DMap;

  // Vector of axis names paired with 2D map.
  typedef std::pair< std::vector<std::string>, Nameless2DMap> Named2DMap;

  // Map of 3D bins with bin ID
  typedef std::map<BinLimits, Nameless2DMap> Nameless3DMap;

  // Vector of axis names paired with 3D map.
  typedef std::pair< std::vector<std::string>, Nameless3DMap> Named3DMap;
  /**
   * Class for handling LookUp tables
   */
  class ParticleWeightingKeyMapTest : public TObject  {

    /**
     * 3D key table
     * std::pair< std::vector<std::string>, std::map<std::pair<double, double>, std::map<std::pair<double, double>, std::map<std::pair<double, double>, double>>>>
     */
    std::pair< std::string, std::string> m_map;

    ClassDef(ParticleWeightingKeyMapTest, 1);

  public:

    /**
     * Constructor
     */
    ParticleWeightingKeyMapTest() {
          // Just pair of numners - min and max values of bin border
          // BinLimits bl = std::make_pair(0, 1);
          // Nameless1DMap map1d;
          // map1d.insert(std::make_pair(bl, 2));
          // std::vector<std::string> v;
          // v.push_back("a1");
          // v.push_back("a2");
          m_map = std::make_pair("test", "tesst");
      };

  };

} // Belle2 namespace


