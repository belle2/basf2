Changes in the analysis package since release-04-01
---------------------------------------------------

 .. warning:: Global includes like ``from basf2 import *`` are almost completely removed from the analysis package.

Vertex Fitting
++++++++++++++

 .. warning:: The convenience function for the :b2:mod:`TreeFitter` module has
    been renamed from ``vertexTree`` to :func:`vertex.treeFit`.

 .. warning:: The KFit convenience functions have been merged to the new
    function :func:`vertex.KFit`. One of its input arguments is ``fit_type``,
    which specifies whether you want to perform a mass fit
    (``fit_type=mass``), a vertex fit (``fit_type=vertex``), a
    mass-constrained vertex fit (``fit_type=massvertex``), or a vertex fit
    with the mother constrained to the beam four-momentum
    (``fit_type=fourC``).

Standard Particle Lists
+++++++++++++++++++++++

 * Added stdHyperons.py, this analysis script reconstructs the standard hyperons Xi-, Xi0, and Omega-.
   	 
   * New functions include `stdXi`, `stdXi0`, `stdOmega`, `goodXi`, `goodXi0`, and `goodOmega`
   * All documentation for this optimization and usage can be found at `BELLE2-NOTE-PH-2019-011 <https://docs.belle2.org/record/1337/files/BELLE2-NOTE-PH-2019-011.pdf>`_

 * The default vertex fitter for the V0 lists `stdKshorts` and `stdLambdas` has been changed from `vertexRave` to `treeFit`.
   However, a new option called ``fitter`` has been added that allows to change the vertex fitter back to `vertexRave` or to `KFit`.
 * Added a new standard list `stdCharged.stdMostLikely` which creates 5 mutually-exclusive lists of track-based particles under their most likely hypothesis.

Variables
+++++++++

  .. note:: All variables will return a quietNaN instead of -999 or other out-of-the-sky numbers in case of errors.
     To study the failures use the meta variable `ifNANgiveX`, which replaces nan with a value of your choice.

 * Now vertex variables ``dr, dx, dy, dz, dphi, dcosTheta...`` take into account the nontrivial
   transformation of track parameters relative to IP when used for tracks. 
   `dr` did not center at zero before and now it does.
 * Added :b2:var:`isDescendantOfList` and :b2:var:`isMCDescendantOfList` meta variables that allow to check whether the
   particle is the descendant of the list (or if it is matched to the descendant of the list) at any generation.
   The variables have recursive search inside, they extend :b2:var:`isDaughterOfList` and :b2:var:`isGrandDaughterOfList`.
 * Renamed some `RestOfEvent` variables for consistency across the `VariableManager`.
   Variables starting ``WE_XXX``, ``ROE_XXX``, and ``Rec_XXX`` are now ``weXXX``, ``roeXXX``, and ``recXXX``.
   For example ``ROE_deltae`` is now :b2:var:`roeDeltae`.
 * Fixed calculation of :b2:var:`cosHelicityAngleMomentum` for decays with bremscorrected electrons
 * Fixed :b2:var:`clusterEoP` for particles with Bremsstrahlung correction by adding the energy of the added photon(s)
 * Added :b2:var:`isSignalAcceptBremsPhotons` to ignore any reconstructed brems photons.

  .. note:: This is not the generator-level match (see :issue:`BII-5741`) but simply ignores photons added by the :b2:mod:`BremsFinder`.

 * Added :b2:var:`useTagSideRecoilRestFrame`, which allows variables to be calculated in the rest frame
   recoiling against the tag side B meson. This variable is intended to be used on Upsilon(4S) particle lists
   only. The variable gives access to the signal B rest frame in semi-leptonic decays, where the four momentum
   of the signal B can not be entirely reconstructed due to the presence of neutrinos in the decay.
 * Added new variables for fully-inclusive analysis: :b2:var:`nDaughterPhotons`, :b2:var:`nDaughterCharged` etc., which allow to count 
   specific daughters easily, and :b2:var:`daughterAverageOf`, which is similar to the :b2:var:`daughterSumOf`, but outputs the mean value of a variable.
 * Fixed :b2:var:`goodBelleKshort`, now it returns ``extraInfo(goodKs)`` if the variable exists.
 * Added two new variables :b2:var:`pidMostLikelyPDG` which is the PDG code of the most likely hypothesis for this track, and :b2:var:`pidIsMostLikely` which returns true if the particle *is* under its most likely hypothesis.
 * Added several variables that related to the quality of the tag B vertex fit and the tracks used in that fit:
   :b2:var:`TagVNFitTracks`, :b2:var:`TagVDistanceToConstraint`, :b2:var:`TagVDistanceToConstraintErr`,
   :b2:var:`TagTrackMomentumX` (Y,Z), :b2:var:`TagTrackRaveWeight`, :b2:var:`TagTrackDistanceToConstraint`,
   :b2:var:`TagTrackDistanceToConstraintErr`, :b2:var:`TagTrackDistanceToTagV`, :b2:var:`TagTrackDistanceToTagVErr`,
   :b2:var:`TagTrackTrueDistanceToTagV`
 * Added :b2:var:`pidChargedBDTScore` and :b2:var:`pidPairChargedBDTScore` for global and binary BDT-based charged particle identification, respectively. Require booking the `ChargedPidMVAMulticlass` (`ChargedPidMVA`) module in the path.
 * Bug fix for the `isCloneTrack` variable. Antiparticles have been falsely classified which is now fixed (see :issue:`BII-5973`)

Modules
+++++++

 * When merging ParticleLists using the :b2:mod:`ParticleListManipulator`
   (`modularAnalysis.copyLists`) duplicates (not multiple candidates) are removed
   on a first-come, first-served basis, i.e. the order of the input particles
   matters. Now, the new parameter ``variable`` can be provided to determine
   which duplicate should be preferred. The logic is the same as for the
   :b2:mod:`BestCandidateSelection` module.
 * The :b2:mod:`ParticleLoader` can create neutron particle lists now. ECL
   cluster with the hadron hypothesis as well as KLM cluster are used as source.
 * In :b2:mod:`TreeFitter` bugfix in mass constraint: chi2 correctly calculated now.
 * In :b2:mod:`TreeFitter` change of initialisation values increases performance in all fits with tracks.
 * In :b2:mod:`TreeFitter` max iterations set to 100, increases efficiency slightly in many cases.
 * Removed module ``CreateBsigFromFullRecoBtag``
 * In BtubeCreator module, functionality to associate Btube to user's chosen B is added.
 * Deprecated module `FSRCorrection` in favour of `BremsFinder` and `BelleBremRecovery`.
 * In `ChargedPidMVA` module, remove handling of particle list modified by the deprecated `FSRCorrection` module.
 * In `ChargedPidMVA` module, apply MVA category cuts retrieved from the DB payload.
 * Added `ChargedPidMVAMulticlass` module to allow performing global PID (one-vs-rest), using an MVA trained in multi-class mode.
 * Added a :b2:mod:`BremsFinder` to unpack the bremsstrahlung relations provided by tracking.

  .. hint:: This tool is the recommended way to correct for bremsstrahlung photons in Belle II analyses.

 * Modified `writePi0EtaVeto` function and added `oldwritePi0EtaVeto` function. The weight files used in release-03 were not available in release-04.
   The latter uses old weight files optimized with MC9, while new weight files, which are optimized with MC12, are used in `writePi0EtaVeto`
 * Enabled to select daughters which will be used to perform fitting with KFitter. One can use the selector ``^`` to select daughters.
 * The KFitter can be used to fit vertices of fully-inclusive particles, for which it ignores the daughters without defined p-value. 
 * :b2:mod:`RestOfEventBuilder`, :b2:mod:`EventKinematics` and :b2:mod:`EventShapeCalculator` modules can use most likely charged particle hypothesis according to PID information.
 * Added the :b2:mod:`ParticleCombinerFromMC` module and the `reconstructMCDecay` to find and create ``ParticleList`` from a given :ref:`DecayString`.
   They can be used instead of the :b2:mod:`MCDecayFinder` and `findMCDecay` which are not fully tested and maintained.
 * In :b2:mod:`TagVertex` added Btube as a possible constraint for the tag B vertex fit. The ``useFitAlgorithm`` parameter in the module is replaced
   by ``constraintType`` (which can be set to ``tube``) and ``trackFindingType``. All computations done in the module are now using double precision.
   The module is also updated to allow for the computations of new variables related to the tracks used in the tag vertex fit.
 * Added a :b2:mod:`InclusiveDstarReconstruction` to inclusively reconstruct D* mesons by estimating the four vector using slow pions.

Utilities
+++++++++

 * A set of functions ``DistanceTools`` has been added to compute distances between (straight) tracks and vertices.
