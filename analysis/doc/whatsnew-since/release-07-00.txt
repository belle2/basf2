Changes in the analysis package in light-2210-devonrex
------------------------------------------------------

Modules
+++++++
 * Fixed a bug in the KFit when the daughters' kinematics are updated (``daughtersUpdate=True``).
   The mother's momentum was calculated at the updated vertex position, however, the updated daughters' momentum was calculated at the original position.
   This caused the inconsistency in the momentum between the mother and the sum of daughters.
   Now the daughters' momentum is also calculated at the updated vertex position and the inconsistency is resolved.
 * Changed the TreeFit and KFit compatible with the momentum scaling factor.
   The daughters' kinematics as member variables of the Particle class are updated being divided by the momentum scaling factor.
   Still, the vertex fitters do not change the momentum scaling factor. So that the kinematics variables return correct values.

Changes in the analysis package in light-2209-calico
----------------------------------------------------

MVA-based pi0 identification
++++++++++++++++++++++++++++
 * New function :func:`modularAnalysis.lowEnergyPi0Identification` providing MVA-based pi0 identification is added.
 * Example of its usage is added as ``analysis/examples/PostMdstIdentification/LowEnergyPi0Identification.py``.

Variables
+++++++++
 * Extended the variable `useAlternativeDaughterHypothesis` to variables calculated from daughters' 4-momentum, e.g.
   `cosHelicityAngleMomentum`.
 * Added metavariable to retrieve the distance to the closest neighbour at a detector surface (based on track helix extrapolation): `minET2ETDist`.
 * Added metavariable to retrieve any variable associated to the closest neighbour at a detector surface from the reference particle list: `minET2ETDistVar`.
 * Added metavariable to retrieve the particle isolation score (based on `minET2ETDist` and, optionally, on PID detector weights): `minET2ETIsoScore`.

Modules
+++++++
 * New modules :b2:mod:`LowEnergyPi0VetoExpert` and :b2:mod:`LowEnergyPi0IdentificationExpert` for MVA-based pi0
   identification are added.
 * Added the new module :b2:mod:`ParticleMomentumUpdater` which is also available via the
   function :func:`modularAnalysis.setBeamConstrainedMomentum`. It lets you replace the momentum
   of one particle in your decay chain by p(beam)-p(selected particles).
 * The module :b2:mod:`ParticleLoader` has a new option to create particles which do
   not have a mdst source. It is also available via the convenience function 
   :func:`modularAnalysis.fillParticleListFromDummy`.
 * New module :b2:mod:`KlongMomentumUpdaterExpert` to calculate and update the two-body B-meson decay including a
   Klong is added. New function :func:`modularAnalysis.updateKlongKinematicsExpert` is also added.
 * In the module :b2:mod:`TagVertex` an iterative version of the KFit vertex fitter is added. This fitter should
   substitute Rave vertex fitter for the tagged B meson. The default configuration of the :b2:mod:`TagVertex` has changed.
   The default algorithm changed from ``Rave`` to ``KFit`` and the default constraint from ``IP`` to ``tube``.
   The ``KFit`` algorithm by default includes iterations, this can be changed by newly added ``kFitReqReducedChi2`` parameter.
 * The new expert argument ``expertBeamConstraintPDG`` has been added to the :b2:mod:`TreeFitter`. It allows the user to constrain 
   the four-momentum of a Particle to the four-momentum of the initial e+e- state.
 * Updated :b2:mod:`TrackIsoCalculator` to compute the particle isolation score.

Database Objects
++++++++++++++++
 * New database object class ``PIDDetectorWeights`` to store PID detector weights per standard charged particle, binned in p and theta.

Modular Analysis Function
+++++++++++++++++++++++++
 * Added a check to the `applyEventCuts` function to make sure that only event-based variables are used in the
   selection. The decomposition of meta variables can be tricky, so a new argument ``metavariables`` is added to extend
   the list of meta variables which should be decomposed and should themselves be ignored in the check.
 * Added the argument ``treatAsInvisible`` in :func:`vertex.treeFit` to ignore particles in the fit. 
 * Updated the `calculateTrackIsolation` helper. Now, it returns a list of metavariables (`minET2ETDist`, `minET2ETIsoScore`, optionally `minET2ETDistVar` as well)
   correctly configured according to the helper input options.
   Users can then create aliases in their own steering script: see ``analysis/examples/VariableManager/trackIsolationVariables.py`` for an example.
 * The default argument of :func:`flavorTagger.flavorTagger` is updated so that the weight files trained with MC15ri will be used as default.
   If one wants to use the previous weight files, the arguments should be set as follows: ``maskName='all'`` and ``prefix=''``.
 * With the :func:`vertex.kFit`, the daughters' kinematics are updated after the vertex fit, even when fit daughters are
   selected using ``decay_string`` and ``daughtersUpdate=True``.
 * The new argument ``ignoreMotherFlavor`` has been added to the function `mergeListsWithBestDuplicate`. It allows to ignore the
   flavor of the mother particle when identifying duplicates.

Particle dataobject
+++++++++++++++++++
 * Added a ``replaceDaughter`` method to Particle. It allows you to replace the daughter
   of a Particle with another Particle while keeping the original order of the daughters.
   This is important to ensure the decay string will work correctly after replacing a daughter.
 * Added a new Particle source ``NoMDSTSource`` to Particle. It can be used for Particles 
   that do not come from any mdst source.

Changes in the analysis package in light-2207-bengal
----------------------------------------------------

Variables
+++++++++
 * Added the variables of the PID probability with the calibration weights, `weightedElectronID`, `weightedMuonID`,
   `weightedPionID`, `weightedKaonID`, `weightedProtonID`, and `weightedDeuteronID`.
   Also, the expert PID variables were added, `pidWeightedLogLikelihoodValueExpert`, `pidWeightedPairProbabilityExpert`,
   and `pidWeightedProbabilityExpert`.
 * Added the variable `hasCorrectROECombination` to check if the correct combination of the particle that is the basis of
   the ROE object and the particle that is loaded from the ROE.
 * Added the variable `nMCDaughters` which returns the number of daughters of the MC-matched MCParticle or a MCParticle
   obtained with e.g. the `genUpsilon4S` metavariable.

Modules
+++++++
 * Fixed a bug in the :func:`modularAnalysis.fillParticleListFromROE`. The relationship of the pdg code between the loaded
   particle and the source particle was inconsistent when the loaded particle was not a self-conjugated particle.
