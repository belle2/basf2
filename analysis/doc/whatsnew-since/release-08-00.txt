Changes in the analysis package in light-2405-quaxo
---------------------------------------------------

Modules
+++++++
* Removed the cut functionality from the `KlongMomentumCalculatorExpert` module.

Variables
+++++++++
* Added the variables `beamBackgroundReuseRate` and `beamBackgroundEvents` for studying the Beam Background Overlay events
  used for producing MC samples.
* Added the metavariables `sumValueInList` and `productValueInList`, which return the sum and product
  of the given variable of the particles in the given particle list.


Changes in the analysis package in light-2403-persian
-----------------------------------------------------

Modules
+++++++
* Added a new option ``storeEventType`` in `VariablesToNtuple` and `VariablesToEventBasedTree` to store the MC event type
  information in the branch ``__eventType__`` with the string data type, e.g. ``mixed``, ``ccbar``. This information is available
  from MC16 on. For MC15 or older and for data, the branch will be empty. By default, the option is true.

Command line tools
++++++++++++++++++
* New command line tool :ref:`b2help-print-mcparticles` to print MCParticles on the input mdst file. This tool is helpful for
  quickly checking MCParticles without writing a script.

Variables
+++++++++
* Added variables for the MCMatching of ECLCluster based Klong, `clusterTotalMCMatchWeightForKlong`,
  `clusterTotalMCMatchWeightForBestKlong`, and `varForBestMatchedMCKlong`.
* Added variables for MC value of helix (track) parameters: `mcD0`, `mcPhi0`, `mcOmega`, `mcZ0`, `mcTanLambda`.
  These variable work both on MC-matched track-based Particles and on Particles made from MCParticles.
* Added the variable `genQ2PmPd`, which calculates the generated value of the four-momentum transfer squared using the
  four-momentum difference of the mother particle and given daughter particles: :math:`(p_m - p_{d_i} -  p_{d_j} - ...)^2`.
* Added MetaVariable `deltaPhiToMostB2BPhiInList`, which returns the abs(phi difference) to the most back-to-back in phi 
  (closest to 180 degrees) particle in the provided particle list.  
* Added the variable `ancestorBIndex`, which returns the array index of the B ancestor of the particle if a MC-match is found and the B exists,
  and -1 if not.

GraFEI
++++++
* A first version of the :ref:`GraFEI` (GraFEI) is introduced. The basic principles and instructions on 
  how to train and apply the model are available in the dedicated page.

Changes in the analysis package in light-2401-ocicat
----------------------------------------------------

Variables
+++++++++
* The variable `daughterDiffOf` accepts generalized daughter indices now so
  that you can calculate the difference of any variable between particles of
  different generations. The variable `grandDaughterDiffOf` is therefore not
  needed anymore and declared deprecated. The variables `mcDaughterDiffOf`
  and `daughterNormDiffOf` also accept generalized daughter indices now.
* Added the `BelleTofMass` variable (Belle only), which gives the mass of a track in :math:`GeV/c^2`, calculated using the TOF
  information, the path length and the momentum of the particle.


Changes in the analysis package in light-2311-nebelung
------------------------------------------------------

Modules
+++++++
* Added a new option ``useFloat`` in `VariablesToNtuple` and `modularAnalysis.variablesToNtuple` used to store
  floating-point data as single-precision (float) numbers instead of double-precision (double) numbers.
* Fixed a bug of MCMatching in `HelixErrorScaler` module, which is used for `stdV0s.scaleErrorKshorts` function. The MCMatching
  properties of K_S0 can be configured by the decayString in `modularAnalysis.fillParticleList`. However, the properties were
  not correctly propagated to the new V0 particles created with `HelixErrorScaler`.
  This bug caused the loss of signal (``isSignal==1``) candidates by about 5% for B-meson decays due to missing radiated photons,
  which should be accepted.
* Added a new module `TwoBodyISRPhotonCorrector` which can be accessed in the new function `modularAnalysis.twoBodyISRPhotonCorrector`.
  This module is meant to be used in two-body decays involving a high-energy ISR photon that likely experiences ECL leakage leading to an
  inaccurate energy measurement. The energy is corrected kinematically based on the beam energy, the photon's direction, and the mass of the
  other particle in the two-body decay. The corrected kinematics are stored in copied particles in a new ParticleList. The original
  kinematics of the ISR photon can be accessed using the metavariable `originalParticle`.
* Added a new module `TrackingEnergyLossCorrection` alongside its helper function `modularAnalysis.correctTrackEnergy`.
  This module modifies the track energy of each particle inside a particle list according to the given correction value
  or by a phase-space dependent correction value extracted from a ParticleWeightingLookUpTable payload.
  This module is intended to be used alongside the momentum scale factors implemented in the module `TrackingMomentumScaleFactors`.
* Fixed a bug in the `MCDecayFinder` and `modularAnalysis.findMCDecay` that causes a segmentation fault when multiple candidates are
  found.

Variables
+++++++++
* Fixed a bug for the variable `cosHelicityAngleMomentum`. The variable always returned 1 when a daughter particle decays to
  :math:`e^+ e^-`, e.g. :math:`B^0 \to J/\psi (\to e^+ e^-) K_S^0`. This is due to a special treatment for the pi0 Dalitz decay,
  i.e. :math:`\pi^0 \to \gamma (\to e^+ e^-) \gamma`, is called accidentally. This functionality is going to be deprecated and
  `cosHelicityAngleMomentumPi0Dalitz` is recommended to use instead.
* The variable `cosHelicityAngleMomentumPi0Dalitz` is extended to the case of pi0 two-body decay, where a photon is reconstructed
  from the photon conversion, :math:`\pi^0 \to \gamma (\to e^+ e^-) \gamma`.


Changes in the analysis package in light-2309-munchkin
------------------------------------------------------

Bugfix of ParticleListManipulator for particleLists loaded from KLMClusters
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* Fixed a major bug in the `ParticleListManipulator` used in functions such as `copyList`, `fillParticleList` and other
  modularAnalysis functions. The bug occurred when creating a particle list from two or more types of mdst objects, for example,
  ``K_L0`` loaded from ECL clusters and KLM clusters. When a new particle list was created from original lists, mdst objects with the
  same mdst index as other mdst objects were skipped and not added to the new particle list, even if the mdst types were different.
  This mainly impacted the ``K_L0`` or ``neutron`` particle lists, resulting in a significant drop in particles loaded from
  KLM clusters. No such impact has been observed for other types of particle lists.


FEI
+++
* Applied the mass constraint to pi0 candidates in FEI.
  Please note that the FEI calibration on MC15ri is performed without applying pi0 mass constraint and without loosening the gamma
  energy threshold, which has been implemented since light-2305-korat.
  So, either use FEI skims (recommended), or run FEI with an older release until new FEI calibration with MC16 will be available.

Photon Energy Resolution
++++++++++++++++++++++++
* Added ``ECLPhotonEnergyResolution`` to analysis database objects. This module reads the relative energy resolution calculation
  results from the `Photon Energy Resolution Calibration workflow <https://gitlab.desy.de/alexander.heidelbach/photonenergyresolutioncalibration>`_
  and creates a corresponding database object. The new method ``GetCovarianceMatrix3x3FromCluster`` in ``ClusterUtils`` replaces the former
  calculated values if the cluster properties (:math:`E`, :math:`\phi`, :math:`\theta`) are within valid binning and leaves them unchanged otherwise.
  ``ClusterUtils`` triggers the replacement if a globaltag with a valid ``ECLPhotonEnergyResolution`` payload is present and
  without further user input.

Particle weights
++++++++++++++++
* Added a new utility class ``PostProcessingParticleWeighting`` for
  post-processing particle weighting. This class reads the weights from the
  database for the specified experiment and run numbers and the weight-table
  variables.

Variables
+++++++++
* Added the variables `PxHER`, `PyHER`, `PzHER` and  `PxLER`, `PyLER`, `PzLER`  which are the nominal beam momenta
  derived from the ``CollisionInvariantMass``, ``CollisionBoostVector`` and ``CollisionAxisCMS`` payloads
* Added the variables `mcPxHER`, `mcPyHER`, `mcPzHER` and  `mcPxLER`, `mcPyLER`, `mcPzLER`  which are the truth
  momenta of colliding electron/positron for the event. These are available only for MC.
  For ``EvtGen`` and ``BabaYaga`` generators these variables have dummy value for MC15 or older.
