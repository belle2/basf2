/**************************************************************************
 * BASF2 (Belle Analysis Framework 2)                                     *
 * Copyright(C) 2015 - Belle II Collaboration                             *
 *                                                                        *
 * Author: The Belle II Collaboration                                     *
 * Contributors: Torben Ferber                                            *
 *                                                                        *
 * This software is provided "as is" without any warranty.                *
 **************************************************************************/

#ifndef PARTICLEKINEMATICFITTERMODULE_H
#define PARTICLEKINEMATICFITTERMODULE_H

#include <framework/core/Module.h>
#include <string>
#include <analysis/DecayDescriptor/DecayDescriptor.h>

// OrcaKinFit
#include <analysis/OrcaKinFit/BaseFitter.h>
#include <analysis/OrcaKinFit/OPALFitterGSL.h>
#include <analysis/OrcaKinFit/NewtonFitterGSL.h>
#include <analysis/OrcaKinFit/NewFitterGSL.h>
#include <analysis/OrcaKinFit/TextTracer.h>
#include <analysis/OrcaKinFit/RootTracer.h>

#include <analysis/OrcaKinFit/MomentumConstraint.h>
#include <analysis/OrcaKinFit/ParticleFitObject.h>

#include <TLorentzVector.h>
#include <TMatrixFSym.h>

#include <CLHEP/Matrix/Matrix.h>
#include <CLHEP/Matrix/SymMatrix.h>
#include <CLHEP/Vector/ThreeVector.h>
#include <CLHEP/Vector/LorentzVector.h>
#include <CLHEP/Geometry/Point3D.h>

using namespace CLHEP;

namespace Belle2 {

  class Particle;

  /**
   * Vertex fitter module
   */
  class ParticleKinematicFitterModule : public Module {

  public:

    /**
     * Constructor
     */
    ParticleKinematicFitterModule();

    /**
     * Initialize the Module.
     * This method is called at the beginning of data processing.
     */
    virtual void initialize() override;

    /**
     * Called when entering a new run.
     * Set run dependent things like run header parameters, alignment, etc.
     */
    virtual void beginRun() override;

    /**
     * Event processor.
     */
    virtual void event() override;

  private:

    // module parameters
    std::string m_listName;            /**< particle list name */
    std::string m_kinematicFitter;     /**< Kinematic Fitter name */
    std::string m_orcaFitterEngine;    /**< Orca Fitter Engine name */
    std::string m_orcaTracer;          /**< Tracer (None, Text or ROOT) */
    std::string m_orcaConstraint;      /**< Constraint (softBeam, hardBeam (default)) */
    bool m_debugFitter;                /**< activate internal debugging (for New and Newton fitter only)*/
    int m_debugFitterLevel;            /**< internal debugging level (for New and Newton fitter only)*/
    double m_confidenceLevel;          /**< required fit confidence level to keep the particle*/
    bool m_addUnmeasuredPhoton;        /**< add one unmeasured photon to the fit (costs 3 constraints)*/

    // internal variables
    // tracers
    TextTracer *m_textTracer;
    RootTracer *m_rootTracer;

    std::vector <double> m_unmeasuredLeptonFitObject;   /**< unmeasured fit object */
    std::vector <double> m_unmeasuredGammaFitObject;  /**< unmeasured fit object */
    
    // hard constraints
    MomentumConstraint m_hardConstraintPx;  /**< hard beam constraint px */
    MomentumConstraint m_hardConstraintPy;  /**< hard beam constraint py */
    MomentumConstraint m_hardConstraintPz;  /**< hard beam constraint pz */
    MomentumConstraint m_hardConstraintE;   /**< hard beam constraint E */
    
    
//     std::vector <ParticleFitObject> m_particleFitObjects;


    // UNUSED YET
    std::string m_decayString;         /**< daughter particles selection */
    DecayDescriptor m_decaydescriptor; /**< Decay descriptor of decays to look for. */





    /**
     * Main steering routine for any kinematic fitter
     * @param p pointer to particle
     * @return true for successful fit
     */
    bool doKinematicFit(Particle* p);
 
    /**
     * Kinematic fit using OrcaKinFit
     * @param p pointer to particle
     * @return true for successful fit
     */
    bool doOrcaKinFitFit(Particle* p);

    /**
     * Fills valid particle's children (with valid error matrix) in the vector of Particles that will enter the fit.
     */
    bool fillFitParticles(const Particle* mother, std::vector<const Particle*>& particleChildren);

    /**
     * Adds given particle to the OrcaKinFit.
     * @param fitter reference to OrcaKinFit fitter object
     * @param particle pointer to particle
     * @param index used to name particles: particle_%index
     */
    void addParticleToOrcaKinFit(BaseFitter& fitter, const Particle* particle, const int index);

    /**
     * Adds Orca fit object to the constraints.
     * @param fitobject reference to OrcaKinFit fit object
     */
    void addFitObjectToConstraints(ParticleFitObject& fitobject);

    /**
     * Adds Orca fit object to the constraints.
     * @param fitter reference to OrcaKinFit fitter object
     */
    void addConstraintsToFitter(BaseFitter& fitter);

    /**
     * Adds tracer to the fitter.
     * @param fitter reference to OrcaKinFit fitter object
     */
    void addTracerToFitter(BaseFitter& fitter);

    /**
     * Sets constraints, this is not connect to particles or a fitter at this stage
     */
    void setConstraints();

    /**
     * Get constraints (at whatever stage before/after fitting)
     */ 
    TLorentzVector getTLorentzVectorConstraints();

    /**
     * Resets all objects associated with the OrcaKinFit fitter.
     * @param fitter reference to OrcaKinFit fitter object
     */
    void resetFitter(BaseFitter& fitter);

    /**
     * Adds an unmeasured gamma (E, phi, theta) to the fit (-3C)
     * stored as EventExtraInfo TODO
     * @param fitter reference to OrcaKinFit fitter object
     */
    void addUnmeasuredGammaToOrcaKinFit(BaseFitter& fitter);
    
    /**
     * Adds an unmeasured collinear ISR photon with spectrum prior to the fit (-1C) TODO
     * @param fitter reference to OrcaKinFit fitter object
     */    
    void addUnmeasuredISRGammaToOrcaKinFit(BaseFitter& fitter);

    
    bool updateOrcaKinFitMother(BaseFitter& fitter, std::vector<const Particle*>& particleChildren, Particle* mother);

    /**
     * store fit object information as ExtraInfo
     * @param prefix can be used to distinguis e.g. "Fitted" and "Measured"
     * @param particleChildren list of all particle childen
     * @param mother mother particle
     */
    bool storeOrcaKinFitParticles(std::string prefix, BaseFitter& fitter, std::vector<const Particle*>& particleChildren, Particle* mother);


    /**
     * Returns particle's 4x4 momentum-error matrix as a HepSymMatrix
     * @param particle pointer to particle
     */
    CLHEP::HepSymMatrix getCLHEPMomentumErrorMatrix(const Particle* particle);

    /**
     * Returns particle's 7x7 momentum-vertex-error matrix as a HepSymMatrix
     * @param particle pointer to particle
     */
    CLHEP::HepSymMatrix getCLHEPMomentumVertexErrorMatrix(const Particle* particle);
    
    /**
     * Returns particle's 4-momentum as a HepLorentzVector
     * @param particle pointer to particle
     */
    CLHEP::HepLorentzVector getCLHEPLorentzVector(const Particle* particle);

    /**
     * @param fitobject reference to OrcaKinFit fit object
     * Returns particle's 4-momentum as a TLorentzVector
     */
    TLorentzVector getTLorentzVector(const ParticleFitObject* fitobject);

    /**
     * Returns fit object error on the paramater ilocal
     * @param fitobject reference to OrcaKinFit fit object
     * @param ilocal internal local ID
     */
    float getFitObjectError(const ParticleFitObject* fitobject, int ilocal);

    /**
     * Returns particle's 7x7 momentum-vertex-error matrix as a TMatrixFSym
     */
    TMatrixFSym getTMatrixFSymMomentumErrorMatrix(const ParticleFitObject* fitobject);
    TMatrixFSym getTMatrixFSymMomentumVertexErrorMatrix(const ParticleFitObject* fitobject);

  };

} // Belle2 namespace

#endif
