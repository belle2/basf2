#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Thomas Keck 2014

from basf2 import *
from fei import *
import os
import modularAnalysis

import fei.preCutDetermination
fei.preCutDetermination.minimum_number_of_particles = 50

chargedTrackVars = [
    'eid',
    'eid_dEdx',
    'eid_TOP',
    'eid_ARICH',
    'eid_ECL',
    'Kid',
    'Kid_dEdx',
    'Kid_TOP',
    'Kid_ARICH',
    'prid',
    'prid_dEdx',
    'prid_TOP',
    'prid_ARICH',
    'muid',
    'muid_dEdx',
    'muid_TOP',
    'muid_ARICH',
    'p',
    'pt',
    'chiProb']

mvaConfig_chargedFSP = MVAConfiguration(
    variables=chargedTrackVars,
    target='isSignal',
)

pre_chargedFSP = PreCutConfiguration(
    variable='dr',
    # The range should include the signal peak, and the uniform part of the background (important for sPlot training!)
    binning=(100, 0.0, 10.0),
    efficiency=0.99,
    purity=0.001,
)

mvaConfig_D = MVAConfiguration(
    variables=['daughterProductOf(extraInfo(SignalProbability))',
               'daughterAngle(0, 1)',
               'p',
               'pt',
               'M',
               'dr',
               'dz',
               'distance',
               'significanceOfDistance',
               'chiProb',
               'extraInfo(decayModeID)'],
    target='isSignal',
)

preCutConfiguration_nonFSP = PreCutConfiguration(
    variable='M',
    binning=(500, 0.0, 6.0),
    efficiency=0.8,
    purity=0.0001,
)

particles = []
particles.append(Particle('pi+', mvaConfig_chargedFSP, pre_chargedFSP).addChannel(['pi+:FSP']))
particles.append(Particle('pi+:special', mvaConfig_chargedFSP, pre_chargedFSP).addChannel(['pi+:FSP']))
particles.append(Particle('K+', mvaConfig_chargedFSP, pre_chargedFSP).addChannel(['K+:FSP']))


p = Particle('D0', mvaConfig_D, preCutConfiguration_nonFSP)
p.addChannel(['K-', 'pi+'])
p.addChannel(['pi-', 'pi+'])
particles.append(p)

p = Particle('D0:special', mvaConfig_D, preCutConfiguration_nonFSP)
p.addChannel(['K-', 'pi+:special'])
particles.append(p)

selection_path = create_path()
selection_path.add_module('RootInput')

if os.path.isfile('specific_mode'):
    modularAnalysis.fillParticleLists([('mu+:signal', 'muid > 0.1')], True, selection_path)
    feistate = fullEventInterpretation('mu+:signal', selection_path, particles)
else:
    feistate = fullEventInterpretation(None, selection_path, particles)

if feistate.is_trained:
    feistate.path.add_module('RootOutput', outputFileName='analysisPathDone.root', ignoreCommandLineOverride=True)


feistate.path.add_module('PrintCollections')
print(feistate.path)
process(feistate.path)
print(statistics)
