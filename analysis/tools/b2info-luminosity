#!/bin/env python3
# -*- mode: Python; coding: utf-8 -*-

"""
Script to get the integrated luminosity of a set of runs

Usage:
    b2info-luminosity --exp <E> --runs <Range> --what [online|offline] --plot [DAY|WEEK|RUN] [--verbose]

"""

__author__ = "Stefano Lacaprara, Alberto Martini"
__email__ = "stefano.lacaprara@pd.infn.it, alberto.martini@roma3.infn.it"


import argparse
import re
import sqlite3
import time
from datetime import datetime
import os
import basf2 as b2

import pandas as pd
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import matplotlib.dates as mdates
from matplotlib.dates import MO
import numpy as np

import requests


def parseNumRange(string):
    """
    Parse range of integers like xx-yy
    """
    m = re.match(r'(\d+)(?:-(\d+))?$', string)
    if not m:
        raise argparse.ArgumentTypeError("'" + string + "' is not a range of number. Expected forms like '0-5' or '2'.")
    start = m.group(1)
    end = m.group(2) or start
    return set(range(int(start, 10), int(end, 10) + 1))


def parseNumList(string):
    """
    Parse range of integers like xx-yy,zz
    """
    result = set()
    for rr in [x.strip() for x in string.split(',')]:
        result |= parseNumRange(rr)

    return sorted(list(result))

def fill_zeros_with_last(arr):
    """
    fill the zeros and nan of an array with previous non zero value
    """
    prev = np.arange(len(arr))
    prev[arr == 0] = 0
    prev[arr == np.nan] = 0
    prev = np.maximum.accumulate(prev)
    return arr[prev]


def argparser():
    """
    Parse options as command-line arguments.
    """

    description = "Script to get the integrated luminosity."

    parser = argparse.ArgumentParser(description=description, usage=__doc__, add_help=True)

    parser.add_argument("--exp",
                        dest="exp",
                        action="store",
                        type=parseNumList,
                        required=True,
                        help="Experiment numbers (required). Range allowed: eg 3,7-10")
    parser.add_argument("--runs",
                        dest="runs",
                        action="store",
                        type=parseNumList,
                        required=False,
                        default=None,
                        help="Process only the selected run range. Syntax is xx-yy,zz. Multiple ranges allowed xx-yy,zz,aa-bb")
    parser.add_argument("--what",
                        dest="what",
                        action="store",
                        type=str,
                        required=False,
                        default='online',
                        choices=["offline","online"],
                        help="Which luminosity: online (default) or offline")
    parser.add_argument("--verbose",
                        dest="verb",
                        action="store_true",
                        default=False,
                        help="Print luminosity for each run")
    parser.add_argument("--delivered",
                        dest="delivered",
                        action="store_true",
                        default=False,
                        help="Show also delivered lumi")

    parser.add_argument("--dbonline",
                        dest="dbonline",
                        action="store",
                        default="/gpfs/group/belle2/group/detector/ECL/ecl_lom.db",
                        help="ECL DataBase path (for developers)")
    parser.add_argument("--dboffline",
                        dest="dbofflie",
                        action="store",
                        default="/group/belle2/dataprod/Luminosity/OffLineLuminosity.db",
                        help="DataBase path for OffLine Lumi (for developers)")

    plot_actions = {
        "DAY"  : "Histogram of daily integrated luminosity",
        "WEEK" : "Histogram of weekly integrated luminosity",
        "RUN"  : "Histogram of integrated luminosity per run",
        }

    parser.add_argument("--plot",
                        dest="plot",
                        action="store",
                        nargs='+',
                        choices=list(plot_actions.keys()),
                        default=None,
                        help="Produce plot of integrated luminosity for each run, day, or week")

    return parser

class Luminosity:
    """
    class to read lumi info from DB and serve in various way
    """

    def __init__(self, args):
        """
        initializiation 

        :param args: command-line args.
        """
        self.DBonline = args.dbonline
        self.DBoffline = args.dbofflie
        self.what=args.what

        self.ACCESS_TOKEN="eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbmRwb2ludHMiOltdLCJuYW1lIjoiTHVtaW5vc2l0eSBQbG90cyAobGFjYXByYXIpIn0.CmZ4xdSNFnskDi77xFHUUySJIRhA6DVpslCEEvOUDKY"
        self.URL="https://rundb.belle2.org"
        self.session = requests.Session()
        if not self.session:
            b2.B2FATAL(f"could not establish connection to rundb: {self.URL}")
        self.session.headers.update({'Authorization':f'Bearer {self.ACCESS_TOKEN}', 'Content-Type': 'application/json'})
        
        self.exp=args.exp
        self.expstr="-".join(str(_) for _ in args.exp)
        self.runs=args.runs
        if len(self.exp)>1 and self.runs:
            b2.B2FATAL(f"No run range (--runs ) allowed if multiple experiments are selected (--exp {self.exp})")
        if args.plot == 'RUN' and len(self.exp)>1:
            b2.B2FATAL(f"If plotting lumi per run (--plot RUN) you can select only one experiment (--exp {self.exp})")

        self.runRangeStr="All runs"
        if self.runs:
            self.runRangeStr=f"Runs {min(self.runs)}-{max(self.runs)}"

        self.verb=args.verb
        self.delivered=args.delivered

        # Fill df with data
        self.df=self.getDataFrame(self.exp)

    def create_connection(self, what):
        """
        Create a database connection to the SQLite database specified by the db_file.

        :param db_file: database file
        :return: Connection object or None
        """

        DB=None
        if what=='offline':
            DB=self.DBoffline
        elif what=='online':
            DB=self.DBonline

        if not os.path.exists(DB):
            b2.B2FATAL(f"DB {DB} not found. The live luminosity is only available on KEKCC (sorry)")

        connection = None
        try:
            connection = sqlite3.connect(DB)
        except sqlite3.Error as e:
            print(e)

        return connection

    def getDataFrameFromDBOffLine(self):
        """
        create a panda dataframe from Offline DB
        """
        cmdexp = f"SELECT lee as lumi, exp, run, start_time as date FROM RunLumi WHERE exp IN ({', '.join(['?' for _ in self.exp])})  "
        if args.runs:
            cmdexp += f" AND run >= {min(self.runs)} AND run <= {max(self.runs)}"

        # Get the DB as a pandas.Dataframe.
        df = pd.read_sql(cmdexp, self.conn, params=self.exp)
        df = df.sort_values(by=['date'])
        print(f"Read {len(df)} runs for experiment {self.expstr}")

        # # convert epoch to date
        df['date'] = pd.to_datetime(df['date'],unit='s')

        # lumi in /fb
        df['lumi'] *= 1E-6

        # cumulative integrated luminosity
        df['intLumi'] = df['lumi'].cumsum()

        return df

    def getDataFrameFromDBOnline(self, exp):
        """
        create a panda dataframe from online DB
        """

        cmdexp = f"SELECT exp, lum_det_shift as lumi, run, start_time as date, end_time FROM prev_bhacnt_det_run WHERE exp IN ({', '.join(['?' for _ in exp])}) AND start_time > 0 "
        if args.runs:
            cmdexp += f" AND run >= {min(self.runs)} AND run <= {max(self.runs)}"

        # Get the DB as a pandas.Dataframe.
        df = pd.read_sql(cmdexp, self.conn, params=exp)
        df = df.sort_values(by=['date'])

        # convert epoch to date
        df['date'] = pd.to_datetime(df['date'],unit='s')

        # lumi in /fb
        df['lumi'] *= 1E-6
        print(f"Read {len(df)} runs for experiment {exp}")

        return df

    def pagination(self, request):
        """Deal with api pagination of an initial request to the api.

        It will return all the objects from all pages lazily requesting new pages
        as objects are consumed. Will work for all list requests to the server

        Parameters:
            request (requests.Request): A get request to paginate through the results
        """
        while True:
            # check the return value and raise exception on error
            request.raise_for_status()
            # and otherwise get the json
            result = request.json()
            # and return the objects one by one by yielding objects from the list
            # of results
            yield from result['results']
            # check if there's a next page, if not done
            if result['next'] is None:
                break
            # otherwise continue with the next page
            # yees, global variable ... should be a class ... whatever
            request = self.session.get(result['next'])

    def get_run_info(self, **search_params):
        """Return the run information from the run registry"""
        req = self.session.get(f'{self.URL}/rest/v1/runs/', params=search_params)
        return self.pagination(req)

    def getDataFrameFromRunRegistry(self, exp):
        """Return a dataframe with the luminosity information form run registry"""
        import json
        import getpass
        import dateutil.parser
           
        # temporary hack to get exp 7 and 8 from online DB
        df=pd.DataFrame(columns=["exp", "run", "date", "lumi","intLumi","intLumiDel"])
        rows=[]
    
        print(f"Reading exp {exp} from RunRegistry")
        
        for run in self.get_run_info(min_experiment={exp[0]}, max_experiment={exp[-1]}, run_type="physics", expand=True):
            if not run['time_stop']:
                continue
            row={"exp":run['experiment'],
                 "run":run['run'],
                 "date":int(dateutil.parser.parse(run['time_start']).timestamp()),
                 "lumi":run['statistics']['lumi_recorded'],
                }
            if(run['extra_data']):
                row['intLumiDel']=run['extra_data']['statistics']['lumi_exp_delivered']
            rows.append(row)
        
        df = pd.DataFrame(rows)
        print(f"Read {len(df)} runs from exp {exp}")

        # lumi in /fb
        df['lumi'] *= 1E-6
        df['intLumiDel'] *= 1E-6
        #df.fillna(0)

        # convert epoch to date
        df['date'] = pd.to_datetime(df['date'],unit='s')

        # TEMPORARY and AWFUL FIX for exp12 runs 1329-1333: integrated delivered luminosity is wrong.
        print(exp)
        if 12 in exp:
            print('FIXING DELIVERED LUMI FOR RUNS 1329-1333')
            intLumiDelRun1200=df.at[df.index[(df['run']==1200) & (df['exp']==12)].tolist()[0], 'intLumiDel']
            #print('Lumi for run 1200',intLumiDelRun1200)
        
            for run in range(1329,1334):
                #run index
                index=df.index[(df['exp']==12) & (df['run']==run)].tolist()[0]
                # new lumi
                newlumi=df.at[index,'intLumiDel']+intLumiDelRun1200
                #print(newlumi)
                df.at[index,'intLumiDel']=newlumi
                print(f'Fixed runs {run} delivered lumi to {newlumi:0.3f} /pb')
        
        return df

    def getDataFrame(self,exp):
        """ get pandas dataframe for a set of experiment, taking into account the source: DB or RR """

        if self.what=='online':
            # temporary hack to get exp 7 and 8 from online DB
            df=pd.DataFrame(columns=["exp", "run", "date", "lumi","intLumi","intLumiDel"])
            if self.exp[0]<9:
                # need to 
                self.conn = self.create_connection(self.what)
                if not self.conn:
                    b2.B2FATAL(f"could not establish connection to db: {db}")
            if 7  in self.exp:
                df=df.append(self.getDataFrameFromDBOnline([7]),sort=False)
            if 8  in self.exp:
                df=df.append(self.getDataFrameFromDBOnline([8]),sort=False)
            # experiment >10
            exp_rr= [e for e in self.exp if e>9]
            if len(exp_rr):
                df=df.append(self.getDataFrameFromRunRegistry(exp_rr),sort=False)
            # cumulative integrated luminosity
            df['intLumi'] = df['lumi'].cumsum()
        else:
            b2.B2FATAL(f"{self.what} not supported yet")

        return df

    def plotLumiPerPeriod(self, period=1):
        """
        Make monitoring plots of luminosity.

        :param period: 1 for day, 2 for week (start on monday)
        """

        # protection for strange entry in the database
        df=self.df.copy()

        #drop runs with no date
        df["TMP"] = df.date.values                 # date is a DateTimeIndex
        df = df[df.TMP.notnull()]                  # remove all NaT values
        df.drop(["TMP"], axis=1, inplace=True)     # delete TMP again

        #drop runs with start date before actual start  of BelleII
        df=df[~(df['date']<'2018-01-01')]
    
        # Group runs by date, and store the int lumi per date as the max cumulative lumi.
        # This returns a pandas.Series object.
        srs_lumi_date = []
        if period==1: # daily
            srs_lumi_date = df.groupby(df["date"].dt.ceil('d'))["lumi"].sum()
            srs_lumi_del_date = df.groupby(df["date"].dt.ceil('d'))["intLumiDel"].max()
            label="Daily"
            freq='D'
            width=1.0
        if period==2: # weekly
            srs_lumi_date = df.groupby(df["date"].dt.ceil('7d'))["lumi"].sum()
            srs_lumi_del_date = df.groupby(df["date"].dt.ceil('7d'))["intLumiDel"].max()
            label="Weekly"
            freq='7d'
            width=3.5
    
        srs_lumi_date = srs_lumi_date.asfreq(freq, fill_value=0.0)
        srs_lumi_del_date = srs_lumi_del_date.asfreq(freq, fill_value=0.0)

        x = srs_lumi_date.index.values
        y = srs_lumi_date.values

        # integrated luminosity
        yInt = np.cumsum(srs_lumi_date.values)
        # delivered integrated luminosity
        yIntDel = fill_zeros_with_last(srs_lumi_del_date.values)
        yIntDel = np.ma.masked_where(np.isnan(yIntDel), yIntDel)

        figure, ax1 = plt.subplots()
        
        ax1.bar(x, y, label=f"Recorded {label}", color="blue", width=-width, alpha=0.5, align='edge')

        ax1.set_xlabel(r"Date")
        ax1.set_ylabel(rf"Total integrated {label} luminosity [$\mathrm{{fb}}^{{-1}}$]", color="blue")
        ax1.set_ylim(bottom=0,top=y.max()*1.2)
        ax1.tick_params(axis='y', labelcolor="blue")

        ax1.xaxis.set_minor_locator(ticker.AutoLocator())
        ax1.xaxis.set_major_locator(ticker.AutoLocator())
        ax1.tick_params(axis="x", labelrotation=45, labelsize="small", length=8)

        # plot integrate lumi
        ax2 = ax1.twinx()
        ax2.set_ylabel(r"Total integrated luminosity [$\mathrm{fb}^{-1}$]", color="red")
        if (self.delivered):
            ax2.set_ylim(bottom=0,top=np.nan_to_num(yIntDel,0).max()*1.1)
        else:
            ax2.set_ylim(bottom=0,top=np.nan_to_num(yInt,0).max()*1.1)
        ax2.tick_params(axis='y', labelcolor="red")
        if (self.delivered):
            ax2.plot(x, yIntDel, color="red", lw=2,linestyle="-.", label=rf"$\int\mathcal{{L}}_{{Delivered}}\,dt\,= {self.df['intLumiDel'].max():.2f}\,[\mathrm{{fb}}^{{-1}}]$")
        ax2.plot(x, yInt, color="red", lw=2, label=rf"$\int\mathcal{{L}}_{{Recorded}}\,dt\,= {self.df['intLumi'].max():.2f}\,[\mathrm{{fb}}^{{-1}}]$")

        ax2.xaxis.set_major_locator(ticker.AutoLocator())
        ax2.xaxis.set_minor_locator(ticker.AutoLocator())

        h1, l1 = ax1.get_legend_handles_labels()
        h2, l2 = ax2.get_legend_handles_labels()

        ax2.legend(h1+h2, l1+l2, loc="upper left",title=r"Integrated luminosity [$\mathrm{fb}^{-1}$]")

        # Text box. Use axis coords.
        plt.text(0., 1.02, rf"Belle II {self.what.title()} luminosity", transform=ax1.transAxes, fontsize=12)
        plt.text(1., 1.02, rf"Exp: {self.expstr} - {self.runRangeStr}", transform=ax1.transAxes, ha='right', fontsize=12)

        plt.text(1, -0.25, f"Plot on {datetime.now().strftime('%Y/%m/%d %H:%M %Z')}", transform=ax1.transAxes, fontsize=6, ha="right")

        filename=f"Lumi{self.what.title()}_{label}_Exp{self.expstr}"
        if self.runs:
            filename+=f"_RunRange{min(self.runs)}-{max(self.runs)}"
        print(f"Creating {filename}.pdf|png files")
        for fileformat in ['pdf','png']:
            plt.savefig(f"{filename}.{fileformat}", bbox_inches="tight", dpi=150)


        # produce plot of luminosity efficiency
        if self.delivered:
            df['lumiEff']=df['intLumi']/df['intLumiDel']

            yIntPeriod = srs_lumi_date.values

            # delivered lumi in each period: can be zero!
            yIntDelPeriod= yIntDel
            yIntDelPeriod[1:] -= yIntDelPeriod[:-1].copy()
            
            # mask divide by zero error
            with np.errstate(divide='ignore', invalid='ignore'):
                yeff=np.divide(yIntPeriod, yIntDelPeriod)
                yeff = np.ma.masked_where(np.isnan(yeff), yeff)

            figure, ax1 = plt.subplots()

            ax1.set_xlabel(r"Date")
            ax1.set_ylim(bottom=0,top=100)
            ax1.set_ylabel(rf"Data taking $\varepsilon$", color="blue")

            ax1.xaxis.set_major_locator(ticker.AutoLocator())
            ax1.xaxis.set_major_locator(mdates.WeekdayLocator(MO))
            fmt=mdates.DateFormatter('%y/%m/%d')
            ax1.xaxis.set_major_formatter(fmt)
            ax1.yaxis.set_major_locator(ticker.FixedLocator([0, 10, 30, 50, 70, 80, 90, 100]))
            ax1.yaxis.grid(which='major', linestyle='dotted')
            ax1.yaxis.set_major_formatter(ticker.PercentFormatter())
            ax1.tick_params(axis="x", labelrotation=45, labelsize="small", length=8)

            df=df[df['lumiEff'].between(0,1)]
            # print(df[['date','intLumi','intLumiDel','lumiEff']]
            #         .to_string(index=False,
            #             col_space=3,
            #             header=['date','int Lumi','int Lumi Delivered','lumiEff'],
            #             formatters={
            #             "data" : "".format,
            #             "intLumi" : "{:,.3f}".format,
            #             "intLumiDel" : "{:,.3f}".format,
            #             "lumiEff" : "{:,.2f}".format,
            #             }
            #             )
            #      )

            ax1.plot_date(df['date'],
                          df['lumiEff']*100, 
                          fmt='-', 
                          label=rf'Cumulative $\varepsilon$ = {df["lumiEff"].iloc[-1]:2.1%}', 
                          color='red', 
                         )

            ax1.bar(x, yeff*100,
                    label=rf"{label} $\varepsilon$",
                    color="blue", width=-width, alpha=0.5, align='edge')

            ax1.legend(loc="lower right",title=r"Data taking $\varepsilon$")

            filename=f"LumiEff{self.what.title()}_{label}_Exp{self.expstr}"
            if self.runs:
                filename+=f"_RunRange{min(self.runs)}-{max(self.runs)}"
            print(f"Creating {filename}.pdf|png files")
            for fileformat in ['pdf','png']:
                plt.savefig(f"{filename}.{fileformat}", bbox_inches="tight", dpi=150)


    
        

    def plotLumiPerRun(self):
        """
        Make lumi plot per run
        """

        # create a reduced dataframe with only runs selected
        # these are the runs to be selected
        if (self.runs):
            dfRuns=self.df[self.df['run'].isin(self.runs)].copy()
            dfRuns['intLumi'] = dfRuns['lumi'].cumsum()
        else:
            dfRuns=self.df

        figure, ax1 = plt.subplots()

        ax1.bar(dfRuns['run'], dfRuns['lumi'], label=f"Recorded run by run", color="blue", width=1.0, alpha=0.5)
        ax1.set_xlabel(r"Run")
        ax1.set_ylabel(rf"Total integrated luminosity by run [$\mathrm{{fb}}^{{-1}}$]", color="blue")
        ax1.tick_params(axis='y', labelcolor="blue")
        ax1.tick_params(axis="x", labelrotation=45, labelsize="small", length=8)
        ax1.set_xlim(left=int(dfRuns['run'].min()*0.99))
        ax1.set_ylim(bottom=0,top=dfRuns['lumi'].max()*1.2)
        ax1.xaxis.set_major_locator(ticker.LinearLocator(numticks=10))

        # plot integrate lumi
        ax2 = ax1.twinx()
        ax2.set_ylabel(r"Total integrated luminosity [$\mathrm{fb}^{-1}$]", color="red")
        ax2.set_ylim(bottom=0,top=dfRuns['intLumiDel'].max()*1.1)
        ax2.tick_params(axis='y', labelcolor="red")
        ax2.xaxis.set_major_locator(ticker.LinearLocator(numticks=10))
        ax2.xaxis.set_major_locator(ticker.AutoLocator())
        if (self.delivered):
            ax2.plot(dfRuns['run'], dfRuns['intLumiDel'], color="red",linestyle="-.",  label=rf"$\int\mathcal{{L}}_{{Delivered}}\,dt\,= {self.df['intLumiDel'].max():.2f}\,[\mathrm{{fb}}^{{-1}}]$")
        ax2.plot(dfRuns['run'], dfRuns['intLumi'], color="red", label=rf"$\int\mathcal{{L}}_{{Recorded}}\,dt\,= {self.df['intLumi'].max():.2f}\,[\mathrm{{fb}}^{{-1}}]$")

        h1, l1 = ax1.get_legend_handles_labels()
        h2, l2 = ax2.get_legend_handles_labels()
        ax2.legend(h1+h2, l1+l2, loc=2, title=r"Integrated luminosity [$\mathrm{fb}^{-1}$]")

        # Text box. Use axis coords.
        plt.text(0., 1.02, rf"Belle II {self.what.title()} luminosity", transform=ax1.transAxes, fontsize=12)
        plt.text(1., 1.02, rf"Exp: {self.expstr} - {self.runRangeStr}", transform=ax1.transAxes, ha='right', fontsize=12)

        plt.text(1, -0.25, f"Plot on {datetime.now().strftime('%Y/%m/%d %H:%M %Z')}", transform=ax1.transAxes, fontsize=6, ha="right")

        filename=f"Lumi{self.what.title()}PerRun_Exp{self.expstr}"
        if self.runs:
            filename+=f"_RunRange{min(self.runs)}-{max(self.runs)}"
        print(f"Creating {filename}.pdf|png files")
        for fileformat in ['pdf','png']:
            plt.savefig(f"{filename}.{fileformat}", bbox_inches="tight")

    def printLumi(self):
        """
        print luminosity for runs and total
        """
        # these are the runs to be selected
        if (self.runs):
            dfRuns=self.df[self.df['run'].isin(self.runs)].copy()
            dfRuns['intLumi'] = dfRuns['lumi'].cumsum()
        else:
            dfRuns=self.df
        # create a reduced dataframe with only runs selected

        cols=['exp','run','lumi','date','intLumi','intLumiDel']
        if (self.verb):
            print('-' * 80)
            print('-' * 30,f"{self.what} Luminosity",'-'*30)
            print('-' * 80)
            print(dfRuns[cols]
                .to_string(index=False,
                    col_space=3,
                    header=['Exp','Run','Lumi [/pb]','date','int Lumi [/fb]','int Lumi Delivered [/fb]'],
                    formatters={
                    "exp" : "{:3d}".format,
                    "run" : "{:5d}".format,
                    "lumi" : lambda x: "{:,.3f}".format(x*1000),
                    "data" : "".format,
                    "intLumi" : "{:,.3f}".format,
                    "intLumiDel" : "{:,.3f}".format,
                    }
                                ))
            print('-' * 61)
        L=dfRuns['lumi'].sum()
        print(f"RECORDED  {self.what}   : L = {L*1E6:8.2f} /nb = {L*1E3:8.2f} /pb = {L:8.3f} /fb = {L/1E3:8.4f} /ab")
        Ld=dfRuns['intLumiDel'].max()
        print(f"DELIVERED {self.what}   : L = {Ld*1E6:8.2f} /nb = {Ld*1E3:8.2f} /pb = {Ld:8.3f} /fb = {Ld/1E3:8.4f} /ab")
        
        pass


if __name__ == '__main__':

    from pandas.plotting import register_matplotlib_converters
    register_matplotlib_converters()

    args = argparser().parse_args()
    
    lumi=Luminosity(args)

    lumi.printLumi()


    if args.plot:

        if 'DAY' in args.plot:
            lumi.plotLumiPerPeriod(1)
        if 'WEEK' in args.plot:
            lumi.plotLumiPerPeriod(2)
        if 'RUN' in args.plot:
            lumi.plotLumiPerRun()
