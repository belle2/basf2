#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import ROOT
import os

def printUsage():
    print('Usage: b2add OUTPUT_FILE INPUT_FILE1 [INPUT_FILE2 ...]')
    print('')
    print(' Like hadd for most .root files,  but if a file only contains persistent.ProcessStatistics')
    print(' (and possibly FileMetaData, EventMetaData), these objects are merged into a single')
    print(' statistics object in the output file, other branches are discarded.')


def is_statistics_file(tfile):
    """return True if and only if tfile only contains ProcessStatistics as non-default branch"""
    eventTree = tfile.Get('tree')
    if eventTree:
        eventList = eventTree.GetListOfBranches()
        if eventList.GetEntries() != 1:
            return False
        if eventList.At(0).GetName() != 'EventMetaData':
            return False

    persistentTree = tfile.Get('persistent')
    if not persistentTree:
        return False
    persistentList = [b.GetName() for b in persistentTree.GetListOfBranches()]
    if persistentList == ['ProcessStatistics'] or sorted(persistentList) == ['FileMetaData', 'ProcessStatistics']:
        return True
    return False


def doMerge(outFile, inFiles):
    out = ROOT.TFile.Open(outFile, 'NEW')
    if not out:
        print('Error: output file "%s" already exists!' % outFile)
        sys.exit(1)

    inTree = ROOT.TChain('persistent')
    for f in inFiles:
        # AddFile() does not perform wildcard expansion (iirc)
        inTree.AddFile(f)
    inTree.GetEntry(0)
    # Clone() needed so we actually own the object
    stats = inTree.ProcessStatistics.Clone()

    # merge statistics from all persistent trees into 'stats'
    numEntries = inTree.GetEntries()
    print("Merging %d files into %s..." % (numEntries, outFile))
    for i in range(1, numEntries):
        inTree.GetEntry(i)
        stats.merge(inTree.ProcessStatistics)
    print("done, saving.")

    #print stats.getStatisticsString()
    out.cd()
    outTree = ROOT.TTree('persistent', 'persistent')
    outTree.Branch('ProcessStatistics', stats)
    outTree.Fill()
    outTree.Write()
    out.Close()


if len(sys.argv) < 3:
    printUsage()
    sys.exit(1)

outFile = sys.argv[1]

if os.path.isfile(outFile):
    os.remove(outFile)

inFiles = sys.argv[2:]

ROOT.gSystem.Load('libdataobjects')

# pick first input file to check what we want to do
filename = inFiles[0]
tfile = ROOT.TFile(filename)
if is_statistics_file(tfile):
    doMerge(outFile, inFiles)
else:
    import subprocess
    ret = subprocess.call(['hadd', outFile] + inFiles)
    sys.exit(ret)
