/**************************************************************************
 * basf2 (Belle II Analysis Software Framework)                           *
 * Author: The Belle II Collaboration                                     *
 *                                                                        *
 * See git log for contributors and copyright holders.                    *
 * This file is licensed under LGPL-3.0, see LICENSE.md.                  *
 **************************************************************************/

// Own header.
#include <analysis/variables/BelleVariables.h>

#include <analysis/dataobjects/Particle.h>
#include <analysis/dataobjects/ParticleList.h>
#include <analysis/variables/AcceptanceVariables.h>
#include <analysis/variables/Variables.h>
#include <analysis/variables/VertexVariables.h>
#include <analysis/variables/ECLVariables.h>
#include <analysis/variables/TrackVariables.h>
#include <analysis/variables/V0DaughterTrackVariables.h>
#include <analysis/variables/VertexVariables.h>

#include <framework/logging/Logger.h>
#include <framework/gearbox/Const.h>

#include <framework/database/DBObjPtr.h>
#include <mdst/dbobjects/BeamSpot.h>
#include <mdst/dataobjects/Track.h>

#include <framework/datastore/StoreArray.h>
#include <b2bii/dataobjects/BelleTrkExtra.h>

#include <TVectorF.h>

#include <limits>

namespace Belle2 {
  namespace Variable {
    bool goodBelleKshort(const Particle* KS)
    {
      // check input
      if (KS->getNDaughters() != 2) {
        B2WARNING("goodBelleKshort is only defined for a particle with two daughters");
        return false;
      }
      const Particle* d0 = KS->getDaughter(0);
      const Particle* d1 = KS->getDaughter(1);
      if ((d0->getCharge() == 0) || (d1->getCharge() == 0)) {
        B2WARNING("goodBelleKshort is only defined for a particle with charged daughters");
        return false;
      }
      if (abs(KS->getPDGCode()) != Const::Kshort.getPDGCode())
        B2WARNING("goodBelleKshort is being applied to a candidate with PDG " << KS->getPDGCode());

      // If goodKs exists, return the value
      if (KS->hasExtraInfo("goodKs")) {
        return bool(KS->getExtraInfo("goodKs"));
      }

      // Belle selection
      double p = particleP(KS);
      double fl = particleDRho(KS);
      double dphi = acos(((particleDX(KS) * particlePx(KS)) + (particleDY(KS) * particlePy(KS))) / (fl * sqrt(particlePx(KS) * particlePx(
                           KS) + particlePy(KS) * particlePy(KS))));
      // particleDRho returns track d0 relative to IP for tracks
      double dr = std::min(abs(particleDRho(d0)), abs(particleDRho(d1)));
      double zdist = v0DaughterZ0Diff(KS);

      bool low = p < 0.5 && abs(zdist) < 0.8 && dr > 0.05 && dphi < 0.3;
      bool mid = p < 1.5 && p > 0.5 && abs(zdist) < 1.8 && dr > 0.03 && dphi < 0.1 && fl > .08;
      bool high = p > 1.5 && abs(zdist) < 2.4 && dr > 0.02 && dphi < 0.03 && fl > .22;

      if (low || mid || high) {
        return true;
      } else
        return false;
    }

    double goodBelleLambda(const Particle* Lambda)
    {
      if (Lambda->getNDaughters() != 2) {
        B2WARNING("goodBelleLambda is only defined for a particle with two daughters");
        return 0.;
      }
      const Particle* d0 = Lambda->getDaughter(0);
      const Particle* d1 = Lambda->getDaughter(1);
      if ((d0->getCharge() == 0) || (d1->getCharge() == 0)) {
        B2WARNING("goodBelleLambda is only defined for a particle with charged daughters");
        return 0.;
      }
      if (abs(Lambda->getPDGCode()) != Const::Lambda.getPDGCode()) {
        B2WARNING("goodBelleLambda is being applied to a candidate with PDG " << Lambda->getPDGCode());
      }

      if (Lambda->hasExtraInfo("goodLambda"))
        return Lambda->getExtraInfo("goodLambda");

      double p = particleP(Lambda);
      double dr = std::min(abs(particleDRho(d0)), abs(particleDRho(d1)));
      double zdist = v0DaughterZ0Diff(Lambda);
      double dphi = acos(cosAngleBetweenMomentumAndVertexVectorInXYPlane(Lambda));
      // Flight distance of Lambda0 in xy plane
      double fl = particleDRho(Lambda);

      // goodBelleLambda == 1 (optimized for proton PID > 0.6)
      bool high1 = p >= 1.5 && abs(zdist) < 12.9 && dr > 0.008 && dphi < 0.09 && fl > 0.22;
      bool mid1 = p >= 0.5 && p < 1.5 && abs(zdist) < 9.8 && dr > 0.01 && dphi < 0.18 && fl > 0.16;
      bool low1 = p < 0.5 && abs(zdist) < 2.4 && dr > 0.027 && dphi < 1.2 && fl > 0.11;

      // goodBelleLambda == 2 (optimized without PID selection)
      bool high2 = p >= 1.5 && abs(zdist) < 7.7 && dr > 0.018 && dphi < 0.07 && fl > 0.35;
      bool mid2 = p >= 0.5 && p < 1.5 && abs(zdist) < 2.1 && dr > 0.033 && dphi < 0.10 && fl > 0.24;
      bool low2 = p < 0.5 && abs(zdist) < 1.9 && dr > 0.059 && dphi < 0.6 && fl > 0.17;

      if (low2 || mid2 || high2) {
        return 2.0;
      } else if (low1 || mid1 || high1) {
        return 1.0;
      } else {
        return 0.0;
      }
    }


    bool isGoodBelleGamma(int region, double energy)
    {
      bool goodGammaRegion1, goodGammaRegion2, goodGammaRegion3;
      goodGammaRegion1 = region == 1 && energy > 0.100;
      goodGammaRegion2 = region == 2 && energy > 0.050;
      goodGammaRegion3 = region == 3 && energy > 0.150;

      return goodGammaRegion1 || goodGammaRegion2 || goodGammaRegion3;
    }

    bool goodBelleGamma(const Particle* particle)
    {
      double energy = eclClusterE(particle);
      int region = eclClusterDetectionRegion(particle);

      return isGoodBelleGamma(region, energy);
    }

    BelleTrkExtra* getBelleTrkExtraInfoFromParticle(Particle const* particle)
    {
      const Track* track = particle->getTrack();
      if (!track) {
        return nullptr;
      }
      auto belleTrkExtra = track->getRelatedTo<BelleTrkExtra>();
      if (!belleTrkExtra) {
        return nullptr;
      }
      return belleTrkExtra;
    }

    double BelleFirstCDCHitX(const Particle* particle)
    {
      auto belleTrkExtra = getBelleTrkExtraInfoFromParticle(particle);
      if (!belleTrkExtra) {
        B2WARNING("Cannot find BelleTrkExtra, did you forget to enable BelleTrkExtra during the conversion?");
        return Const::doubleNaN;
      }
      return belleTrkExtra->getTrackFirstX();
    }

    double BelleFirstCDCHitY(const Particle* particle)
    {
      auto belleTrkExtra = getBelleTrkExtraInfoFromParticle(particle);
      if (!belleTrkExtra) {
        B2WARNING("Cannot find BelleTrkExtra, did you forget to enable BelleTrkExtra during the conversion?");
        return Const::doubleNaN;
      }
      return belleTrkExtra->getTrackFirstY();
    }

    double BelleFirstCDCHitZ(const Particle* particle)
    {
      auto belleTrkExtra = getBelleTrkExtraInfoFromParticle(particle);
      if (!belleTrkExtra) {
        B2WARNING("Cannot find BelleTrkExtra, did you forget to enable BelleTrkExtra during the conversion?");
        return Const::doubleNaN;
      }
      return belleTrkExtra->getTrackFirstZ();
    }

    double BelleLastCDCHitX(const Particle* particle)
    {
      auto belleTrkExtra = getBelleTrkExtraInfoFromParticle(particle);
      if (!belleTrkExtra) {
        B2WARNING("Cannot find BelleTrkExtra, did you forget to enable BelleTrkExtra during the conversion?");
        return Const::doubleNaN;
      }
      return belleTrkExtra->getTrackLastX();
    }

    double BelleLastCDCHitY(const Particle* particle)
    {
      auto belleTrkExtra = getBelleTrkExtraInfoFromParticle(particle);
      if (!belleTrkExtra) {
        B2WARNING("Cannot find BelleTrkExtra, did you forget to enable BelleTrkExtra during the conversion?");
        return Const::doubleNaN;
      }
      return belleTrkExtra->getTrackLastY();
    }

    double BelleLastCDCHitZ(const Particle* particle)
    {
      auto belleTrkExtra = getBelleTrkExtraInfoFromParticle(particle);
      if (!belleTrkExtra) {
        B2WARNING("Cannot find BelleTrkExtra, did you forget to enable BelleTrkExtra during the conversion?");
        return Const::doubleNaN;
      }
      return belleTrkExtra->getTrackLastZ();
    }

    double BellePi0InvariantMassSignificance(const Particle* particle)
    {
      TMatrixFSym covarianceMatrix(Particle::c_DimMomentum);
      for (auto daughter : particle->getDaughters()) {
        covarianceMatrix += daughter->getMomentumErrorMatrix();
      }

      TVectorF jacobian(Particle::c_DimMomentum);
      jacobian[0] = -1.0 * particle->getPx() / particle->getMass();
      jacobian[1] = -1.0 * particle->getPy() / particle->getMass();
      jacobian[2] = -1.0 * particle->getPz() / particle->getMass();
      jacobian[3] = 1.0 * particle->getEnergy() / particle->getMass();

      double massErrSquared = jacobian * (covarianceMatrix * jacobian);

      if (massErrSquared < 0.0)
        return Const::doubleNaN;

      double invMass = particleInvariantMassFromDaughters(particle);
      double nomMass = particle->getPDGMass();

      return (invMass - nomMass) / sqrt(massErrSquared);
    }

    double BelleTof(const Particle* particle)
    {
      auto belleTrkExtra = getBelleTrkExtraInfoFromParticle(particle);
      if (!belleTrkExtra) {
        B2WARNING("Cannot find BelleTrkExtra, did you forget to enable BelleTrkExtra during the conversion?");
        return Const::doubleNaN;
      }
      return belleTrkExtra->getTof();
    }

    double BelleTofQuality(const Particle* particle)
    {
      auto belleTrkExtra = getBelleTrkExtraInfoFromParticle(particle);
      if (!belleTrkExtra) {
        B2WARNING("Cannot find BelleTrkExtra, did you forget to enable BelleTrkExtra during the conversion?");
        return Const::doubleNaN;
      }
      return belleTrkExtra->getTofQuality();
    }

    double BelleTofSigma(const Particle* particle)
    {
      auto belleTrkExtra = getBelleTrkExtraInfoFromParticle(particle);
      if (!belleTrkExtra) {
        B2WARNING("Cannot find BelleTrkExtra, did you forget to enable BelleTrkExtra during the conversion?");
        return Const::doubleNaN;
      }
      return belleTrkExtra->getTofSigma();
    }

    double BellePathLength(const Particle* particle)
    {
      auto belleTrkExtra = getBelleTrkExtraInfoFromParticle(particle);
      if (!belleTrkExtra) {
        B2WARNING("Cannot find BelleTrkExtra, did you forget to enable BelleTrkExtra during the conversion?");
        return Const::doubleNaN;
      }
      return belleTrkExtra->getPathLength();
    }

    double BelleTofMass(const Particle* particle)
    {
      auto belleTrkExtra = getBelleTrkExtraInfoFromParticle(particle);
      if (!belleTrkExtra) {
        B2WARNING("Cannot find BelleTrkExtra, did you forget to enable BelleTrkExtra during the conversion?");
        return Const::doubleNaN;
      }
      double time = belleTrkExtra->getTof();
      double length = belleTrkExtra->getPathLength();
      double p = particle->getP(); //3-momentum
      double tofbeta = length / time / Belle2::Const::speedOfLight;
      double tofmass = p * sqrt(1. / (tofbeta * tofbeta) - 1.); //(GeV)

      return tofmass;
    }

    double BelledEdx(const Particle* particle)
    {
      auto belleTrkExtra = getBelleTrkExtraInfoFromParticle(particle);
      if (!belleTrkExtra) {
        B2WARNING("Cannot find BelleTrkExtra, did you forget to enable BelleTrkExtra during the conversion?");
        return Const::doubleNaN;
      }
      return belleTrkExtra->getdEdx();
    }

    double BelledEdxQuality(const Particle* particle)
    {
      auto belleTrkExtra = getBelleTrkExtraInfoFromParticle(particle);
      if (!belleTrkExtra) {
        B2WARNING("Cannot find BelleTrkExtra, did you forget to enable BelleTrkExtra during the conversion?");
        return Const::doubleNaN;
      }
      return belleTrkExtra->getdEdxQuality();
    }

    double BelleACCnPe(const Particle* particle)
    {
      auto belleTrkExtra = getBelleTrkExtraInfoFromParticle(particle);
      if (!belleTrkExtra) {
        B2WARNING("Cannot find BelleTrkExtra, did you forget to enable BelleTrkExtra during the conversion?");
        return Const::doubleNaN;
      }
      return belleTrkExtra->getACCPe();
    }

    double BelleACCQuality(const Particle* particle)
    {
      auto belleTrkExtra = getBelleTrkExtraInfoFromParticle(particle);
      if (!belleTrkExtra) {
        B2WARNING("Cannot find BelleTrkExtra, did you forget to enable BelleTrkExtra during the conversion?");
        return Const::doubleNaN;
      }
      return belleTrkExtra->getACCQuality();
    }

    double Pi0_Prob(double mass, double energy, int eclRegion)
    {
      static const double massMin = 0.034976;
      static const double massMax = 0.234976;
      static const double logEnergyMin = 1.3;
      static const double logEnergyMax = 3.7;
      static const int p_bins = 24;
      static const int m_bins = 50;

      double logp = log(1000 * energy) / log(10.);
      if ((logp < logEnergyMin) || (logp > logEnergyMax)) return 0;

      double drow = p_bins * (logp - logEnergyMin) / (logEnergyMax - logEnergyMin);
      int row = int(drow);
      double dcol = m_bins * (mass - massMin) / (massMax - massMin);
      int col = int(dcol);
      if ((row < 0) || (row >= p_bins) || (col < 0) || (col >= m_bins)) {
        B2ERROR("Fault in getting the coordinates of pi0 probability");
        return Const::doubleNaN;
      }
      int pos = m_bins * row + col ;
      if (pos > m_bins * p_bins) {
        B2ERROR("Fault in getting the coordinates of pi0 probability");
        return Const::doubleNaN;
      }

      if (eclRegion == 1) {
        const double pi0prob_f[1200] = {
          0.0244509, 0.0362761, 0.0346097, 0.0292537, 0.0310168, 0.0254725, 0.0254692, 0.024077, 0.0213122, 0.0181336, 0.0193589, 0.020414, 0.0170135, 0.0166382, 0.0145507, 0.0158386, 0.0143467, 0.0141837, 0.0129926, 0.0131949, 0.0132738, 0.0132921, 0.0151826, 0.0180766, 0.0247922, 0.024706, 0.0158779, 0.0113042, 0.00829772, 0.00654314, 0.00469565, 0.00322061, 0.0025668, 0.00223667, 0.0019328, 0.00166101, 0.00216003, 0.00121776, 0.00152058, 0.00096828, 0.00079784, 0.00080748, 0.00107272, 0.00087463, 0.00063074, 0.00068828, 0.00056447, 0.00052031, 0.00043237, 0.00042788,
          0.0464904, 0.0443896, 0.0480674, 0.0494056, 0.0523766, 0.0435872, 0.0413808, 0.0389658, 0.0392287, 0.0387828, 0.0323791, 0.0294407, 0.03, 0.0296234, 0.0272617, 0.0250839, 0.0242326, 0.0257749, 0.0236393, 0.0255102, 0.0237209, 0.0244396, 0.029366, 0.0372714, 0.0576348, 0.0543204, 0.0358469, 0.0242944, 0.0167917, 0.0111616, 0.0103669, 0.00815868, 0.00598234, 0.00422872, 0.00494525, 0.00344872, 0.00290722, 0.00281917, 0.00236654, 0.00243984, 0.00193105, 0.00170306, 0.00153543, 0.00158298, 0.0009754, 0.00125558, 0.00103523, 0.00091521, 0.00101984, 0.00098971,
          0.0562613, 0.0868014, 0.0713632, 0.0714286, 0.0726092, 0.0756224, 0.0661258, 0.0651942, 0.0590651, 0.0622418, 0.05796, 0.0524775, 0.0520017, 0.0535681, 0.0521708, 0.0537127, 0.0495776, 0.0449875, 0.0492375, 0.0470861, 0.053373, 0.0509644, 0.0666667, 0.0843506, 0.118536, 0.119017, 0.0840437, 0.0500697, 0.0371243, 0.0238551, 0.0221259, 0.0136227, 0.0122228, 0.012035, 0.0100298, 0.00845751, 0.00835719, 0.00600555, 0.00518437, 0.00426743, 0.00483994, 0.0036523, 0.00305587, 0.0034005, 0.00282347, 0.0026116, 0.00147275, 0.00239501, 0.00191734, 0.0020466,
          0.109434, 0.108586, 0.0683453, 0.0906631, 0.0695297, 0.0915842, 0.0818966, 0.0902208, 0.0831899, 0.0943785, 0.0866788, 0.0803534, 0.084855, 0.0756415, 0.0816262, 0.082963, 0.0797378, 0.0794753, 0.0794751, 0.0876312, 0.0887892, 0.0974369, 0.121158, 0.16240101, 0.23024499, 0.23138, 0.156642, 0.101184, 0.0635232, 0.0508977, 0.039847, 0.0305725, 0.0254159, 0.0217679, 0.0191423, 0.0166957, 0.0140924, 0.0137696, 0.0151858, 0.010728, 0.00996296, 0.00657494, 0.00681411, 0.00581463, 0.00644864, 0.00699064, 0.0049041, 0.00494737, 0.00362394, 0.00572519,
          0.109756, 0.148936, 0.154386, 0.12987, 0.12752999, 0.106825, 0.0975309, 0.112112, 0.11215, 0.143969, 0.101574, 0.114194, 0.116176, 0.11153, 0.115385, 0.125227, 0.116999, 0.118944, 0.118762, 0.12729201, 0.136471, 0.160475, 0.200287, 0.28300899, 0.36692199, 0.37515101, 0.27443799, 0.189642, 0.13123401, 0.0896516, 0.0675782, 0.0618999, 0.0478655, 0.0385585, 0.0397614, 0.0322351, 0.0284773, 0.0238739, 0.0195122, 0.019243, 0.0148494, 0.0183639, 0.0154959, 0.0158165, 0.0116783, 0.0127487, 0.0103578, 0.00756076, 0.0100179, 0.00919215,
          0.190476, 0.14925399, 0.18705, 0.17142899, 0.17028999, 0.16388901, 0.145455, 0.161121, 0.13687199, 0.15092, 0.130529, 0.137255, 0.12771501, 0.140416, 0.132597, 0.156463, 0.156288, 0.14355899, 0.143314, 0.16115899, 0.167667, 0.209691, 0.27395201, 0.392573, 0.497491, 0.501737, 0.38148001, 0.251647, 0.18618201, 0.13470601, 0.111192, 0.0895252, 0.0793708, 0.0814153, 0.0650888, 0.0605756, 0.0507174, 0.0444592, 0.0433387, 0.0430485, 0.031962, 0.0277017, 0.0284708, 0.0265197, 0.0215084, 0.0177803, 0.0155989, 0.0169444, 0.0145907, 0.0142896,
          0.20454501, 0.177489, 0.142857, 0.201754, 0.146465, 0.21186399, 0.20979001, 0.176966, 0.19767401, 0.17887899, 0.166667, 0.19457, 0.185039, 0.170524, 0.184239, 0.178468, 0.18361799, 0.180921, 0.204403, 0.205018, 0.25221199, 0.28260899, 0.36583099, 0.49134299, 0.62812299, 0.61925298, 0.49236199, 0.317204, 0.204356, 0.15492301, 0.117848, 0.11165, 0.116705, 0.0992647, 0.0915126, 0.0714286, 0.0768551, 0.0656652, 0.0701754, 0.0650642, 0.0574338, 0.057051, 0.0471735, 0.0456, 0.0416025, 0.0398282, 0.0395697, 0.0259048, 0.0271041, 0.0283357,
          0.235294, 0.121053, 0., 0.125, 0.18333299, 0.201389, 0.203187, 0.199219, 0.210191, 0.231738, 0.2, 0.223709, 0.21223, 0.21256, 0.238472, 0.217026, 0.204494, 0.242888, 0.219512, 0.26012599, 0.30763, 0.368, 0.46819201, 0.62145603, 0.71915299, 0.71812099, 0.580468, 0.375815, 0.22499999, 0.18007401, 0.139458, 0.116974, 0.105516, 0.100481, 0.0799536, 0.0796657, 0.0742602, 0.0632563, 0.0607966, 0.0530462, 0.0520619, 0.0504748, 0.0421, 0.0362463, 0.0430416, 0.0439716, 0.0358786, 0.0326493, 0.0329369, 0.0290621,
          0.2, 0.217949, 0.0726257, 0.1, 0.254237, 0.240741, 0.26506001, 0.25543499, 0.27338099, 0.25328901, 0.283784, 0.279412, 0.26930699, 0.260355, 0.269492, 0.266462, 0.23959801, 0.26623401, 0.31038499, 0.329584, 0.382498, 0.44606599, 0.57254201, 0.70146501, 0.80605602, 0.79911298, 0.64914799, 0.47757599, 0.28255901, 0.167889, 0.136508, 0.116654, 0.0894118, 0.0943953, 0.0807407, 0.0688666, 0.0573204, 0.0558583, 0.0455782, 0.0517464, 0.0364093, 0.0332922, 0.0425532, 0.0401438, 0.0291886, 0.0230415, 0.023823, 0.0305085, 0.0205327, 0.0145867,
          0.40000001, 0.0833333, 0.0649351, 0.19852901, 0.220544, 0.156863, 0.21978, 0.31578901, 0.28921601, 0.27835101, 0.279412, 0.273458, 0.27918801, 0.304721, 0.298969, 0.240602, 0.331126, 0.31864899, 0.353448, 0.36245099, 0.42442399, 0.53435099, 0.66571403, 0.76925802, 0.83198297, 0.81802702, 0.71067297, 0.472763, 0.282664, 0.19498099, 0.15598901, 0.134078, 0.121403, 0.0898305, 0.0897651, 0.0723077, 0.0641447, 0.0500363, 0.04941, 0.033452, 0.0302817, 0.0290256, 0.0236646, 0.0186976, 0.0149533, 0.0133172, 0.0159803, 0.0105448, 0.0129641, 0.00790068,
          0., 0., 0.0909091, 0.0967742, 0.149533, 0.27414301, 0.27083299, 0.240741, 0.27026999, 0.31521699, 0.33471099, 0.33871001, 0.31907901, 0.348649, 0.38118801, 0.374419, 0.38418099, 0.409091, 0.45640999, 0.45043701, 0.53615999, 0.62892503, 0.73159897, 0.82664698, 0.88376498, 0.875853, 0.78412402, 0.56298, 0.36467901, 0.24265601, 0.200258, 0.159953, 0.138705, 0.124839, 0.075, 0.0868056, 0.0702381, 0.0649215, 0.0446137, 0.0360551, 0.0330843, 0.0334029, 0.028169, 0.0094697, 0.0139276, 0.0140845, 0.00677966, 0.00336984, 0.00743802, 0.00413907,
          0., 0., 0., 0., 0.138889, 0.237624, 0.35111099, 0.27272701, 0.384615, 0.285714, 0.33823499, 0.37735799, 0.47465399, 0.43873501, 0.44368601, 0.365931, 0.442049, 0.493213, 0.5, 0.59214997, 0.61653101, 0.70791101, 0.81835401, 0.874273, 0.92071199, 0.91443801, 0.84870899, 0.66191798, 0.44629401, 0.295416, 0.24131601, 0.184358, 0.18016499, 0.106618, 0.130288, 0.120594, 0.0661157, 0.0603015, 0.050571, 0.0342262, 0.029321, 0.0188679, 0.023968, 0.0097493, 0.00815217, 0.00645995, 0.00500626, 0.00762389, 0., 0.,
          0., 0., 0., 0., 0., 0.375, 0.42553201, 0.35526299, 0.35135099, 0.235294, 0.30188701, 0.320988, 0.32478601, 0.41818199, 0.46846801, 0.56310701, 0.52464801, 0.58430201, 0.646617, 0.67382801, 0.757774, 0.80602002, 0.863392, 0.923105, 0.94608998, 0.93565202, 0.88424098, 0.70191199, 0.50290102, 0.32045501, 0.29177099, 0.21359199, 0.176991, 0.15601, 0.12973, 0.0915663, 0.0724638, 0.0531646, 0.0518018, 0.0410367, 0.0218818, 0.0347648, 0.00996016, 0.0101833, 0.00750469, 0.00559701, 0.00707965, 0.0125448, 0.00182815, 0.00325733,
          0., 0., 0., 0., 0., 0.69381398, 0.285714, 0.39393899, 0.28037399, 0.277567, 0.305361, 0.40625, 0.45282999, 0.60000002, 0.50847501, 0.56164402, 0.60869598, 0.630252, 0.68597603, 0.70074803, 0.78918898, 0.86698902, 0.917476, 0.94910401, 0.95629603, 0.95035499, 0.91121501, 0.77881998, 0.56115103, 0.40065101, 0.35714301, 0.29670301, 0.2, 0.18493199, 0.164234, 0.123239, 0.105455, 0.0838926, 0.0453074, 0.0257235, 0.022508, 0.0167131, 0.00940439, 0.0123077, 0.00294985, 0.00325733, 0.00558659, 0., 0.00265957, 0.,
          0., 0., 0., 0., 0., 0., 0., 0.1875, 0.338983, 0.15748, 0.40740699, 0.432432, 0.42553201, 0.63636398, 0.63302702, 0.632653, 0.72432399, 0.67510599, 0.76870698, 0.75964397, 0.85490203, 0.87303698, 0.93211699, 0.96070999, 0.96605802, 0.961254, 0.91775697, 0.80498499, 0.64736801, 0.437751, 0.37226301, 0.36199099, 0.26388901, 0.23636401, 0.157676, 0.168033, 0.12843999, 0.111607, 0.11336, 0.101382, 0.0344828, 0.0277778, 0.0158103, 0.0100334, 0.0111524, 0.00363636, 0.0174825, 0.00664452, 0.00706714, 0.013289,
          0., 0., 0., 0., 0., 0., 0., 0.33333299, 0.133333, 0.22, 0.273684, 0.374194, 0.43434301, 0.5, 0.59259301, 0.72000003, 0.679012, 0.772277, 0.82051301, 0.84134603, 0.87172002, 0.89964199, 0.94762802, 0.96979702, 0.97603601, 0.967924, 0.94863999, 0.84672898, 0.72027999, 0.57070702, 0.45911899, 0.44642901, 0.329032, 0.220238, 0.22784799, 0.135484, 0.15894, 0.12766001, 0.10559, 0.0604396, 0.0261438, 0.0529412, 0.0357143, 0.0188679, 0.0223464, 0.0204082, 0.00462963, 0.0106383, 0.010989, 0.00934579,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.1, 0.19354799, 0.32653099, 0.466667, 0.71724099, 0.68316799, 0.75799102, 0.86666697, 0.92156899, 0.91176498, 0.89772701, 0.95327097, 0.96533799, 0.96966702, 0.98138303, 0.973306, 0.96420598, 0.892694, 0.76086998, 0.65925902, 0.466667, 0.402062, 0.47826099, 0.243902, 0.36956501, 0.2, 0.182796, 0.129032, 0.13253, 0.0571429, 0.114943, 0.0549451, 0.011236, 0.00980392, 0.00892857, 0., 0.00884956, 0.00884956, 0.00862069, 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.78483403, 0.69999999, 0.75, 0.74712598, 0.91471201, 0.93164599, 0.95833302, 0.94, 0.95999998, 0.96170199, 0.98746902, 0.98745501, 0.97394103, 0.96789002, 0.91128999, 0.815534, 0.71875, 0.56818199, 0.51111102, 0.44898, 0.25, 0.214286, 0.29411799, 0.30434799, 0.142857, 0.0980392, 0.121951, 0.0208333, 0.0689655, 0.0892857, 0.0263158, 0.031746, 0.0363636, 0., 0.0126582, 0.028169, 0.0147059,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.69381398, 0.80401802, 0.88062602, 0.85640299, 0.91362101, 0.92736399, 1., 0.97959203, 1., 0.99363101, 0.99374998, 0.96774203, 0.97530901, 0.91428602, 0.68932003, 0.57692301, 0.57142901, 0.410072, 0.32852, 0.22539701, 0.25581399, 0.2, 0.141304, 0.113573, 0.0666667, 0.0824176, 0.047619, 0.0714286, 0.0653153, 0.0512821, 0., 0.025641, 0., 0.027027, 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.59175098, 0.68377298, 0.82322299, 0.883753, 0.88816601, 0.92877299, 0.94255, 1., 1., 1., 0.93964201, 0.927463, 0.74359, 0.63716799, 0.42201799, 0.45205501, 0.35820901, 0.296296, 0.28712901, 0.113636, 0.216216, 0.0689655, 0.0686275, 0.0955882, 0.0315789, 0.0301205, 0.0319635, 0.026738, 0.0227273, 0.0442478, 0.0408922, 0.00724638, 0.00495049,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.64644599, 0.75, 0.85255802, 0.89216697, 0.91229397, 0.891855, 0.87231499, 0.89405, 0.840294, 0.821594, 0.533333, 0.33333299, 0.72977501, 0.5, 0.444444, 0.1875, 0.16, 0.105263, 0.142857, 0.0454545, 0.04, 0.0217391, 0., 0.015625, 0.091954, 0.0344828, 0.030303, 0.030303, 0.0116279, 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.5, 0.77357298, 0.77357298, 0.74769598, 0., 0., 0., 0.69381398, 0.69381398, 0.29289499, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.0769231, 0.0526316, 0.0833333, 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.
        };
        return pi0prob_f[pos];
      } else if (eclRegion == 2) {
        const double pi0prob_c[1200] = {
          0.0224525, 0.026287, 0.0288078, 0.0260844, 0.0266863, 0.0248778, 0.0237975, 0.0217863, 0.0200691, 0.01906, 0.0183393, 0.0168634, 0.014863, 0.01487, 0.0141168, 0.0136424, 0.0140901, 0.0140327, 0.0153415, 0.0166704, 0.020016, 0.0276004, 0.0412174, 0.0707691, 0.112146, 0.117802, 0.0805802, 0.0540846, 0.0338555, 0.0220905, 0.0155545, 0.0107377, 0.0074794, 0.00581165, 0.00438085, 0.00375792, 0.00313861, 0.0023389, 0.00184602, 0.00164917, 0.00163541, 0.00128006, 0.00119488, 0.00119135, 0.00105695, 0.00100667, 0.00092967, 0.00094956, 0.00084635, 0.00097193,
          0.0350385, 0.0352776, 0.0421838, 0.0431129, 0.0445578, 0.0451169, 0.0416138, 0.0431515, 0.038832, 0.0360997, 0.0339845, 0.0317707, 0.0311242, 0.0301457, 0.030177, 0.0292872, 0.0284292, 0.0311761, 0.0319336, 0.0366094, 0.0444541, 0.060337, 0.0925242, 0.159043, 0.239944, 0.248859, 0.184916, 0.117626, 0.0743408, 0.0484334, 0.0298713, 0.0201074, 0.0135511, 0.0106919, 0.00800198, 0.00677264, 0.00615943, 0.00430967, 0.00405874, 0.00332488, 0.00283829, 0.00224533, 0.00185162, 0.00215061, 0.00187102, 0.00195698, 0.00162957, 0.00188536, 0.00164747, 0.00156681,
          0.0414057, 0.0487136, 0.0543901, 0.0670297, 0.0666147, 0.0690266, 0.068858, 0.0708312, 0.0658522, 0.0604447, 0.0579958, 0.0572777, 0.0548212, 0.0542237, 0.0538644, 0.0529563, 0.054132, 0.0574131, 0.063668, 0.0742925, 0.0922163, 0.12503199, 0.189133, 0.30708399, 0.420995, 0.443811, 0.347404, 0.22397301, 0.14285199, 0.0835151, 0.0524014, 0.033208, 0.0245437, 0.0191245, 0.0139038, 0.010928, 0.00971734, 0.00726838, 0.00683433, 0.00456591, 0.00468135, 0.00402068, 0.0039852, 0.00309298, 0.00338649, 0.00330333, 0.00271956, 0.00319657, 0.00239961, 0.00268081,
          0.0376, 0.0647482, 0.0630631, 0.0702794, 0.0789099, 0.0852401, 0.091134, 0.0898286, 0.0918117, 0.0939746, 0.0879516, 0.0854437, 0.0845044, 0.0839124, 0.0839438, 0.086785, 0.0924666, 0.0962952, 0.107999, 0.123035, 0.150168, 0.208721, 0.31549501, 0.47161299, 0.60223198, 0.61842602, 0.518987, 0.35219201, 0.215166, 0.122654, 0.0751318, 0.0483924, 0.0311516, 0.0258989, 0.0211563, 0.0152966, 0.012347, 0.0108662, 0.0092851, 0.00801544, 0.00737295, 0.00544006, 0.00543556, 0.0052196, 0.00362403, 0.00370201, 0.00364232, 0.00294441, 0.0032456, 0.00317047,
          0.0412147, 0.055814, 0.0670795, 0.0626229, 0.0834818, 0.0967065, 0.105427, 0.121549, 0.121031, 0.122981, 0.119202, 0.117308, 0.112564, 0.108276, 0.121712, 0.122685, 0.13090999, 0.144811, 0.156948, 0.18528301, 0.240913, 0.32364199, 0.44336301, 0.61790299, 0.72629201, 0.73797899, 0.64422399, 0.461384, 0.27967301, 0.156326, 0.0875867, 0.0552071, 0.0393757, 0.0317382, 0.0257297, 0.0229813, 0.0205595, 0.0178321, 0.011604, 0.0114197, 0.00828342, 0.00610516, 0.00598027, 0.00611658, 0.00434049, 0.00440712, 0.00427551, 0.0046932, 0.00387222, 0.0041612,
          0.0769231, 0.0625, 0.057971, 0.0810185, 0.0802079, 0.0930754, 0.0955607, 0.113754, 0.12096, 0.132082, 0.134847, 0.136462, 0.14178699, 0.13836201, 0.139644, 0.152676, 0.15851501, 0.173299, 0.203548, 0.240169, 0.30856201, 0.403734, 0.54842299, 0.70550501, 0.79997599, 0.80609697, 0.72023797, 0.53922999, 0.31948599, 0.168273, 0.0945286, 0.0630864, 0.0481039, 0.0384275, 0.0295197, 0.0296539, 0.0237764, 0.02003, 0.0151316, 0.0125473, 0.0089941, 0.00841108, 0.00628063, 0.00493793, 0.00462396, 0.00544465, 0.00293294, 0.00366348, 0.00355504, 0.00285099,
          0.0681818, 0.0479452, 0.0845411, 0.0904139, 0.0939511, 0.0848013, 0.112242, 0.120106, 0.134965, 0.147562, 0.157011, 0.16336299, 0.172801, 0.17799699, 0.185508, 0.192615, 0.19746301, 0.222657, 0.25787199, 0.307327, 0.393893, 0.499809, 0.65224099, 0.786066, 0.85313499, 0.85639298, 0.77995598, 0.60575402, 0.362744, 0.189741, 0.111041, 0.0765737, 0.0642876, 0.0485834, 0.042861, 0.0344647, 0.0326318, 0.0219218, 0.0199121, 0.0145655, 0.0124899, 0.00906466, 0.00636537, 0.00589239, 0.00462499, 0.00452796, 0.0046571, 0.00357569, 0.00360665, 0.00344432,
          0.0315457, 0., 0.0529412, 0.0735294, 0.0921376, 0.0974967, 0.0992939, 0.113283, 0.14435101, 0.147824, 0.15815, 0.17278901, 0.182033, 0.193505, 0.203832, 0.220137, 0.223006, 0.25150001, 0.291944, 0.35209, 0.439614, 0.56625199, 0.71886498, 0.83721697, 0.88648599, 0.88292903, 0.818573, 0.64304399, 0.396938, 0.21391, 0.12723801, 0.097787, 0.074475, 0.061054, 0.0571013, 0.0518753, 0.038671, 0.0353401, 0.0285296, 0.0225155, 0.0158965, 0.0130932, 0.00949158, 0.00811191, 0.00776932, 0.00501607, 0.00453637, 0.00260836, 0.00349108, 0.00234795,
          0., 0.0310881, 0.0666667, 0.0816327, 0.0867347, 0.108723, 0.110951, 0.116539, 0.127441, 0.156983, 0.16468599, 0.18585201, 0.196748, 0.21368299, 0.21633901, 0.244045, 0.25349599, 0.279719, 0.31937701, 0.380072, 0.49027401, 0.61886698, 0.76559001, 0.865821, 0.90682697, 0.90192699, 0.84674001, 0.67874098, 0.42871299, 0.233941, 0.15508699, 0.121491, 0.105342, 0.0917888, 0.0824995, 0.0691409, 0.0558266, 0.0534358, 0.0461835, 0.03485, 0.0271744, 0.0228548, 0.0175817, 0.0146165, 0.0117446, 0.00970179, 0.00872531, 0.0081922, 0.00594261, 0.0041361,
          0., 0.04, 0.066879, 0.12766001, 0.0746269, 0.0994475, 0.104455, 0.12849601, 0.147108, 0.158712, 0.16049001, 0.19695, 0.207505, 0.22363099, 0.243398, 0.25968099, 0.27003101, 0.311593, 0.349415, 0.41701701, 0.53545499, 0.67456299, 0.80905497, 0.89165998, 0.922629, 0.91860199, 0.86825198, 0.72280002, 0.47087401, 0.268828, 0.192738, 0.152319, 0.13342801, 0.121933, 0.113048, 0.0929171, 0.0872802, 0.0715789, 0.0600999, 0.0534755, 0.0452525, 0.0369172, 0.029032, 0.0235878, 0.0168038, 0.0145573, 0.0107173, 0.00967118, 0.00737243, 0.00594452,
          0., 0., 0.0983607, 0.0757576, 0.0526316, 0.121951, 0.122605, 0.128472, 0.165721, 0.17382599, 0.185287, 0.201548, 0.227414, 0.25020701, 0.27609399, 0.29061899, 0.312565, 0.35372099, 0.394476, 0.47101399, 0.59799099, 0.73098999, 0.85097498, 0.91637301, 0.94080597, 0.93725401, 0.89586699, 0.77843899, 0.54535103, 0.34125099, 0.24928699, 0.208002, 0.19059201, 0.16532899, 0.15298399, 0.137942, 0.116557, 0.105613, 0.0909091, 0.0769469, 0.0616035, 0.0524072, 0.040917, 0.0323965, 0.0266089, 0.0213155, 0.0144322, 0.0113238, 0.00898964, 0.00792158,
          0., 0., 0., 0.0634921, 0.151786, 0., 0.121951, 0.146497, 0.19354799, 0.19732399, 0.21135899, 0.224502, 0.249782, 0.27922899, 0.31171501, 0.328361, 0.37318, 0.421839, 0.46390501, 0.550807, 0.66553801, 0.797961, 0.89168799, 0.94046003, 0.955706, 0.95208597, 0.92408502, 0.83514398, 0.65096903, 0.43957299, 0.32740101, 0.27608201, 0.246788, 0.225282, 0.203687, 0.19088399, 0.16270401, 0.14757, 0.122558, 0.109499, 0.0864535, 0.069321, 0.0505684, 0.0414194, 0.0315615, 0.0192283, 0.0179303, 0.0118027, 0.00888833, 0.00817135,
          0., 0., 0., 0.25, 0.0769231, 0.153846, 0.144357, 0.121212, 0.190476, 0.16822401, 0.215938, 0.266094, 0.25794399, 0.30769199, 0.332367, 0.372179, 0.418156, 0.47025299, 0.53782803, 0.62352598, 0.74075001, 0.84878498, 0.92255402, 0.95590401, 0.96672302, 0.965397, 0.94151002, 0.87763, 0.72443002, 0.52542597, 0.40610501, 0.35967499, 0.31008899, 0.292676, 0.25, 0.23654599, 0.21411, 0.19209699, 0.157564, 0.136159, 0.106544, 0.0825823, 0.0655604, 0.0439815, 0.0344311, 0.0219555, 0.0164148, 0.00970874, 0.00659694, 0.00647403,
          0., 0., 0., 0., 0.153846, 0.235294, 0.15625, 0.190083, 0.20388301, 0.31707299, 0.318584, 0.31343299, 0.269795, 0.32807001, 0.38613901, 0.423237, 0.50090098, 0.55993402, 0.60435599, 0.69685298, 0.78660798, 0.884947, 0.94304001, 0.96579897, 0.97405601, 0.972646, 0.95552498, 0.90868199, 0.795461, 0.62252402, 0.482402, 0.41026101, 0.388244, 0.34811601, 0.32397199, 0.29466, 0.25523701, 0.212992, 0.184531, 0.14677601, 0.116474, 0.0914454, 0.0557315, 0.0445793, 0.033617, 0.0205901, 0.015812, 0.0139033, 0.00585529, 0.00530504,
          0., 0., 0., 0., 0.69381398, 0.54673302, 0.115385, 0.143885, 0.25925899, 0.19354799, 0.30769199, 0.281818, 0.31754899, 0.390625, 0.44864899, 0.51111102, 0.56866801, 0.62676799, 0.65424401, 0.751885, 0.83030701, 0.89802003, 0.94706202, 0.96965897, 0.97826201, 0.97598201, 0.96198499, 0.92812097, 0.83739799, 0.706559, 0.579768, 0.49446601, 0.46410301, 0.42873999, 0.38401401, 0.355434, 0.30749899, 0.256724, 0.22503901, 0.179602, 0.13754401, 0.104241, 0.0840848, 0.04857, 0.0365036, 0.0341051, 0.0186586, 0.0145751, 0.00933432, 0.00813397,
          0., 0., 0., 0., 0.29289499, 0.33333299, 0.0952381, 0.190476, 0.16806699, 0.235507, 0.242975, 0.35135099, 0.261538, 0.38759699, 0.54736799, 0.57554001, 0.64208198, 0.70151299, 0.73491597, 0.79273403, 0.869183, 0.92236, 0.95877999, 0.97600102, 0.981592, 0.98176497, 0.97171497, 0.94673097, 0.880799, 0.771438, 0.652174, 0.55620199, 0.52385098, 0.495426, 0.443948, 0.38885501, 0.35681301, 0.288066, 0.251385, 0.196853, 0.149161, 0.117366, 0.0853746, 0.069403, 0.0556369, 0.0341394, 0.0277778, 0.0215285, 0.0147323, 0.0133756,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0.0869565, 0.220588, 0.22818799, 0.34915301, 0.33333299, 0.60000002, 0.61666697, 0.70526302, 0.78142101, 0.80479503, 0.81428599, 0.88824701, 0.92929697, 0.97035098, 0.98173398, 0.98432201, 0.98391402, 0.97809798, 0.95619798, 0.90463102, 0.81980801, 0.71008003, 0.62937099, 0.569736, 0.54225701, 0.466553, 0.43033001, 0.37564901, 0.32312101, 0.26372999, 0.220588, 0.17525101, 0.125232, 0.0940959, 0.0859232, 0.0585009, 0.0454277, 0.032014, 0.0341377, 0.0178465, 0.019529,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.222222, 0.31034499, 0.47368401, 0.524194, 0.64978898, 0.72668099, 0.72413802, 0.81999999, 0.83760703, 0.92653102, 0.95551902, 0.96881002, 0.98056298, 0.986871, 0.98583698, 0.981879, 0.96521199, 0.91923499, 0.85127699, 0.738594, 0.66854697, 0.60555601, 0.55854601, 0.51319599, 0.45503399, 0.39782, 0.32673299, 0.29420301, 0.195592, 0.151088, 0.129278, 0.104693, 0.0630303, 0.0651907, 0.0588901, 0.0454545, 0.0282427, 0.0232313, 0.0196687,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.5, 0.64705902, 0.69565201, 0.71844703, 0.81707299, 0.904854, 0.92000002, 0.95999998, 0.98340201, 0.98638397, 0.989465, 0.99295801, 0.98463899, 0.96400499, 0.90208298, 0.87837797, 0.77157402, 0.71179003, 0.67010301, 0.59903401, 0.55080199, 0.50917399, 0.41935501, 0.34418601, 0.28813601, 0.239669, 0.119835, 0.125, 0.145329, 0.114583, 0.0931677, 0.0776119, 0.0449102, 0.0326975, 0.039801, 0.0203562,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.78483403, 0.835796, 0.89450699, 0.924007, 0.95790601, 1., 1., 1., 1., 0.98984802, 0.978495, 0.88888901, 0.87234002, 0.80645198, 0.80000001, 0.693878, 0.66000003, 0.53846198, 0.4375, 0.42857099, 0.470588, 0.25581399, 0.166667, 0.216667, 0.117647, 0.12987, 0.0568182, 0.0595238, 0.125, 0.0444444, 0.040404, 0.0416667, 0.0393701,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.29289499, 0.64644599, 0.86869299, 0.928204, 0.939771, 0.95130599, 0.96376699, 0.95698297, 0.96032101, 0.93900901, 0.93352002, 0.78181797, 0.70676702, 0.707865, 0.64399999, 0.66964298, 0.54028398, 0.35643601, 0.43434301, 0.26905799, 0.29411799, 0.177215, 0.14186899, 0.117117, 0.0874317, 0.0952381, 0.0519751, 0.0466102, 0.0294118, 0.08, 0.0344828,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.5, 0.71132499, 0.75, 0.81101799, 0.81523699, 0.831532, 0.801395, 0.83140099, 0.82751799, 0.63636398, 0.625, 0.87523502, 0.75999999, 0.60000002, 0.47368401, 0.25, 0.384615, 0.285714, 0.40540501, 0.16129, 0.1, 0.106383, 0.0394737, 0.0263158, 0., 0.0243902, 0.0258621, 0.0447761,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.111111, 0.69381398, 0.69381398, 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.
        };
        return pi0prob_c[pos];
      } else if (eclRegion == 3) {
        const double pi0prob_b[1200] = {
          0.0259831, 0.018208, 0.0171408, 0.0200837, 0.0170068, 0.0162264, 0.0125928, 0.015294, 0.0134972, 0.0137427, 0.00997805, 0.0087196, 0.00969728, 0.00873571, 0.00609663, 0.00635863, 0.00602686, 0.00683674, 0.0056096, 0.00555015, 0.00603898, 0.00655205, 0.00912115, 0.0106373, 0.01426, 0.0150569, 0.0115562, 0.00870111, 0.00589239, 0.00423595, 0.00345306, 0.00212548, 0.00140682, 0.0007988, 0.00117198, 0.00107219, 0.0006391, 0.00063884, 0.0004446, 0.00023107, 0.00038941, 0.0002715, 0.00020758, 0.00038027, 0.00024614, 0.00016494, 0.00020599, 0.00022096, 0.00021027, 0.00026679,
          0.0350263, 0.0384615, 0.0405101, 0.0352423, 0.0321593, 0.0320617, 0.0328767, 0.0270815, 0.0290354, 0.0240395, 0.0194959, 0.0193779, 0.0158397, 0.0205834, 0.0156804, 0.0147563, 0.0148623, 0.0132235, 0.0132787, 0.0124373, 0.012303, 0.0147376, 0.0192428, 0.0243264, 0.0349633, 0.0364021, 0.0256817, 0.0199481, 0.0147601, 0.00931047, 0.00683646, 0.00598722, 0.00309997, 0.00271791, 0.00217812, 0.00238109, 0.00211634, 0.00157215, 0.00102415, 0.00079707, 0.00046017, 0.00049517, 0.0008925, 0.00042315, 0.00041559, 0.00044956, 0.00030799, 0.00034014, 0.00029082, 0.00027822,
          0.0754717, 0.0757946, 0.0604839, 0.0632353, 0.0709988, 0.0649606, 0.0657492, 0.0466073, 0.0565525, 0.0521033, 0.046965, 0.046729, 0.0479339, 0.0349166, 0.0350028, 0.0322937, 0.0319122, 0.0341675, 0.0300952, 0.0276022, 0.033138, 0.0349206, 0.0413071, 0.0597763, 0.0892004, 0.0895768, 0.0712424, 0.0578018, 0.0357502, 0.0231821, 0.016984, 0.0104705, 0.00959596, 0.00836872, 0.0051559, 0.00342952, 0.00362616, 0.00267857, 0.0022986, 0.00159659, 0.0011425, 0.00163683, 0.00079657, 0.00176713, 0.00105132, 0.00065104, 0.00063337, 0.00068446, 0.0008515, 0.00058612,
          0.0740741, 0.0641026, 0.102326, 0.0842697, 0.1025, 0.13104799, 0.12812001, 0.121523, 0.0862423, 0.103992, 0.0845771, 0.107653, 0.0888565, 0.0769231, 0.0702799, 0.0711921, 0.0655488, 0.0745283, 0.0674357, 0.0721736, 0.0740449, 0.0794171, 0.118132, 0.157878, 0.20647, 0.210068, 0.179371, 0.125585, 0.0827397, 0.0572903, 0.0401639, 0.0284499, 0.0243902, 0.0145931, 0.0152913, 0.0098534, 0.00551344, 0.00651978, 0.00515243, 0.00459117, 0.00300558, 0.00266721, 0.00246761, 0.00196464, 0.00294406, 0.00151257, 0.00227574, 0.00160944, 0.0015887, 0.00086222,
          0.15000001, 0.117647, 0.116071, 0.153409, 0.18468501, 0.17928299, 0.17957699, 0.166189, 0.13121299, 0.18627501, 0.15486, 0.153722, 0.13962799, 0.15942, 0.138547, 0.13439199, 0.120661, 0.113533, 0.122112, 0.144282, 0.15130199, 0.15083399, 0.22382, 0.29613301, 0.371319, 0.39874399, 0.34093699, 0.246626, 0.174374, 0.124051, 0.0933536, 0.0473313, 0.0491559, 0.0412801, 0.0284914, 0.0273723, 0.0203989, 0.0144483, 0.015873, 0.0101543, 0.00998801, 0.00905155, 0.00426191, 0.00548847, 0.00466619, 0.0037918, 0.0040367, 0.0035014, 0.0034188, 0.00369624,
          0.0982143, 0.112637, 0.2, 0.125, 0.243697, 0.25641, 0.222772, 0.22330099, 0.25714299, 0.24683499, 0.232687, 0.22164901, 0.235644, 0.22293, 0.232601, 0.20099699, 0.20099699, 0.197109, 0.203814, 0.204265, 0.22683699, 0.28654999, 0.31202, 0.456083, 0.57703799, 0.590994, 0.50270802, 0.39679599, 0.28284299, 0.170946, 0.14437699, 0.113985, 0.0864486, 0.079465, 0.0579268, 0.0470756, 0.0414815, 0.0404798, 0.027897, 0.0269337, 0.0251656, 0.0210455, 0.0110032, 0.0115995, 0.0124533, 0.0154703, 0.0114114, 0.00574713, 0.0129336, 0.00821918,
          0.1, 0.180952, 0.122507, 0.232558, 0.19230799, 0.23157901, 0.239437, 0.31764701, 0.28729299, 0.37804899, 0.288793, 0.37226301, 0.35277799, 0.29247901, 0.34085199, 0.29273999, 0.24838001, 0.336714, 0.28990799, 0.301613, 0.36044699, 0.40335101, 0.457856, 0.61267102, 0.70735502, 0.73546499, 0.66419601, 0.52578902, 0.376068, 0.26486501, 0.19036999, 0.153667, 0.11715, 0.0985916, 0.0641774, 0.0707291, 0.0558036, 0.037797, 0.0388151, 0.0381166, 0.0445135, 0.0260782, 0.021576, 0.0253659, 0.0191205, 0.0135013, 0.0174368, 0.0192308, 0.00896861, 0.0151111,
          0.33333299, 0.0833333, 0.17073201, 0.226244, 0.28, 0.31999999, 0.367089, 0.35810801, 0.345029, 0.377049, 0.35211301, 0.394068, 0.34717, 0.35416701, 0.41874999, 0.342246, 0.38684201, 0.37752801, 0.385488, 0.38541701, 0.39229399, 0.497253, 0.62222201, 0.69978201, 0.79836798, 0.82078397, 0.767416, 0.634067, 0.44792801, 0.300412, 0.23759399, 0.168929, 0.14826, 0.112613, 0.0966719, 0.0986745, 0.0721358, 0.0535714, 0.0517241, 0.03125, 0.0272021, 0.0273632, 0.0172643, 0.0177305, 0.0107784, 0.015625, 0.0118483, 0.0109356, 0.0112233, 0.0159453,
          0., 0., 0.0769231, 0.138889, 0.2, 0.23999999, 0.320755, 0.35211301, 0.38613901, 0.447552, 0.40000001, 0.38674, 0.42687699, 0.456929, 0.46048099, 0.47284299, 0.427793, 0.49729699, 0.49629599, 0.47716901, 0.530572, 0.60876101, 0.69770002, 0.78988302, 0.86569101, 0.87225801, 0.79739302, 0.67190403, 0.50540501, 0.35117099, 0.25818899, 0.190566, 0.16185001, 0.13345499, 0.108108, 0.120438, 0.0970696, 0.0706714, 0.0421793, 0.0447284, 0.0344828, 0.0269815, 0.020202, 0.0185185, 0.0195195, 0.00811688, 0.00664452, 0.00992908, 0.00283688, 0.00580552,
          0., 0., 0., 0.037037, 0.128571, 0.306122, 0.35507199, 0.37931001, 0.470588, 0.409639, 0.45098001, 0.49068299, 0.52201301, 0.49738199, 0.53603601, 0.56521702, 0.52569199, 0.5625, 0.53939402, 0.54074103, 0.64788699, 0.69674599, 0.80976599, 0.86414403, 0.908696, 0.899028, 0.86128199, 0.747917, 0.534805, 0.38209599, 0.28761101, 0.21126799, 0.190955, 0.16097599, 0.159794, 0.103614, 0.106061, 0.0841584, 0.0677966, 0.0551876, 0.0534653, 0.0369515, 0.0193548, 0.0102669, 0.0191571, 0.0140281, 0.0103734, 0.003663, 0.008726, 0.,
          0., 0., 0., 0., 0.2, 0.25806499, 0.34883699, 0.48108101, 0.50261801, 0.32499999, 0.54794502, 0.48148099, 0.53571397, 0.569444, 0.62893099, 0.56521702, 0.64285702, 0.630252, 0.64285702, 0.73310798, 0.72151899, 0.79619998, 0.87461102, 0.91656297, 0.93766499, 0.94405597, 0.88456303, 0.78626001, 0.66593897, 0.464183, 0.37187499, 0.34200701, 0.229682, 0.23693401, 0.20136499, 0.155709, 0.132653, 0.106529, 0.0877743, 0.0708955, 0.0442177, 0.0402477, 0.0229508, 0.0243902, 0.0196629, 0.0116959, 0.0115942, 0., 0.00262467, 0.00802139,
          0., 0., 0., 0., 0., 0.33333299, 0.76368701, 0.56410301, 0.49264699, 0.50561798, 0.625, 0.55000001, 0.568627, 0.60000002, 0.57894701, 0.71074402, 0.66451597, 0.70967698, 0.76888901, 0.75517201, 0.79816502, 0.83747602, 0.91631401, 0.95575202, 0.959647, 0.953632, 0.92833602, 0.85294098, 0.68272001, 0.525424, 0.38144299, 0.364162, 0.27906999, 0.19905201, 0.17365301, 0.167539, 0.117978, 0.135802, 0.0717703, 0.0497512, 0.0684211, 0.0537634, 0.03, 0.0133929, 0.0197044, 0.0045045, 0.00423729, 0., 0.00793651, 0.,
          0., 0., 0., 0., 0., 0.29289499, 0.29289499, 0.625, 0.47619, 0.48387101, 0.496732, 0.52238798, 0.57978702, 0.55000001, 0.6875, 0.71428603, 0.78260899, 0.75187999, 0.786982, 0.82666701, 0.878676, 0.92560202, 0.94887, 0.963624, 0.97012502, 0.96437103, 0.93904799, 0.88349497, 0.70437998, 0.61039001, 0.42957699, 0.37795299, 0.32499999, 0.31531501, 0.228571, 0.142857, 0.14159299, 0.0582524, 0.0803571, 0.0336134, 0.0229008, 0.015625, 0.0169492, 0.0163934, 0.00714286, 0., 0.00621118, 0., 0.00662252, 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0.26315799, 0.53061199, 0.46551701, 0.612903, 0.75999999, 0.73717898, 0.80303001, 0.85714298, 0.74193501, 0.83157903, 0.904459, 0.93032801, 0.92500001, 0.95052499, 0.96937901, 0.97830701, 0.97121698, 0.95747602, 0.90027702, 0.78658497, 0.62015498, 0.41666701, 0.45588201, 0.358491, 0.305085, 0.261538, 0.137931, 0.122807, 0.0909091, 0.0625, 0.047619, 0.016129, 0., 0.0125, 0., 0.0128205, 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0.5, 0.40000001, 0.60000002, 0.80222702, 0.85168099, 0.88621998, 0.80784303, 1., 0.969697, 0.98039198, 0.93548399, 0.95569599, 0.96959502, 0.96900803, 0.975936, 0.98780501, 0.98034102, 0.96428603, 0.92000002, 0.81818199, 0.68674701, 0.586667, 0.41666701, 0.372549, 0.41509399, 0.27272701, 0.148936, 0.255319, 0.195122, 0.137931, 0.0384615, 0.0652174, 0.0196078, 0., 0.0508475, 0., 0.030303, 0.0322581, 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.69570899, 0.74769598, 0.73064297, 0.84220201, 0.87767899, 0.79090899, 0.91531599, 0.93235397, 0.969697, 1., 0.982301, 0.97647101, 0.986799, 0.988208, 0.97500002, 0.96346998, 0.90265501, 0.824561, 0.8125, 0.657143, 0.57692301, 0.48148099, 0.42307699, 0.44999999, 0.28497401, 0.222222, 0.125, 0.047619, 0.05, 0.111429, 0.137931, 0.0740741, 0., 0.0163934, 0., 0.0769231, 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.29289499, 0.5, 0.74769598, 0.625, 0.69230801, 0.86927199, 0.86821902, 0.904827, 0.935987, 0.966667, 0.97727299, 0.98780501, 1., 0.98750001, 0.98461503, 0.84375, 0.84841102, 0.74436098, 0.683258, 0.53672302, 0.656977, 0.38124999, 0.20930199, 0.23584899, 0.186869, 0.0928571, 0.0804598, 0.138211, 0.20118301, 0.0952381, 0.088785, 0.0641026, 0.0561798, 0.0147783, 0.00930233, 0.00829876, 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.59175098, 0.79587603, 0.86132401, 0.854159, 0.91562903, 0.92084098, 0.93517101, 0.93924999, 0.93547702, 0.932706, 0.921624, 0.895486, 0.87207103, 0.65789503, 0.85444701, 0.82897401, 0.62222201, 0.282051, 0.40350899, 0.191489, 0.0731707, 0.0606061, 0.128205, 0.142857, 0.29166701, 0.204082, 0.164557, 0.0428571, 0.0133333, 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.59175098, 0.64644599, 0.80388403, 0.75372601, 0.87090099, 0.82679498, 0.86869299, 0.851219, 0.82667601, 0.81026399, 0.76156503, 0.47382501, 0.64644599, 0.68377298, 0.64644599, 0.71132499, 0.585935, 0.57142901, 0., 0., 0., 0.0909091, 0.30000001, 0.30769199, 0.136364, 0.0769231, 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.29289499, 0.29289499, 0.5, 0.29289499, 0.29289499, 0., 0., 0., 0.29289499, 0.29289499, 0.29289499, 0., 0., 0.5, 0.5, 0.69570899, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.
        };
        return pi0prob_b[pos];
      } else return Const::doubleNaN;
    }

    double Eta_Prob(double mass, double energy, int eclRegion)
    {
      static const double massMin = 0.4473;
      static const double massMax = 0.6473;
      static const double logEnergyMin = 1.3;
      static const double logEnergyMax = 3.7;
      static const int p_bins = 24;
      static const int m_bins = 50;

      double logp = log(1000 * energy) / log(10.);
      if ((logp < logEnergyMin) || (logp > logEnergyMax)) return 0;

      double drow = p_bins * (logp - logEnergyMin) / (logEnergyMax - logEnergyMin);
      int row = int(drow);
      double dcol = m_bins * (mass - massMin) / (massMax - massMin);
      int col = int(dcol);
      if ((row < 0) || (row >= p_bins) || (col < 0) || (col >= m_bins)) {
        B2ERROR("Fault in getting the coordinates of eta probability");
        return Const::doubleNaN;
      }
      int pos = m_bins * row + col ;
      if (pos > m_bins * p_bins) {
        B2ERROR("Fault in getting the coordinates of eta probability");
        return Const::doubleNaN;
      }

      if (eclRegion == 1) {
        const double etaprob_f[1200] = {
          0., 0., 0., 0., 0., 0., 0., 0., 0.00041442, 0.0004384, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0.00026838, 0.00028906, 0.00015425, 0.00016464, 0.00017787, 0., 0.00020442, 0., 0., 0.00023958, 0.0002656, 0.00027739, 0., 0., 0.0006812, 0., 0.00080064, 0., 0.00043346, 0., 0.00049925, 0.00053305, 0.00057274, 0.00061501, 0., 0.00069832, 0., 0.00155159, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0.00066105, 0.00043883, 0., 0.00041009, 0.00022087, 0.00046495, 0.00050448, 0.00039656, 0., 0.00090293, 0.00016361, 0.00053013, 0.00056625, 0.00039518, 0.00042328, 0.00045076, 0.00047847, 0.00025195, 0.0002736, 0.00087438, 0.00030221, 0.00192308, 0.00068989, 0.00208189, 0.00192382, 0.00204834, 0.0026121, 0.00090416, 0.00048077, 0.00051493, 0., 0.00057904, 0., 0.00064267, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0.00050893, 0.00058991, 0.00022802, 0.00036234, 0.00038645, 0.00075925, 0.00083119, 0.00055166, 0.00100427, 0.00072694, 0.00076212, 0.00081054, 0.0016269, 0.0004697, 0.00062469, 0.00093333, 0.00110773, 0.00149544, 0.00226208, 0.00154799, 0.00217549, 0.00463947, 0.00308705, 0.00350263, 0.00426679, 0.00442478, 0.00446898, 0.003386, 0.00239449, 0.00242351, 0.00228833, 0.00236167, 0.00109729, 0.00113422, 0.00078493, 0.0008446, 0.00044924, 0.00046904, 0.00050968, 0.00101781, 0., 0., 0.00059382, 0.00066357, 0., 0., 0., 0., 0.00080645, 0.0008569,
          0.00077436, 0.0008776, 0.00151692, 0.00110126, 0.001257, 0.00153692, 0.00093946, 0.00130711, 0.00131375, 0.0011635, 0.00118306, 0.00057201, 0.00105953, 0.00229629, 0.00187387, 0.00147809, 0.00198855, 0.00317089, 0.00289575, 0.00339879, 0.00335902, 0.00592683, 0.00522164, 0.00753941, 0.00879066, 0.00949779, 0.00930364, 0.0061121, 0.00755192, 0.00637798, 0.00545331, 0.00228224, 0.00198216, 0.00315325, 0.00245371, 0.0016572, 0.00145985, 0.00027042, 0.00110681, 0.00088469, 0.00060735, 0.00100874, 0.00034118, 0.00070572, 0., 0., 0.00042717, 0.00044763, 0.00047015, 0.,
          0.00269753, 0.00227906, 0.00264505, 0.00241506, 0.00320671, 0.00214362, 0.00304219, 0.00169793, 0.00232707, 0.00283653, 0.00187793, 0.00183194, 0.00310631, 0.00384857, 0.0023236, 0.00364382, 0.00472335, 0.00469863, 0.005785, 0.00670943, 0.00701652, 0.00949806, 0.0120646, 0.0132249, 0.0145919, 0.0160843, 0.0121448, 0.0124214, 0.0090422, 0.00529928, 0.00620608, 0.00501737, 0.0048986, 0.00409165, 0.00317878, 0.00266111, 0.00251076, 0.00267823, 0.00175676, 0.0012766, 0.00151745, 0.00032728, 0.00066324, 0.00034977, 0.00074129, 0.00058951, 0.00020708, 0.00108507, 0.00044633, 0.00023901,
          0.00394115, 0.00522876, 0.00565844, 0.00382574, 0.00393992, 0.00417332, 0.00370813, 0.00346145, 0.00507255, 0.00608245, 0.00511737, 0.00486779, 0.00569925, 0.00752044, 0.00678514, 0.00731911, 0.00897142, 0.00983405, 0.00843068, 0.0143387, 0.0149727, 0.0193707, 0.0237683, 0.0302323, 0.0315608, 0.0308986, 0.0280973, 0.0227422, 0.0218138, 0.0138928, 0.0104568, 0.00869565, 0.00582984, 0.0049554, 0.00453515, 0.00329504, 0.00239001, 0.00168112, 0.00126047, 0.00187233, 0.00118841, 0.00091735, 0.00056054, 0.000287, 0.00107307, 0.00039722, 0.00062292, 0.00052449, 0.00043792, 0.00034025,
          0.00636943, 0.0062782, 0.00754206, 0.00648869, 0.00434704, 0.00759219, 0.00743302, 0.00567678, 0.00832625, 0.00867052, 0.00758575, 0.00855805, 0.00767905, 0.00974629, 0.0107089, 0.0117942, 0.0131521, 0.0170122, 0.0196246, 0.0244806, 0.0317057, 0.0332729, 0.0443382, 0.048575, 0.0543943, 0.0542198, 0.0524012, 0.041767, 0.0381239, 0.0230158, 0.0169731, 0.0123182, 0.00932618, 0.00837696, 0.00503548, 0.00408116, 0.00323986, 0.00217093, 0.00167112, 0.00212433, 0.00167112, 0.00087556, 0.00108814, 0.00054077, 0.00086928, 0.00042485, 0.000625, 0.00041005, 0.00071935, 0.00020822,
          0.0112606, 0.0139075, 0.0100081, 0.00648172, 0.0108192, 0.00860324, 0.0094106, 0.010547, 0.0105718, 0.00884533, 0.00693614, 0.0118424, 0.0121759, 0.01284, 0.0144047, 0.017823, 0.0192427, 0.027572, 0.0311826, 0.0337657, 0.0441865, 0.0563716, 0.0635748, 0.0763267, 0.0829176, 0.0919672, 0.0753504, 0.0718719, 0.0561249, 0.0321417, 0.0323203, 0.018583, 0.0141958, 0.0114577, 0.00845865, 0.00515223, 0.0045689, 0.00338733, 0.00222222, 0.0012815, 0.00210261, 0.00196353, 0.00196629, 0.00109454, 0.00081911, 0.00053497, 0.00092777, 0.00064986, 0.0005277, 0.00026106,
          0.0139905, 0.0129991, 0.00920051, 0.01526, 0.00731707, 0.0111352, 0.0138317, 0.0102011, 0.0153302, 0.0145222, 0.0133025, 0.0152629, 0.0181406, 0.0175341, 0.0220588, 0.025957, 0.0270552, 0.0374968, 0.0444854, 0.0517542, 0.0628362, 0.0798389, 0.0881007, 0.1073, 0.111632, 0.129977, 0.116667, 0.0919273, 0.0671198, 0.0465707, 0.0279931, 0.0223262, 0.0133133, 0.0106139, 0.00839631, 0.0061212, 0.00571662, 0.00353843, 0.00278607, 0.00294175, 0.00131777, 0.00150886, 0.00165563, 0.00179888, 0.00228994, 0.00121655, 0.00119169, 0.00124356, 0.00051751, 0.00117608,
          0.0180639, 0.0146089, 0.0166442, 0.0174653, 0.019774, 0.0216802, 0.0169719, 0.0208062, 0.0187446, 0.0222222, 0.0208696, 0.0235149, 0.0309677, 0.0334888, 0.035531, 0.0431278, 0.0505868, 0.0627859, 0.0673453, 0.086352, 0.110465, 0.127131, 0.15613499, 0.181335, 0.202483, 0.187151, 0.187792, 0.1258, 0.1142, 0.0709932, 0.0498409, 0.0250871, 0.016497, 0.0137227, 0.00970537, 0.00911411, 0.0066291, 0.00516885, 0.00263418, 0.00232095, 0.00355527, 0.0016197, 0.004164, 0.00193299, 0.00155328, 0.00189155, 0.00151332, 0.00090389, 0.00144092, 0.00148898,
          0.0249494, 0.0224949, 0.0265201, 0.0271041, 0.0283081, 0.0305768, 0.0385656, 0.033264, 0.0321038, 0.0332268, 0.0341275, 0.0380155, 0.0416667, 0.0444305, 0.054678, 0.0765634, 0.0776641, 0.0955378, 0.11456, 0.131372, 0.177379, 0.20362701, 0.240345, 0.28016099, 0.30217701, 0.30418399, 0.265104, 0.237506, 0.155533, 0.0942982, 0.0675369, 0.0328142, 0.025, 0.0171331, 0.0106323, 0.0099723, 0.0115958, 0.0128924, 0.00682594, 0.00612131, 0.00516648, 0.00477707, 0.00437397, 0.00208225, 0.0036784, 0.00275179, 0.00259336, 0.0015873, 0.00206612, 0.00260281,
          0.0380091, 0.0381395, 0.0419325, 0.0322581, 0.0286458, 0.0404135, 0.047491, 0.0441696, 0.0387324, 0.0441044, 0.0540541, 0.0491525, 0.0616855, 0.0763226, 0.0881877, 0.0833333, 0.113924, 0.14486, 0.155056, 0.197504, 0.22818799, 0.28554001, 0.32928899, 0.38438001, 0.395643, 0.42012101, 0.37890199, 0.30486399, 0.215712, 0.130187, 0.0763666, 0.0430464, 0.0390805, 0.0179181, 0.0121951, 0.0090834, 0.0136546, 0.0138324, 0.00797448, 0.00721732, 0.00564516, 0.00821018, 0.00816326, 0.00616333, 0.00551615, 0.0054902, 0.00470588, 0.00546448, 0.00158228, 0.00328407,
          0.0522565, 0.0375587, 0.0449704, 0.0365566, 0.0565806, 0.067734, 0.0677765, 0.0540865, 0.0389151, 0.0550459, 0.0765607, 0.0913349, 0.0927835, 0.0892448, 0.138547, 0.1507, 0.16, 0.179842, 0.236866, 0.261538, 0.31925699, 0.37993899, 0.441333, 0.48076901, 0.50315201, 0.49759299, 0.454604, 0.400291, 0.26982799, 0.148008, 0.100331, 0.0347222, 0.0394305, 0.0154762, 0.0157303, 0.0174002, 0.0106635, 0.00972973, 0.0119048, 0.0164114, 0.0141011, 0.0176406, 0.00569476, 0.0136519, 0.00821596, 0.0043573, 0.00627615, 0.00776915, 0.00576037, 0.00650054,
          0.0755287, 0.0614035, 0.066568, 0.0585516, 0.0909091, 0.0730949, 0.0903427, 0.0787623, 0.0816901, 0.0957854, 0.077147, 0.117566, 0.108289, 0.147099, 0.14525799, 0.130982, 0.194152, 0.21904799, 0.248613, 0.354146, 0.36785701, 0.44679099, 0.51445103, 0.56300801, 0.56253999, 0.57560402, 0.51975101, 0.443342, 0.26810199, 0.20413101, 0.0929319, 0.0634483, 0.0434783, 0.0224404, 0.0344371, 0.0277393, 0.0252324, 0.0151724, 0.0156472, 0.00693481, 0.0149864, 0.00839161, 0.0138696, 0.0138313, 0.00426136, 0.0182328, 0.00544959, 0.015625, 0.00938338, 0.00802139,
          0.090708, 0.0863309, 0.0627615, 0.0903226, 0.0707071, 0.0956341, 0.092, 0.0810811, 0.117988, 0.12673301, 0.112903, 0.17341, 0.130597, 0.18530899, 0.222781, 0.241087, 0.243781, 0.324117, 0.37594, 0.42394, 0.49639401, 0.53221297, 0.599639, 0.64082301, 0.679066, 0.67857099, 0.60967499, 0.52564102, 0.36675799, 0.209416, 0.154851, 0.0728745, 0.044316, 0.0382979, 0.0290456, 0.0261569, 0.0212766, 0.0121212, 0.0248963, 0.0403226, 0.0112613, 0.00954198, 0.0157171, 0.0248447, 0.0188324, 0.0122699, 0.020794, 0.0155039, 0.00998004, 0.0166667,
          0.117647, 0.0711462, 0.0961538, 0.131579, 0.105096, 0.118243, 0.121311, 0.12709001, 0.143731, 0.15804601, 0.18879101, 0.22905, 0.240541, 0.281984, 0.28238299, 0.29427099, 0.30196899, 0.39375001, 0.456929, 0.50850302, 0.58419698, 0.62546802, 0.67259401, 0.714149, 0.730703, 0.732014, 0.66902101, 0.59403402, 0.419929, 0.244275, 0.159151, 0.0929648, 0.0568862, 0.0623145, 0.0479042, 0.0345821, 0.0240964, 0.0340909, 0.0336134, 0.0267857, 0.0189274, 0.0169014, 0.0287356, 0.0231788, 0.0319767, 0.0242424, 0.0294985, 0.00303951, 0.00555556, 0.0153374,
          0.0980392, 0.0809249, 0.0969388, 0.104046, 0.133663, 0.107345, 0.15000001, 0.10989, 0.178947, 0.237443, 0.237069, 0.21495301, 0.23176, 0.28400001, 0.32558101, 0.371622, 0.44972101, 0.51744199, 0.53768802, 0.63146502, 0.70291299, 0.721726, 0.771164, 0.77790397, 0.82484102, 0.79194599, 0.73907101, 0.67145401, 0.53191501, 0.33986899, 0.214022, 0.108108, 0.0738916, 0.0530973, 0.0575221, 0.059633, 0.0584795, 0.0790698, 0.0298507, 0.0206186, 0.0283401, 0.0364583, 0.0361991, 0.0633484, 0.0231481, 0.0176991, 0.0230769, 0.018018, 0.00505051, 0.025,
          0.18840601, 0.17073201, 0.130435, 0.192661, 0.132075, 0.177083, 0.25, 0.25, 0.25714299, 0.225806, 0.252101, 0.33561599, 0.39130399, 0.40540501, 0.41059601, 0.42528701, 0.58571398, 0.53917098, 0.66789699, 0.70890403, 0.72248799, 0.803644, 0.83277601, 0.846645, 0.86666697, 0.85007101, 0.84282899, 0.74861902, 0.557769, 0.415205, 0.251656, 0.12766001, 0.0852713, 0.0720721, 0.0932203, 0.0652174, 0.0895522, 0.0671642, 0.0504202, 0.0378788, 0.0571429, 0.0495868, 0.00826446, 0.0507246, 0.0735294, 0.0534351, 0.0238095, 0.0405405, 0.0131579, 0.0211268,
          0.192982, 0.26470599, 0.0555556, 0.142857, 0.33333299, 0.146341, 0.21568599, 0.25999999, 0.27906999, 0.237288, 0.40625, 0.43662, 0.350649, 0.515625, 0.67500001, 0.59405899, 0.65891498, 0.60000002, 0.68715101, 0.81115901, 0.80833298, 0.86101699, 0.86666697, 0.91533202, 0.90109903, 0.88220501, 0.875723, 0.809129, 0.67455602, 0.55056202, 0.35897401, 0.240964, 0.0363636, 0.0819672, 0.0754717, 0.0350877, 0.103448, 0.0862069, 0.102041, 0.0181818, 0.05, 0.0535714, 0.0533333, 0., 0.0540541, 0.0645161, 0., 0.0434783, 0.016129, 0.0327869,
          0.237113, 0.150198, 0.152091, 0.155405, 0.20333301, 0.29166701, 0.32208601, 0.33333299, 0.35779801, 0.31818199, 0.57142901, 0.44827601, 0.5, 0.63333303, 0.63157898, 0.765957, 0.854545, 0.79365098, 0.82999998, 0.958763, 0.86614197, 0.905213, 0.94930899, 0.95815903, 0.94140601, 0.89777797, 0.90853697, 0.93893099, 0.74026, 0.648148, 0.45945901, 0.384615, 0.0454545, 0.0989305, 0.2, 0.22597399, 0.153846, 0.0434783, 0.0567568, 0.0347826, 0.05, 0.1, 0.0645161, 0.0305882, 0.107143, 0.0384615, 0., 0.0714286, 0.0714286, 0.0416667,
          0.0666667, 0.172043, 0.33333299, 0.26087001, 0.30136999, 0.28712901, 0.47, 0.48750001, 0.55454499, 0.54700899, 0.51181102, 0.51937997, 0.58018899, 0.75925899, 0.77822602, 0.81308401, 0.93524599, 0.88888901, 0.8125, 0.92727298, 0.96551698, 0.94999999, 0.94392502, 1., 0.98076898, 0.97916698, 0.930556, 0.909091, 0.84848499, 0.95238101, 0.58302599, 0.525316, 0.26315799, 0.191176, 0.261538, 0.20930199, 0.117647, 0.0927152, 0.0430108, 0.0438596, 0.109244, 0.0534351, 0.0338983, 0.0297619, 0.0431655, 0.125, 0.0479042, 0.18543001, 0.0542169, 0.0990991,
          0.0833333, 0.1875, 0.153846, 0.57142901, 0.375, 0.5, 0.45454499, 0.84171301, 0.75161302, 0.615385, 0.81609398, 0.55000001, 0.75862098, 0.83128798, 0.875314, 0.86415601, 0.884229, 0.907309, 0.91151297, 0.92529798, 0.93045902, 0.94063097, 1., 0.96296299, 0.97435898, 0.96551698, 0.93767798, 0.92533702, 0.90785098, 0.91563201, 0.850968, 0.82944298, 0.5, 0.25, 0.19354799, 0.305556, 0.115385, 0.0243902, 0.0952381, 0.41666701, 0.285714, 0.105263, 0., 0., 0.08, 0.0833333, 0.16129, 0.111111, 0.108108, 0.0588235,
          0., 0., 0., 0., 0., 0., 0., 0.59175098, 0.73167199, 0.82751799, 0.3125, 0.57142901, 0.73167199, 0.64644599, 0.78679901, 0.72674298, 0.78989702, 0.87355101, 0.828067, 0.89284199, 0.84354198, 0.881033, 0.90276301, 0.90894997, 0.91111702, 0.88728601, 0.89094901, 0.85439801, 0.786672, 0.82850099, 0.73273897, 0.71132499, 0.5, 0., 0.33333299, 0.33333299, 0.2, 0., 0.25, 0.69570899, 0.69570899, 0.33333299, 0., 0., 0., 0., 0., 0., 0., 0.
        };
        return etaprob_f[pos];
      } else if (eclRegion == 2) {
        const double etaprob_c[1200] = {
          0.00017777, 0.00038309, 0.00008879, 0.00018819, 0.00033816, 0.00025154, 0.00019454, 0.00016481, 0.00022271, 0.00028591, 0.00015304, 0.00049143, 0.00017285, 0.00074442, 0.0003928, 0.00049561, 0.00074377, 0.00088162, 0.00093745, 0.00134072, 0.00193836, 0.00144553, 0.00087527, 0.0013007, 0.001295, 0.00197524, 0.0024978, 0.00156617, 0.00083236, 0.00141819, 0.0007734, 0.00083299, 0.00022487, 0.00094029, 0.00051854, 0.00028066, 0.00060661, 0.00095329, 0.00070796, 0., 0.00080321, 0., 0., 0.00048924, 0., 0., 0., 0., 0., 0.,
          0.00032785, 0.00036372, 0.00042093, 0.00057474, 0.00024733, 0.00047425, 0.00040618, 0.00048672, 0.00068636, 0.00067178, 0.00068451, 0.00089751, 0.00087809, 0.0016439, 0.00121787, 0.0014214, 0.00111165, 0.00179322, 0.00247591, 0.00277441, 0.00347392, 0.00385419, 0.00404608, 0.00430395, 0.005902, 0.0048499, 0.00618812, 0.00508762, 0.004528, 0.00441796, 0.00212933, 0.00186241, 0.00140629, 0.00217753, 0.00154951, 0.00174317, 0.00062344, 0.00166279, 0.00124666, 0.00075772, 0.0006115, 0.00063573, 0.00022237, 0.00023229, 0.00098888, 0.00026674, 0.00028744, 0., 0., 0.00102881,
          0.00069102, 0.00083998, 0.00089272, 0.00071514, 0.00097091, 0.0009642, 0.00109596, 0.00091978, 0.00101502, 0.00145117, 0.00135616, 0.00174974, 0.00216705, 0.00217729, 0.00278332, 0.00279554, 0.002932, 0.00378526, 0.00414698, 0.00569821, 0.006519, 0.00713767, 0.00967443, 0.0110996, 0.0124781, 0.0139456, 0.0113204, 0.0121032, 0.0109916, 0.00791675, 0.0091045, 0.00608142, 0.00536375, 0.00380801, 0.00493239, 0.00414755, 0.00394848, 0.00283229, 0.00232657, 0.00292496, 0.0021789, 0.00148276, 0.00117157, 0.00027705, 0.00103642, 0.0004576, 0.00049084, 0.00034043, 0.00105951, 0.00019164,
          0.00107442, 0.00141186, 0.0013999, 0.00150118, 0.00119513, 0.00112324, 0.00152889, 0.00186731, 0.00199423, 0.00210369, 0.00225459, 0.00281147, 0.00287436, 0.00334159, 0.00391445, 0.00447367, 0.0046585, 0.0059232, 0.00732924, 0.0102829, 0.0109875, 0.0149152, 0.0187188, 0.0210454, 0.0249115, 0.0239885, 0.0240413, 0.0202882, 0.0192007, 0.0156798, 0.0126785, 0.0118286, 0.011597, 0.00730055, 0.00703293, 0.00610988, 0.00414503, 0.00508306, 0.00298871, 0.00270779, 0.00233745, 0.00173555, 0.00203032, 0.00156073, 0.00208978, 0.0015991, 0.00084019, 0.0011697, 0.00084507, 0.00048976,
          0.0024483, 0.00209273, 0.00205741, 0.00263183, 0.0023285, 0.00252564, 0.00322401, 0.00319358, 0.00320192, 0.00323995, 0.00402005, 0.00371507, 0.0047809, 0.00577644, 0.00557132, 0.00704619, 0.00831375, 0.0105428, 0.0116852, 0.015485, 0.0182475, 0.0220871, 0.0273707, 0.0323419, 0.0368627, 0.0403605, 0.0393849, 0.0357762, 0.0273792, 0.0246287, 0.0210106, 0.0160235, 0.0138059, 0.0114691, 0.00863755, 0.00858154, 0.00642547, 0.00463356, 0.00377283, 0.00329141, 0.00293392, 0.00301708, 0.00208093, 0.00159527, 0.0016398, 0.00128269, 0.00140348, 0.00061961, 0.0010497, 0.00118895,
          0.00341155, 0.00315186, 0.00361583, 0.0034718, 0.00465378, 0.00403431, 0.00376323, 0.0046585, 0.00439444, 0.00588586, 0.00657601, 0.00711431, 0.008, 0.0091261, 0.0104504, 0.0119643, 0.0139073, 0.0166158, 0.0199902, 0.0243177, 0.030397, 0.0352113, 0.0445886, 0.0511809, 0.0604563, 0.0627031, 0.0558122, 0.0502949, 0.0393782, 0.0331977, 0.0263773, 0.0200392, 0.0155712, 0.0132006, 0.0104641, 0.00825705, 0.00506133, 0.00469871, 0.0038839, 0.00349915, 0.00256954, 0.00210397, 0.00168819, 0.00122263, 0.00101788, 0.00077571, 0.00103485, 0.00092427, 0.00067757, 0.00065391,
          0.00504639, 0.00502437, 0.00525544, 0.00535161, 0.00484285, 0.00573923, 0.00777597, 0.00680535, 0.00768381, 0.00943533, 0.00951834, 0.0118872, 0.0121414, 0.0158587, 0.0169375, 0.0179197, 0.0222513, 0.0280829, 0.0341952, 0.0400755, 0.0511435, 0.0609751, 0.0788562, 0.0912246, 0.10599, 0.105979, 0.0997322, 0.0882811, 0.0706048, 0.051604, 0.0397866, 0.0296628, 0.0229763, 0.0161549, 0.0122757, 0.00785041, 0.00641003, 0.00587051, 0.00352811, 0.00305303, 0.00226897, 0.0018851, 0.00162034, 0.00154416, 0.00099093, 0.00084001, 0.00122929, 0.00084489, 0.00082796, 0.00086827,
          0.00702563, 0.00747317, 0.0073505, 0.00722102, 0.00778808, 0.00975583, 0.0100536, 0.010394, 0.0116769, 0.0132055, 0.0131018, 0.0148312, 0.0182182, 0.0221762, 0.0260615, 0.028314, 0.0326353, 0.0414147, 0.050956, 0.0628549, 0.0766624, 0.096032, 0.121072, 0.139475, 0.15542901, 0.160335, 0.155564, 0.12928601, 0.101347, 0.072321, 0.0551305, 0.0408605, 0.025561, 0.0193576, 0.0121918, 0.010362, 0.00703682, 0.00576775, 0.00388578, 0.00348245, 0.00293976, 0.00204731, 0.00168031, 0.00182211, 0.00202361, 0.00141079, 0.00094572, 0.00117314, 0.0007951, 0.00109899,
          0.0106473, 0.0120239, 0.0104191, 0.0109493, 0.00958634, 0.0111466, 0.0128853, 0.0142191, 0.0163793, 0.0180175, 0.0190058, 0.0209849, 0.0223666, 0.0291648, 0.0350829, 0.0385374, 0.049175, 0.0570749, 0.0705205, 0.087114, 0.110267, 0.12899899, 0.162416, 0.18636, 0.211239, 0.2233, 0.20468301, 0.16977701, 0.127886, 0.0932401, 0.060996, 0.0415415, 0.0259192, 0.0176449, 0.0121118, 0.00891483, 0.00780172, 0.0050444, 0.00396825, 0.00276315, 0.00299525, 0.00300892, 0.00191521, 0.00192068, 0.00165971, 0.00131134, 0.00129955, 0.00151676, 0.00169373, 0.00147834,
          0.0128624, 0.0128708, 0.0139883, 0.0158585, 0.0158792, 0.0160955, 0.018026, 0.0197394, 0.0186624, 0.0207907, 0.0236296, 0.0287465, 0.0292781, 0.0379699, 0.0438433, 0.0532682, 0.0652789, 0.0778849, 0.100464, 0.118138, 0.14615101, 0.183217, 0.227809, 0.25975001, 0.28430501, 0.28131101, 0.264433, 0.216406, 0.159894, 0.102423, 0.0644448, 0.0423605, 0.025602, 0.0169357, 0.0121606, 0.00810114, 0.00596923, 0.00514296, 0.00491177, 0.00360922, 0.00319682, 0.00326817, 0.00325203, 0.00229677, 0.00244981, 0.00169287, 0.0024108, 0.00252389, 0.00165397, 0.0023017,
          0.0205227, 0.0209496, 0.0202442, 0.0235981, 0.0206592, 0.0261991, 0.0259614, 0.0237005, 0.0306664, 0.02903, 0.038522, 0.0374651, 0.0453774, 0.0516659, 0.0653634, 0.0779717, 0.0941812, 0.115162, 0.144917, 0.17513099, 0.220911, 0.26488701, 0.31296501, 0.359752, 0.38658401, 0.38674, 0.34865201, 0.288367, 0.204364, 0.132522, 0.0774391, 0.0446321, 0.0274675, 0.0204336, 0.0128752, 0.00917431, 0.007506, 0.00614308, 0.00614156, 0.00455832, 0.0056827, 0.00438871, 0.00371029, 0.00328587, 0.00393336, 0.00348297, 0.00312595, 0.00300624, 0.00260676, 0.00195191,
          0.0266034, 0.0279566, 0.0290814, 0.0337436, 0.0304476, 0.0347692, 0.0367573, 0.0375102, 0.0407407, 0.0464418, 0.0492992, 0.0554562, 0.0627274, 0.0755471, 0.0907642, 0.106044, 0.127519, 0.16222399, 0.19747899, 0.247425, 0.30230299, 0.36330101, 0.41354501, 0.464717, 0.49327901, 0.48611099, 0.44691899, 0.36821401, 0.255077, 0.15447301, 0.0963436, 0.0512153, 0.0325467, 0.0214635, 0.0152618, 0.0111387, 0.0112256, 0.0100815, 0.00875622, 0.00823215, 0.00633484, 0.0066586, 0.00483191, 0.00561122, 0.00615195, 0.00658495, 0.00441614, 0.00281747, 0.00517928, 0.00368098,
          0.0400263, 0.0363868, 0.0417259, 0.0454308, 0.0420485, 0.0484956, 0.047509, 0.0549745, 0.0580329, 0.0619835, 0.0725022, 0.0781155, 0.0860701, 0.0997096, 0.11812, 0.15014701, 0.176706, 0.215682, 0.26666701, 0.32784301, 0.39381301, 0.45974499, 0.52249599, 0.56185299, 0.58218402, 0.58009601, 0.53199703, 0.43597001, 0.30401, 0.194759, 0.106064, 0.0619757, 0.0346732, 0.0247619, 0.0198719, 0.0188067, 0.01585, 0.0125067, 0.010047, 0.00954748, 0.00848675, 0.00923037, 0.00915605, 0.00690021, 0.00745871, 0.00717036, 0.0069746, 0.00702918, 0.00538977, 0.00484653,
          0.0485864, 0.0506264, 0.0551073, 0.0533067, 0.0558281, 0.0658744, 0.0655178, 0.0713087, 0.0807947, 0.0881807, 0.0945208, 0.109574, 0.121207, 0.13237301, 0.169888, 0.193388, 0.230738, 0.28057599, 0.34254599, 0.40924799, 0.490731, 0.55087698, 0.61092901, 0.65180802, 0.67400599, 0.66053802, 0.61036199, 0.51280302, 0.37217, 0.2362, 0.134656, 0.065436, 0.0425532, 0.0321355, 0.0276989, 0.0239064, 0.0225682, 0.0204046, 0.0138257, 0.0148551, 0.015774, 0.0127762, 0.0111013, 0.0125887, 0.0104112, 0.0123109, 0.0116899, 0.0100281, 0.00883117, 0.00890208,
          0.0614894, 0.0733886, 0.0775934, 0.0722433, 0.074435, 0.0860261, 0.084413, 0.0986437, 0.104592, 0.115042, 0.124565, 0.132856, 0.15205599, 0.177709, 0.21157899, 0.233779, 0.28493601, 0.33170101, 0.40244699, 0.470994, 0.552113, 0.620902, 0.68155801, 0.71229601, 0.73234397, 0.708125, 0.66018701, 0.56941003, 0.42760301, 0.27375099, 0.151169, 0.0842719, 0.0618879, 0.0424307, 0.0381664, 0.0330179, 0.0274773, 0.0289116, 0.0210665, 0.0240104, 0.021519, 0.0198344, 0.0186916, 0.016971, 0.0134273, 0.0179066, 0.0118265, 0.0131723, 0.0100415, 0.0113265,
          0.0663837, 0.0850467, 0.0976976, 0.0962241, 0.107683, 0.0983607, 0.11408, 0.12892701, 0.13185599, 0.150778, 0.159262, 0.17065901, 0.20671099, 0.228387, 0.2827, 0.31424701, 0.35573599, 0.42865399, 0.50381798, 0.57870197, 0.65239, 0.70901698, 0.75132698, 0.778907, 0.78513902, 0.77354902, 0.72158003, 0.63252097, 0.499448, 0.354734, 0.193691, 0.113341, 0.0777187, 0.0541023, 0.0529116, 0.0402177, 0.0421117, 0.0379437, 0.0324898, 0.0322682, 0.0270184, 0.0289231, 0.0253759, 0.0240927, 0.0218477, 0.0234327, 0.0225266, 0.0150538, 0.0181874, 0.0156887,
          0.0911765, 0.0912981, 0.112771, 0.108577, 0.137073, 0.134606, 0.164235, 0.17067599, 0.174312, 0.182809, 0.22600199, 0.22856, 0.25891501, 0.28582299, 0.33440199, 0.37903199, 0.442222, 0.52705401, 0.59567702, 0.65796399, 0.72254199, 0.77832597, 0.81533498, 0.83565003, 0.83847499, 0.82555097, 0.788459, 0.69951302, 0.58662701, 0.41615999, 0.25693399, 0.15174399, 0.111259, 0.0851064, 0.0650183, 0.0487805, 0.0554791, 0.0517408, 0.0356973, 0.0431925, 0.0500234, 0.0299485, 0.0356464, 0.0371049, 0.0321678, 0.0271264, 0.028342, 0.0217492, 0.0240964, 0.0274361,
          0.102415, 0.105172, 0.141058, 0.14107899, 0.14578, 0.17683899, 0.197358, 0.21270099, 0.217682, 0.254237, 0.286598, 0.298969, 0.34707701, 0.369847, 0.445658, 0.466474, 0.53311402, 0.60613501, 0.66794002, 0.74928403, 0.79020298, 0.83568501, 0.85742497, 0.880602, 0.87963301, 0.87154597, 0.83821797, 0.77071702, 0.67637098, 0.51357001, 0.34847599, 0.222222, 0.13293099, 0.115806, 0.0761834, 0.0744939, 0.0789474, 0.0637958, 0.0527523, 0.058121, 0.0466989, 0.0508083, 0.041632, 0.0493446, 0.0482291, 0.0245587, 0.0364742, 0.0398467, 0.0352847, 0.0338722,
          0.107667, 0.136364, 0.13398699, 0.14641701, 0.16383301, 0.18307699, 0.23639201, 0.26457399, 0.25321901, 0.31989601, 0.338918, 0.41567701, 0.43557, 0.47219399, 0.53968298, 0.55825698, 0.63531899, 0.686167, 0.76310998, 0.811261, 0.85861403, 0.88182998, 0.89815599, 0.915497, 0.91235298, 0.909639, 0.87808901, 0.82616401, 0.750974, 0.62808102, 0.446257, 0.31840199, 0.192708, 0.122419, 0.115442, 0.122333, 0.0947712, 0.101025, 0.0991124, 0.0692308, 0.0675039, 0.0638298, 0.0457797, 0.0451237, 0.05613, 0.0492537, 0.0614035, 0.0481203, 0.0650529, 0.04329,
          0.113636, 0.14741001, 0.153543, 0.174721, 0.232759, 0.231884, 0.32638901, 0.316129, 0.296296, 0.36944401, 0.41279101, 0.42296901, 0.52702701, 0.53418797, 0.62825298, 0.69537503, 0.724051, 0.76334298, 0.85008401, 0.863415, 0.89322698, 0.91369802, 0.93541503, 0.94260103, 0.94479698, 0.941109, 0.92054898, 0.88763499, 0.84869403, 0.74970102, 0.564394, 0.39322901, 0.297297, 0.227964, 0.157407, 0.135231, 0.0940767, 0.15241601, 0.0896552, 0.108209, 0.0772358, 0.0817844, 0.0733333, 0.0753425, 0.0582192, 0.0657439, 0.0616438, 0.0719178, 0.0636042, 0.0498442,
          0.169811, 0.151899, 0.217949, 0.183099, 0.25641, 0.29885101, 0.33663401, 0.42222199, 0.463918, 0.433566, 0.55660403, 0.629412, 0.67333299, 0.64245802, 0.71559602, 0.84051698, 0.80000001, 0.84020603, 0.91098499, 0.89633399, 0.93561798, 0.95872998, 0.95505601, 0.96191603, 0.96529299, 0.96912402, 0.93731099, 0.93858701, 0.91454297, 0.82513702, 0.72727299, 0.52201301, 0.46315801, 0.25, 0.23880599, 0.186667, 0.24324299, 0.091954, 0.16867501, 0.113924, 0.0649351, 0.0724638, 0.113924, 0.117647, 0.0729167, 0.0561798, 0.0487805, 0.0470588, 0.0980392, 0.0744681,
          0.170854, 0.194667, 0.143902, 0.19947501, 0.18338101, 0.27500001, 0.432071, 0.54545498, 0.46382201, 0.59259301, 0.77272701, 0.63888901, 0.73529398, 0.72000003, 0.8125, 0.90123498, 0.911111, 0.89166701, 0.9375, 0.98333299, 0.95986599, 0.98333299, 0.97791201, 0.98007202, 0.97627097, 0.98855001, 0.96304899, 0.96710497, 0.97652602, 0.92424202, 0.853333, 0.73529398, 0.68000001, 0.30000001, 0.30342999, 0.27611899, 0.25783101, 0.142857, 0.104895, 0.128609, 0.120205, 0.0943396, 0.177378, 0.128603, 0.1, 0.0906667, 0.0485933, 0.118568, 0.130435, 0.190476,
          0.1875, 0.26415101, 0.12987, 0.190476, 0.138889, 0.31578901, 0.5, 0.57471299, 0.57731998, 0.60674202, 0.71028, 0.71755701, 0.686391, 0.81094497, 0.84615397, 0.94131601, 0.94617498, 0.952097, 0.96153802, 1., 1., 0.98412699, 0.98795199, 0.982759, 0.97959203, 0.96551698, 0.986301, 1., 1., 0.86363602, 0.942191, 0.92201602, 0.616, 0.54545498, 0.33333299, 0.41791001, 0.37313399, 0.210526, 0.12963, 0.215385, 0.12963, 0.1875, 0.172414, 0.25, 0.137931, 0.0888889, 0.103448, 0.0875, 0.152778, 0.15555599,
          0.69381398, 0.2, 0.33333299, 0.2, 0.69381398, 0.69381398, 0.78091103, 0.625, 0.625, 0.79087901, 0.79747701, 0.83103299, 0.84171301, 0.85433197, 0.85439402, 0.87916201, 0.89029503, 0.88135898, 0.923087, 0.920187, 0.938173, 0.94264901, 0.94853097, 0.95078099, 0.952842, 0.94708002, 0.94585699, 0.94557601, 0.92184401, 0.908795, 0.87229598, 0.820889, 0.85433197, 0.67448902, 0.57142901, 0.5, 0.69570899, 0.29289499, 0.69381398, 0.33333299, 0.33333299, 0., 0.33333299, 0.25, 0.33333299, 0., 0., 0., 0., 0.
        };
        return etaprob_c[pos];
      } else if (eclRegion == 3) {
        const double etaprob_b[1200] = {
          0.0000264, 0.00002843, 0., 0.00003278, 0.0000707, 0.00003759, 0.00012105, 0.000132, 0.00004624, 0.00009971, 0.00016062, 0., 0.0000615, 0.00012863, 0.00013822, 0., 0.00007777, 0.00008473, 0.00009015, 0.00009464, 0.00020204, 0.00010722, 0.00011378, 0.00024752, 0.00013219, 0.00027816, 0.00029095, 0., 0., 0.00035829, 0.00018365, 0., 0., 0., 0., 0., 0., 0., 0., 0.00031114, 0., 0., 0., 0.0004065, 0., 0., 0., 0., 0., 0.,
          0.00014659, 0.0002245, 0.00007657, 0.00010473, 0.00002666, 0.00013968, 0.00002864, 0.00011885, 0.00015694, 0.00006582, 0.00010238, 0.00018064, 0.00015319, 0.00020077, 0.00008479, 0.00004599, 0.0002896, 0.0001047, 0.0002781, 0.00035438, 0.0003091, 0.0003958, 0.00098115, 0.00052715, 0.00070494, 0.00092874, 0.00072543, 0.00067366, 0.00059412, 0.00042822, 0.00011287, 0.00035847, 0.00075969, 0., 0.00057249, 0.00014972, 0., 0.00050008, 0., 0.00018553, 0., 0., 0.00022522, 0., 0.00024938, 0., 0., 0., 0., 0.,
          0.0001181, 0.00011923, 0.00019604, 0.00031869, 0.0000805, 0.00023861, 0.00024495, 0.00024234, 0.00016467, 0.00045528, 0.00037273, 0.00046822, 0.00042088, 0.00030266, 0.00051762, 0.00053385, 0.0008489, 0.00045787, 0.00033091, 0.00057745, 0.00070274, 0.00072198, 0.00094005, 0.00110632, 0.00150167, 0.00071441, 0.00170746, 0.0011818, 0.00110337, 0.00116874, 0.00085001, 0.00040287, 0.00068219, 0.00118939, 0.0007764, 0.00040984, 0.000429, 0.00022515, 0.00061065, 0.00038236, 0., 0.00041707, 0.00044863, 0.00047125, 0.00016835, 0., 0.0003686, 0., 0.00041195, 0.00022321,
          0.00080675, 0.00044173, 0.00081784, 0.00074488, 0.00036366, 0.00065057, 0.00057883, 0.00071597, 0.00057294, 0.00099736, 0.00092238, 0.00084276, 0.00063884, 0.00084051, 0.00113483, 0.00091414, 0.00153878, 0.00078797, 0.00099467, 0.00176143, 0.00221429, 0.00282527, 0.00258602, 0.0027933, 0.0036499, 0.00356877, 0.00307254, 0.00373274, 0.00278321, 0.00219232, 0.00252757, 0.00260273, 0.00208233, 0.0024321, 0.00169382, 0.0024419, 0.00069258, 0.00062206, 0.00100751, 0.00084866, 0.00110121, 0.00060508, 0.00021361, 0.00033374, 0.00046366, 0.00023969, 0.00025644, 0.00026649, 0.00027454, 0.00028769,
          0.0016835, 0.0019097, 0.00203832, 0.00176678, 0.00233709, 0.002035, 0.00200535, 0.00218818, 0.00107368, 0.00120595, 0.00186816, 0.00187291, 0.00226697, 0.00225914, 0.00118265, 0.0023678, 0.00333077, 0.00366347, 0.00493671, 0.00328324, 0.00544235, 0.00580821, 0.00592885, 0.00758801, 0.00814788, 0.00990467, 0.00982439, 0.00843577, 0.008856, 0.00769231, 0.00776149, 0.0068813, 0.0044226, 0.00469542, 0.00435703, 0.00271672, 0.00308718, 0.00211917, 0.00210006, 0.00150602, 0.00087217, 0.00167267, 0.00216947, 0.00062814, 0.00078514, 0.00117005, 0.00116234, 0.00052611, 0.00054355, 0.0006854,
          0.00168756, 0.00435941, 0.00351617, 0.00325885, 0.00405148, 0.00237473, 0.003663, 0.00297279, 0.00267977, 0.00431328, 0.00319125, 0.00330834, 0.0048341, 0.00608382, 0.00614574, 0.00568182, 0.00618648, 0.00827346, 0.0146995, 0.0111064, 0.0145494, 0.0154077, 0.0150533, 0.0244719, 0.0249896, 0.0239334, 0.0229885, 0.0238192, 0.0209605, 0.0168785, 0.0194095, 0.0155471, 0.0126837, 0.0106405, 0.00927981, 0.00911485, 0.00673267, 0.00398804, 0.00405927, 0.00175507, 0.00307882, 0.00175268, 0.00158072, 0.0018065, 0.0011919, 0.00095548, 0.00233599, 0.0007758, 0.00059524, 0.00079491,
          0.00938567, 0.00810701, 0.00729335, 0.00645651, 0.00341168, 0.00891819, 0.00622084, 0.00584112, 0.00536193, 0.00744048, 0.00817632, 0.00703235, 0.00987203, 0.0107565, 0.0109968, 0.0106724, 0.0121528, 0.0184552, 0.0140994, 0.0225389, 0.026636, 0.0397112, 0.0398954, 0.0377117, 0.0532248, 0.052843, 0.0517728, 0.0555199, 0.0513871, 0.0383166, 0.0339506, 0.029316, 0.0243826, 0.0193221, 0.0230326, 0.0147862, 0.0113489, 0.0126309, 0.00939555, 0.00654002, 0.00505952, 0.00315457, 0.00280374, 0.00246154, 0.00219161, 0.00152439, 0.00152346, 0.00236967, 0.00251335, 0.00146542,
          0.017067, 0.0141626, 0.0184086, 0.0170288, 0.0126506, 0.0149165, 0.0128362, 0.00952948, 0.00743282, 0.0109709, 0.0132641, 0.0144044, 0.0151176, 0.0149733, 0.0183861, 0.0208122, 0.0202224, 0.029813, 0.0299644, 0.0407555, 0.0477799, 0.0447504, 0.0758188, 0.0787224, 0.0924806, 0.0953807, 0.0990606, 0.082723, 0.0725875, 0.0638387, 0.072095, 0.0477861, 0.0425999, 0.0295858, 0.0228426, 0.0199491, 0.0196078, 0.0147441, 0.0107527, 0.00975817, 0.0066313, 0.00483304, 0.00569801, 0.00427899, 0.00293501, 0.00163733, 0.00456621, 0.00166875, 0.00124018, 0.00167364,
          0.0147314, 0.0183267, 0.0212264, 0.0269168, 0.0224551, 0.0213946, 0.0242187, 0.0243519, 0.019697, 0.0253968, 0.020658, 0.0242647, 0.0235562, 0.0242057, 0.0274648, 0.0281787, 0.0433287, 0.0465616, 0.0549898, 0.0672763, 0.0799736, 0.093199, 0.100451, 0.134027, 0.12766001, 0.15255199, 0.15252399, 0.166006, 0.115472, 0.107616, 0.0858006, 0.0798799, 0.056305, 0.0441621, 0.0458503, 0.023068, 0.0230024, 0.0198251, 0.010514, 0.0145096, 0.00932401, 0.00642148, 0.00453001, 0.00386313, 0.00631821, 0.0032591, 0.00326087, 0.00218938, 0.00268528, 0.00214823,
          0.0300334, 0.0319588, 0.022977, 0.0270563, 0.0324324, 0.0378378, 0.0330033, 0.0311558, 0.0423729, 0.035461, 0.0326198, 0.0364004, 0.0340206, 0.0364892, 0.0416667, 0.0497561, 0.0620821, 0.0793201, 0.0840951, 0.106047, 0.13242, 0.133936, 0.161777, 0.163752, 0.217546, 0.235835, 0.25692299, 0.217324, 0.184853, 0.162866, 0.138614, 0.109106, 0.0782828, 0.0587703, 0.0509499, 0.0306583, 0.028133, 0.0178571, 0.0148992, 0.0188849, 0.0083612, 0.00898473, 0.0121212, 0.00508906, 0.00841043, 0.00172265, 0.00989283, 0.0042735, 0.00336134, 0.00255102,
          0.0383333, 0.0477612, 0.0444126, 0.0676471, 0.0503817, 0.0381098, 0.0561457, 0.0582386, 0.044837, 0.0449927, 0.0503597, 0.0528455, 0.0691057, 0.0691004, 0.0840336, 0.0896739, 0.0993103, 0.102842, 0.142675, 0.16260201, 0.18811899, 0.232301, 0.31020001, 0.316443, 0.33456901, 0.35033101, 0.36717299, 0.341719, 0.27724901, 0.23799101, 0.225917, 0.15503, 0.111111, 0.0694087, 0.0536649, 0.0482399, 0.0375839, 0.0213618, 0.0227577, 0.0171731, 0.0149051, 0.00939597, 0.00650195, 0.00705219, 0.0103493, 0.0040107, 0.00848656, 0.00245098, 0.00132626, 0.00266312,
          0.0614035, 0.0608899, 0.0859031, 0.0900693, 0.0864979, 0.073913, 0.0774194, 0.0829787, 0.0911111, 0.0764463, 0.0924025, 0.120805, 0.0984683, 0.118, 0.130518, 0.144665, 0.173077, 0.210623, 0.21404099, 0.28476799, 0.314504, 0.36505699, 0.404199, 0.44458801, 0.465253, 0.50660801, 0.477193, 0.46614599, 0.38627201, 0.29323301, 0.219355, 0.18153401, 0.13740499, 0.0885312, 0.0679825, 0.0578358, 0.039749, 0.0246212, 0.0357143, 0.0231092, 0.0108932, 0.010917, 0.0172084, 0.0220264, 0.0087146, 0.00444444, 0.00833333, 0.00788955, 0.00603622, 0.0040404,
          0.117302, 0.0906149, 0.104762, 0.0875421, 0.101538, 0.114035, 0.145897, 0.127371, 0.138889, 0.103448, 0.16304301, 0.180473, 0.143243, 0.20316599, 0.202564, 0.23636401, 0.231738, 0.261574, 0.29662901, 0.36550301, 0.426716, 0.490334, 0.50827098, 0.54370397, 0.61983502, 0.61149102, 0.59002799, 0.526003, 0.46812099, 0.390057, 0.287411, 0.243108, 0.140541, 0.105978, 0.0789474, 0.0716418, 0.0434783, 0.0280374, 0.0339506, 0.0230548, 0.0253165, 0.00657895, 0.00892857, 0.012987, 0.0136054, 0.00554017, 0.00890208, 0.00847458, 0.0143678, 0.012012,
          0.158163, 0.162011, 0.13, 0.18367299, 0.124402, 0.134884, 0.179372, 0.2103, 0.17872301, 0.202479, 0.22173899, 0.227799, 0.221774, 0.229323, 0.253061, 0.29181501, 0.33333299, 0.37037, 0.39697, 0.47757301, 0.48387101, 0.56849301, 0.66967499, 0.67286801, 0.69533497, 0.70106202, 0.67350399, 0.58267701, 0.54739302, 0.404762, 0.31818199, 0.228916, 0.132231, 0.0929204, 0.0724638, 0.0720721, 0.037037, 0.0363636, 0.0536585, 0.00956938, 0.0167364, 0.0309735, 0.0176211, 0.0224215, 0.02, 0.0338983, 0.0246305, 0.0315315, 0.0168776, 0.,
          0.163265, 0.17791399, 0.201087, 0.183544, 0.170588, 0.25142899, 0.198864, 0.20224699, 0.205882, 0.27388501, 0.21311501, 0.32446799, 0.25628099, 0.29591799, 0.34975401, 0.358744, 0.413223, 0.48818901, 0.49128899, 0.53205103, 0.62015498, 0.67586201, 0.69102299, 0.76704502, 0.70862103, 0.77138197, 0.67382801, 0.65734297, 0.58469898, 0.45644599, 0.32178199, 0.212644, 0.140541, 0.0564103, 0.0833333, 0.0573248, 0.0807453, 0.0408163, 0.0210526, 0.0220994, 0.0506329, 0.0188679, 0.0182927, 0.0363636, 0.00598802, 0.00595238, 0.0273224, 0.0125786, 0.0387097, 0.0352941,
          0.165049, 0.21917801, 0.30769199, 0.28735599, 0.26744199, 0.31428599, 0.28972, 0.343137, 0.387097, 0.28037399, 0.297297, 0.365854, 0.39495799, 0.395349, 0.40251601, 0.48170701, 0.54014599, 0.61445802, 0.60106403, 0.696356, 0.743191, 0.75766897, 0.782857, 0.81642503, 0.84474897, 0.79054099, 0.77492899, 0.68858099, 0.67982501, 0.477707, 0.34814799, 0.297297, 0.151261, 0.0978261, 0.0561798, 0.0123457, 0.0804598, 0.0873786, 0.0526316, 0.0441176, 0.0555556, 0.0412371, 0.03125, 0.0315789, 0.0117647, 0.0246914, 0.029703, 0., 0.00970874, 0.00925926,
          0.25, 0.26470599, 0.285714, 0.45238101, 0.305556, 0.32432401, 0.285714, 0.32142901, 0.48888901, 0.38235301, 0.44898, 0.39215699, 0.51515198, 0.481013, 0.64197499, 0.60377401, 0.62626302, 0.68888903, 0.73793101, 0.83333302, 0.83957201, 0.86842102, 0.86476898, 0.869403, 0.87636399, 0.89056599, 0.86799997, 0.74193501, 0.67716497, 0.57575798, 0.39583299, 0.29545501, 0.0888889, 0.166667, 0.047619, 0.0697674, 0.0217391, 0.13953499, 0.103448, 0.0925926, 0., 0., 0.0285714, 0., 0.0754717, 0., 0., 0.0222222, 0.0212766, 0.0681818,
          0.26315799, 0.29616699, 0.34812301, 0.43959701, 0.343537, 0.42307699, 0.60000002, 0.46387801, 0.346154, 0.45931801, 0.33333299, 0.72727299, 0.52777803, 0.58823502, 0.65853697, 0.69230801, 0.693878, 0.809524, 0.859375, 0.81481498, 0.85714298, 0.91724098, 0.84105998, 0.930556, 0.90849698, 0.90506297, 0.94160599, 0.84465998, 0.77026999, 0.52777803, 0.23076899, 0.285714, 0.16967499, 0.130909, 0.0989399, 0.0594059, 0.0434783, 0., 0.107595, 0.0621302, 0., 0.0740741, 0.0658307, 0.0909091, 0.0454545, 0.025, 0.0689655, 0.0416667, 0.0308219, 0.05,
          0.36000001, 0.323232, 0.38999999, 0.39583299, 0.463918, 0.397163, 0.56310701, 0.44531301, 0.47826099, 0.45205501, 0.52803701, 0.54980099, 0.630705, 0.72932303, 0.77557802, 0.90476203, 0.95454502, 0.80000001, 0.93103498, 0.89999998, 0.875, 0.89583302, 0.932432, 0.98648602, 0.97701198, 0.94594598, 0.854545, 0.93181801, 0.96153802, 0.69999999, 0.57894701, 0.32592601, 0.33333299, 0.227723, 0.13235299, 0.148936, 0.0438596, 0.0449438, 0.0294118, 0.03, 0.0229008, 0.0392157, 0.0588235, 0.0495868, 0.0866142, 0.0294118, 0.0223881, 0.0526316, 0.130435, 0.0434783,
          0.375, 0.35714301, 0.23999999, 0.27272701, 0.36842099, 0.33333299, 0.409091, 0.55000001, 0.612903, 0.54347801, 0.61702102, 0.58823502, 0.63953501, 0.72222197, 0.87783998, 0.89779299, 0.88944602, 0.89014101, 0.91191798, 0.91290897, 0.91914499, 0.931216, 1., 1., 1., 0.95238101, 1., 0.83754498, 0.90672302, 0.90592599, 0.85964501, 0.66666698, 0.29032299, 0.33333299, 0.35294101, 0.2, 0.29411799, 0.0416667, 0., 0., 0., 0., 0., 0.0416667, 0.047619, 0.0434783, 0., 0.0689655, 0.111111, 0.0689655,
          0., 0., 0., 0., 0., 0., 0., 0.5, 0.49923, 0.73167199, 0.5, 0.57142901, 0.5, 0.85212898, 0.73544598, 0.84830898, 0.835796, 0.82850099, 0.77939999, 0.83929402, 0.895742, 0.86636901, 0.87785, 0.89041102, 0.89003301, 0.91579998, 0.890692, 0.85431802, 0.84250599, 0.74631, 0.816127, 0.375, 0.5, 0.33333299, 0.69381398, 0.5, 0.33333299, 0.2, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0.29289499, 0.29289499, 0.29289499, 0., 0., 0., 0.29289499, 0.29289499, 0.29289499, 0., 0.59175098, 0.64644599, 0.64644599, 0.64644599, 0.73273897, 0.776393, 0.76429701, 0.68377298, 0.59175098, 0.68377298, 0.71132499, 0.73273897, 0.59175098, 0.69570899, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0
        };
        return etaprob_b[pos];
      } else return Const::doubleNaN;
    }

    Manager::FunctionPtr BellePi0Veto(const std::vector<std::string>& arguments)
    {
      std::string photonListName = "gamma:mdst";
      if (arguments.size() == 1) photonListName = arguments[0];

      auto func = [photonListName](const Particle * particle) -> double {
        StoreObjPtr<ParticleList> photonList(photonListName);
        if (!(photonList.isValid()))
        {
          B2FATAL("Invalid photon list name " << photonListName << " given to BellePi0Veto!");
        }

        ROOT::Math::PxPyPzEVector particle4Vector = particle->get4Vector();
        unsigned int particleIndex = particle->getMdstArrayIndex();
        double temppi0 = Const::doubleNaN;

        for (unsigned int i = 0; i < photonList->getListSize(); i++)
        {
          const Particle* photon = photonList->getParticle(i);

          if (photon->getMdstArrayIndex() == particleIndex) continue;

          ROOT::Math::PxPyPzEVector Pi0 = particle4Vector + photon->get4Vector();

          double mass = Pi0.M();
          if (mass < 0.11 or mass > 0.15) continue;

          double pi0_prob = Pi0_Prob(mass, photon->getEnergy(), thetaInECLAcceptance(photon));
          if (temppi0 < pi0_prob) {
            temppi0 = pi0_prob;
          }
        }
        return temppi0;
      };
      return func;
    }

    Manager::FunctionPtr BelleEtaVeto(const std::vector<std::string>& arguments)
    {
      std::string photonListName = "gamma:mdst";
      if (arguments.size() == 1) photonListName = arguments[0];

      auto func = [photonListName](const Particle * particle) -> double {
        StoreObjPtr<ParticleList> photonList(photonListName);
        if (!(photonList.isValid()))
        {
          B2FATAL("Invalid photon list name " << photonListName << " given to BellePi0Veto!");
        }

        ROOT::Math::PxPyPzEVector particle4Vector = particle->get4Vector();
        unsigned int particleIndex = particle->getMdstArrayIndex();
        double tempeta = Const::doubleNaN;

        for (unsigned int i = 0; i < photonList->getListSize(); i++)
        {
          const Particle* photon = photonList->getParticle(i);

          if (photon->getMdstArrayIndex() == particleIndex) continue;

          ROOT::Math::PxPyPzEVector Eta = particle4Vector + photon->get4Vector();

          double mass = Eta.M();
          if (mass < 0.5 or mass > 0.58) continue;

          double eta_prob = Eta_Prob(mass, photon->getEnergy(), thetaInECLAcceptance(photon));
          if (tempeta < eta_prob) {
            tempeta = eta_prob;
          }
        }
        return tempeta;
      };
      return func;
    }

    VARIABLE_GROUP("Belle Variables");

    REGISTER_VARIABLE("goodBelleKshort", goodBelleKshort, R"DOC(
[Legacy] GoodKs Returns true if a :math:`K_{S}^0\to\pi\pi` candidate passes the Belle algorithm: 
a momentum-binned selection including requirements on impact parameter of, and
angle between the daughter pions as well as separation from the vertex and 
flight distance in the transverse plane.

.. seealso:: `BELLE2-NOTE-PH-2018-017 <https://docs.belle2.org/record/957>`_
)DOC");

    REGISTER_VARIABLE("goodBelleLambda", goodBelleLambda, R"DOC(
[Legacy] Returns 2.0, 1.0, 0.0 as an indication of goodness of :math:`\Lambda^0` candidates, 
based on:

* The distance of the two daughter tracks at their interception at z axis,
* the minimum distance of the daughter tracks and the IP in xy plane,
* the difference of the azimuthal angle of the vertex vector and the momentum vector,
* and the flight distance of the Lambda0 candidates in xy plane.

It reproduces the ``goodLambda()`` function in Belle.

``goodBelleLambda`` selection 1 (selected with: ``goodBelleLambda>0``) maximizes the signal significance after applying
``atcPIDBelle(4,2) > 0.6``, while ``goodBelleLambda`` selection 2 (``goodBelleLambda>1``) is tighter and maximizes the signal
significance of a :math:`\Lambda^0` sample without any proton PID cut. However, it might still be beneficial to apply a proton PID
cut on top of it. Which combination of proton PID cut and ``goodBelleLambda`` selection scenario is ideal, is probably
analysis-dependent.

.. warning:: ``goodBelleLambda`` is not optimized or tested on Belle II data.

See Also:
  * `BN-684`_ Lambda selection at Belle. K F Chen et al.
  * The ``FindLambda`` class can be found at ``/belle_legacy/findLambda/findLambda.h``

.. _BN-684: https://belle.kek.jp/secured/belle_note/gn684/bn684.ps.gz

)DOC");

    REGISTER_VARIABLE("goodBelleGamma", goodBelleGamma, R"DOC(
[Legacy] Returns 1.0 if the photon candidate passes the simple region dependent
energy selection for Belle data and MC.

.. math::

    E > 50 \textrm{ MeV; barrel}\\
    E > 100 \textrm{ MeV; forward endcap}\\
    E > 150 \textrm{ MeV; backward endcap}
)DOC");

    REGISTER_VARIABLE("BelleFirstCDCHitX", BelleFirstCDCHitX, R"DOC(
[Legacy] Returns x component of starting point of the track near the 1st SVD or CDC hit for SVD1 data (exp. 7 - 27) or the 1st CDC hit for SVD2 data (from exp. 31). (Belle only, originally stored in mdst_trk_fit.)

)DOC","cm");

    REGISTER_VARIABLE("BelleFirstCDCHitY", BelleFirstCDCHitY, R"DOC(
[Legacy] Returns y component of starting point of the track near the 1st SVD or CDC hit for SVD1 data (exp. 7 - 27) or the 1st CDC hit for SVD2 data (from exp. 31). (Belle only, originally stored in mdst_trk_fit.)

)DOC","cm");

    REGISTER_VARIABLE("BelleFirstCDCHitZ", BelleFirstCDCHitZ, R"DOC(
[Legacy] Returns z component of starting point of the track near the 1st SVD or CDC hit for SVD1 data (exp. 7 - 27) or the 1st CDC hit for SVD2 data (from exp. 31). (Belle only, originally stored in mdst_trk_fit.)

)DOC","cm");

    REGISTER_VARIABLE("BelleLastCDCHitX", BelleLastCDCHitX, R"DOC(
[Legacy] Returns x component of end point of the track near the last CDC hit. (Belle only, originally stored in mdst_trk_fit.)

)DOC","cm");

    REGISTER_VARIABLE("BelleLastCDCHitY", BelleLastCDCHitY, R"DOC(
[Legacy] Returns y component of end point of the track near the last CDC hit. (Belle only, originally stored in mdst_trk_fit.)

)DOC","cm");

    REGISTER_VARIABLE("BelleLastCDCHitZ", BelleLastCDCHitZ, R"DOC(
[Legacy] Returns z component of end point of the track near the last CDC hit. (Belle only, originally stored in mdst_trk_fit.)

)DOC","cm");

    REGISTER_VARIABLE("BellePi0SigM", BellePi0InvariantMassSignificance, R"DOC(
[Legacy] Returns the significance of the :math:`\pi^0` mass used in the FEI for B2BII.
The significance is calculated as the difference between the reconstructed and the nominal mass divided by the mass uncertainty:

.. math::
      \frac{m_{\gamma\gamma} - m_{\pi^0}^\textrm{PDG}}{\sigma_{m_{\gamma\gamma}}}

Since the :math:`\pi^0`'s covariance matrix for B2BII is empty, the latter is calculated using the photon daughters' covariance matrices.
      )DOC");

    REGISTER_VARIABLE("BelleTof", BelleTof, R"DOC(
[Legacy] Returns the time of flight of a track. (Belle only).

)DOC", "ns");

    REGISTER_VARIABLE("BelleTofQuality", BelleTofQuality, R"DOC(
[Legacy] Returns the quality flag of the time of flight of a track. Original description from the panther table:  0 if consistency between z of hit by charge Q and corrected times, 1 if zhit from Q NOT consistent with zhit from and correct times. (Belle only).
)DOC");

    REGISTER_VARIABLE("BelleTofSigma", BelleTofSigma, R"DOC(
[Legacy] Returns the expected resolution on the time of flight of a track. (Belle only).

)DOC", "ns");

    REGISTER_VARIABLE("BellePathLength", BellePathLength, R"DOC(
[Legacy] Returns the track path length. This is defined from the closest point to the z-axis up to TOF counter. (Belle only).

)DOC", "cm");

    REGISTER_VARIABLE("BelleTofMass", BelleTofMass, R"DOC(
[Legacy] Returns the TOF mass calculated from the time of flight and path length. (Belle only).
)DOC", "GeV/:math:`\\text{c}^2`");

    REGISTER_VARIABLE("BelledEdx", BelledEdx, R"DOC(
[Legacy] Returns the dE/dx measured in the CDC. (Belle only).

)DOC", "keV/cm");

    REGISTER_VARIABLE("BelledEdxQuality", BelledEdxQuality, R"DOC(
[Legacy] Returns the quality flag of the dE/dx measured in the CDC. Sadly no information about the code meaning is given in the original panther tables. (Belle only).
)DOC");

    REGISTER_VARIABLE("BelleACCnPe", BelleACCnPe, R"DOC(
[Legacy] Returns the number of photo-electrons associated to the track in the ACC. (Belle only).
)DOC");

    REGISTER_VARIABLE("BelleACCQuality", BelleACCQuality, R"DOC(
[Legacy] Returns the ACC quality flag. Original definition in the panther tables: if 0 normal, if 1 the track is out of ACC acceptance. (Belle only).
)DOC");

    REGISTER_METAVARIABLE("BellePi0Veto(photonlistname)", BellePi0Veto, "[Legacy] Pi0 prob for gamma", Manager::VariableDataType::c_double);
    REGISTER_METAVARIABLE("BelleEtaVeto(photonlistname)", BelleEtaVeto, "[Legacy] Eta prob for gamma", Manager::VariableDataType::c_double);


    // this is defined in ECLVariables.{h,cc}
    REGISTER_VARIABLE("clusterBelleQuality", eclClusterDeltaL, R"DOC(
[Legacy] Returns ECL cluster's quality indicating a good cluster in GSIM (stored in deltaL of ECL cluster object).
Belle analysis typically used clusters with quality == 0 in their :math:`E_{\text{extra ECL}}` (Belle only).
)DOC");
  }
}
