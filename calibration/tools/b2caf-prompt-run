#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Essentially just a CAF setup -> run -> post-process script.
This tool is to be used by the prompt calibration automation system and
by developers testing their scripts for it.

It basically takes a few config files (or optionally input arguments) as 
input in order to do the CAF and input data setup.
It then runs a CAF process by finding the correct module in the current release's
calibration/scripts/prompt/calibrations directory and running all calibrations returned
by its `get_calibrations` function.

To test a new prompt calibration script it is recommended to place it in this
directory to check if this tool can correctly use it.
"""
import ROOT
ROOT.PyConfig.IgnoreCommandLineOptions = True


import basf2
from basf2 import B2ERROR, B2INFO, B2WARNING
import json
from pathlib import Path

from caf.utils import IoV

default_collection_heartbeat = 60
default_max_files_per_collector_job = 1

from prompt import prompt_script_package


def get_input_data(args):
    """Path to input data json file, used to find input files for the CAF job.
Also to create the IoV for each run so the calibrations can use it if necessary.

Note that the input data json file should have the form:

  {"hlt_mumu": [["/path/to/run/hlt_mumu_2trk/raw", [8, 1977]], ... ]
   "hlt_hadron": [["/path/to/run/hlt_hadron/raw", [8, 1977]], ...]
  }

where the key is the same as the one used by the calibrations to set the input files.
The experiment and run numbers are also required."""


    input_data_path = Path(args.input_data)
    if not input_data_path.is_file():
        raise FileNotFoundError(f"The file {input_data_path.as_posix()} does not exist")
    with open(input_data_path, 'r') as input_data_file:
        input_data = json.load(input_data_file)

    # Use Pathlib to glob the root files beneath the input paths
    input_data_files = {}
    for input_name, run_list in input_data.items():
        B2INFO(f"Gathering files for '{input_name}' from {input_data_path.as_posix()}")
        file_to_iov = {}
        for run_path, exp_run in run_list:
            file_list = [p.as_posix() for p in Path(run_path).glob("**/*.root")]
            for file_path in file_list:
                file_to_iov[file_path] = IoV(exp_low=exp_run[0], run_low=exp_run[1], exp_high=exp_run[0], run_high=exp_run[1])
        B2INFO(f"Found {len(file_to_iov)} files in '{input_name}'")
        if not file_to_iov:
            B2ERROR("'{input_name}' has no files associated with it!")
        input_data_files[input_name] = file_to_iov
    return input_data_files


def setup_caf(args, input_data_files, prompt_caf):
    """Path to config json file, used to set up the CAF and calibrations used 
in this CAF process.

Required keys = "caf_script" (str), "database_chain" array[str], "backend_args" dict, "output_iov" array[4](int)
"""

    caf_config_path = Path(args.caf_config)
    if not caf_config_path.is_file():
        raise FileNotFoundError(f"The file {caf_config_path.as_posix()} does not exist")
    with open(caf_config_path, 'r') as caf_config_file:
        caf_config = json.load(caf_config_file)

    import importlib
    cal_module = importlib.import_module(prompt_script_package + caf_config["caf_script"].rstrip(".py"))

    # Check if our input data contains at least all of the names required by the calibration script
    required_input_data_names = cal_module.requirements.input_data_names
    if not required_input_data_names.issubset(frozenset(input_data_files.keys())):
        error_message = (f"The input data does not contain all of the required input names.\n"
                         f"Required: {sorted(cal_module.input_data_names)}\n"
                         f"Input:    {sorted(input_data_files.keys())}")
        raise KeyError(error_message)

    calibrations = cal_module.get_calibrations(input_data_files, output_iov=IoV(*caf_config["output_iov"]))

    from caf import backends
    prompt_caf_backend = backends.LSF()

    for cal in calibrations:
        B2INFO(f"Applying prompt settings to Calibration(name={cal.name})")
        # Reset the default values (and any attempts to configure the values in imported module) of database chain
        # and backend_args
        for col_name, collection in cal.collections.items():
            B2INFO(f"Applying prompt settings to Collection(name={col_name})")
            if col_name == cal.default_collection_name and len(cal.collections) > 1 and not collection.input_files:
                B2INFO("This appears to be a default Collection with no input files.")
                B2INFO("Settings will be applied but it will likely be removed prior to the CAF process beginning.")
            collection.reset_database()
            for global_tag in caf_config["database_chain"]:
                collection.use_central_database(global_tag)
            collection.backend_args = caf_config["backend_args"]
            collection.max_files_per_collector_job = args.files_per_job
        # Heartbeat should be chosen by us, not the calibration setup function
        cal.heartbeat = default_collection_heartbeat
        # Backend should be chosen by us, not the calibration setup function
        cal.backend = prompt_caf_backend
        # Add the final Calibration object to the CAF
        B2INFO(f"Adding Calibration(name={col_name}) to CAF process")
        prompt_caf.add_calibration(cal)


def run_caf(prompt_caf):
    """Actually runs the CAF and checks the final state"""
    prompt_caf.run()
    print("End of CAF processing.")
    print("Checking for failures...")
    for calibration in prompt_caf.calibrations.values():
        if calibration.state == 'failed':
            raise RuntimeError(f"{calibration.name} failed!")


def collect_outputdb(prompt_caf):
    """Some post processing to copy the final local DBs into one directory"""
    import shutil
    outputdb_name = "caf_outputdb_results"
    outputdb_path = Path(outputdb_name)
    outputdb_path.mkdir(parents=True)
    print(f"Will now copy the calibration final outputdb directories to '{outputdb_path.as_posix()}'")
    for calibration in prompt_caf.calibrations.values():
        print(f"Will now copy final outputdb of {calibration.name}")
        cal_outputdb_path = Path(calibration.machine.root_dir, "outputdb")
        new_outputdb_path = Path(outputdb_path, calibration.name)
        shutil.copytree(cal_outputdb_path.as_posix(), new_outputdb_path.as_posix())


def get_argparser():
    """Setup the argparser for this command line tool"""
    import argparse
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("caf_config", help=setup_caf.__doc__)
    parser.add_argument("input_data", help=get_input_data.__doc__)
    parser.add_argument("--files-per-job", dest="files_per_job", metavar="",
                        type=int, default=default_max_files_per_collector_job,
                        help="Sets the number of input files that wil be used per collector job for all calibrations"
                             f" (default={default_max_files_per_collector_job})"
                       )
    parser.add_argument("--dry-run", dest="dry_run", action="store_true",
                        help="Flags if the CAF process should be set up but not run. "
                             "Good for testing to prevent lots of jobs being submitted."
                       )
    parser.set_defaults(dry_run=False)

    return parser


def main():
    parser = get_argparser()
    args = parser.parse_args()
    # Do the input data load
    try:
        input_data = get_input_data(args)
    except FileNotFoundError as e:
        B2ERROR(str(e))
        return e.errno
    if not input_data:
        B2ERROR("The input data dictionary is completely empty!")
        return 1
    
    # Create the CAF object and get the calibrations all set up
    from caf.framework import CAF
    cal_fw = CAF()
    # Apply CAF settings and get the calibrations to process
    try: 
        setup_caf(args, input_data, cal_fw)
    except FileNotFoundError as e:
        B2ERROR(str(e))
        return e.errno
    except KeyError as e:
        B2ERROR(e.args[0])
        return 1

    if not args.dry_run:
        run_caf(cal_fw)
        collect_outputdb(cal_fw)

if __name__ == "__main__":
    import sys
    sys.exit(main())
