#!/usr/bin/env python3

##########################################################################
# basf2 (Belle II Analysis Software Framework)                           #
# Author: The Belle II Collaboration                                     #
#                                                                        #
# See git log for contributors and copyright holders.                    #
# This file is licensed under LGPL-3.0, see LICENSE.md.                  #
##########################################################################

"""
This tool is used to run validation scripts. This has to be run after a CAF as it requires the input and output
directories. It will be used by the prompt calibration automation system and by developers testing their prompt scripts.

It basically takes a config files as input, which defines the script, path to CAF job output directory, path to the 
input data file. It then runs a validation job by finding the correct script in the current release's
``calibration/scripts/prompt/validation`` directory and executing its ``run_validation`` function.

To test a new prompt validation script it is recommended to place it in the correct
directory to check if this tool can use it.
"""

import ROOT
ROOT.PyConfig.IgnoreCommandLineOptions = True

import basf2
from basf2 import B2ERROR, B2INFO, B2WARNING, B2FATAL
import json
import importlib
from pathlib import Path
import shutil
import os 

from caf.utils import IoV
from caf import backends
from caf import cli
from caf.backends import Local, Job, monitor_jobs

from prompt import prompt_validation_script_package, prompt_validation_script_dir

default_collection_heartbeat = 60

def get_validation_config(args):
    validation_config_path = Path(args.validation_config)
    if not validation_config_path.is_file():
        raise FileNotFoundError(f"The file {validation_config_path.as_posix()} does not exist")
    with open(validation_config_path) as validation_config_file:
        validation_config = json.load(validation_config_file)
    return validation_config

def get_validation_module(args):
    validation_config = get_validation_config(args)
    module_name = prompt_validation_script_package + Path(validation_config["validation_script"]).stem
    try:
        validation_module = importlib.import_module(module_name)
    except ModuleNotFoundError:
        B2ERROR(f"Couldn't import {module_name}")
        return 1
    return validation_module

def get_files(args):
    validation_config = get_validation_config(args)
    validation_module = get_validation_module(args)       

    job_path = validation_config.get('job_path', "")
    download_files_json = validation_config.get('download_files', "")

    # Get the list of files to download from Settings and input JSON
    download_paths = {} 
    files_to_download = validation_module.settings.download_files
    for file in download_files_json:
        files_to_download.append(file)

    for file in files_to_download:
        path_to_files = [] 
        for path in Path(job_path).rglob(file):
            path_to_files.append(path)
        download_paths[file] = path_to_files
    
    current_directory = Path().absolute()
    download_files_path = Path(current_directory, 'validation_results', 'download_files')
    try:
        download_files_path.mkdir(parents=True)
    except FileExistsError as e:
        B2WARNING(f"Download file directory '{download_files_path.as_posix()}' exists.")
        if args.overwrite_workdir:
            B2INFO(f"Removing '{download_files_path.as_posix()}'...")
            shutil.rmtree(download_files_path)
            download_files_path.mkdir(parents=True)
        else:
            B2FATAL("Cannot overwrite download directory")
    B2INFO(f"Will now copy the requested files from the CAF output to '{download_files_path.as_posix()}'")
    print()
    for file_name, file_paths in download_paths.items():
        for file_path in file_paths:
            if len(file_paths) == 1:
                B2INFO(f"Copying {file_name} to {download_files_path}")
                shutil.copyfile(file_path, Path(download_files_path, file_name))
            else:
                B2INFO(f"Multiple copies of {file_name} files exist, will retrieve files with directory tree included")
                file_path_str = str(file_path)
                file_suffix = file_path_str[file_path_str.find('calibration_results'):]
                dl_file_path = Path(file_suffix).relative_to('calibration_results')
                new_download_file_path = download_files_path.joinpath(dl_file_path).parent 
                new_download_file_path.mkdir(parents=True, exist_ok=True)
                shutil.copyfile(file_path, Path(new_download_file_path, file_name))


def create_validation_jobs(args):
    """Creates a Job object that runs the validation script with the correct inputs from the config JSON file and ValidationSettings

Required format of JSON file:

.. code-block:: python

    {
     "validation_script": (str),
     "job_path" (str),
     "input_data_path" (str), <- Optional 
     "download_files" list(str) <- Optional 
     "backend_args" dict,     <- Optional as the backend default values and/or values in the prompt script will be used otherwise
     "requested_iov" array[4](int), <- Optional 
     "expert_config" dict     <- Optional as the prompt script default will be used if this isn't set here.
    }

The backend_args dictionary will be used to set up the `caf.backends.Backend` class and overrides the defaults of that class.
If you set backend options via the command line e.g. ``--queue l``, then this will override backend_args values in this JSON
file. Individual `caf.framework.Collection` objects can also override these options by setting them. So the final priority order
is (lowest -> highest): [Backend.default_backend_args -> validation_config.json
-> b2val-prompt-run command line options]
"""
    validation_config = get_validation_config(args)
    validation_module = get_validation_module(args)       
    current_directory = Path().absolute()
    script_name = validation_config["validation_script"]
    script_path = basf2.find_file(f'{prompt_validation_script_dir}/{script_name}')

    # Now we set the backend that will be used globally.
    backend_args = validation_config.get("backend_args", None)
    backend = args.func(args, backend_args=backend_args)
    B2INFO(f"Default CAF backend_args: {backend}")

    B2INFO("Getting values for 'expert_config' from the prompt script.")
    expert_config = validation_module.settings.expert_config   # set to be the default from the script
    # If we have values in the validation_config we merge/overwrite with the default
    if not expert_config:
        # In case expert_config is None or False
        B2INFO("'expert_config' from the prompt script is not set")
        expert_config = {} 
        
    try:
        B2INFO("Overwriting values in 'expert_config' by using the values from the config JSON file.")
        expert_config = {**expert_config, **validation_config.get("expert_config", {})}
    except:
        B2ERROR("Expert config must be a dictionary! E.g. {'my_var': 42}")
        exit() 
        
    if "requested_iov" in validation_config:
        # Overwrite/merge the default Validation Settings with JSON
        if isinstance(validation_config["requested_iov"], list):
            if len(validation_config["requested_iov"]) != 4:
                B2ERROR('request_iov list must have 4 elements! E.g. [10,0,10,300]')
                exit() 
            else:
                requested_iov = validation_config.get("requested_iov")
        else:
            B2ERROR("requested_iov must be a list! E.g. [10,0,10,300]") 
            exit() 
    else:
        requested_iov = None
        
    job_path = validation_config.get('job_path', None)
    input_data_path=validation_config.get('input_data_path', None)
    
    validation_result_path = Path(current_directory, 'validation_results', 'validations')
    
    try:
        validation_result_path.mkdir(parents=True)
    except FileExistsError as e:
        B2WARNING(f"Validation result directory '{validation_result_path.as_posix()}' exists.")
        if args.overwrite_workdir:
            B2INFO(f"Removing '{validation_result_path.as_posix()}'...")
            shutil.rmtree(validation_result_path)
            validation_result_path.mkdir(parents=True)
        else:
            B2FATAL("Cannot overwrite validation result directory")

    job = Job(name=validation_module.settings.name)
    # Working directory that will be sent to the backend and used as the current working directory
    job.working_dir = validation_result_path
    # Output directory, where the stdout and stderr will be sent.
    job.output_dir = validation_result_path
    # The command we want to run
    job.cmd = ["basf2", f"{script_path}", f"{job_path} {input_data_path} '{requested_iov}' '{json.dumps(expert_config)}'"]
    job.append_current_basf2_setup_cmds()
    return [job]


def get_argparser():
    """Setup the argparser for this command line tool"""
    import argparse
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, epilog="Type b2val-prompt-run <backend> --help to see the full options for each backend")
    subparsers = cli.add_backends_subparsers(parser)

    for subparser in subparsers:
        subparser.add_argument("validation_config", help=create_validation_jobs.__doc__)

        cli.add_basf2_options(subparser)
        cli.add_monitor_options(subparser, default_heartbeat=default_collection_heartbeat)
        cli.add_job_options(subparser)

        subparser.add_argument("--overwrite-working-dir", dest="overwrite_workdir", action="store_true",
                            help="Flags if the tool should delete the validation working directory before "
                                 "beginning the processing. This will delete the previous results! Only use if you want a clean "
                                 "start from the beginning again!"
                           )

        subparser.set_defaults(overwrite_workdir=False)

    return parser


def main():
    parser = get_argparser()
    args = parser.parse_args()
    basf2.set_log_level(basf2.LogLevel.names[args.log_level])
    if args.debug_level:
        basf2.set_log_level(basf2.LogLevel.DEBUG)  # Override
        basf2.set_debug_level(args.debug_level)
    # Do the input data load and run validation
    get_files(args)
    job = create_validation_jobs(args)
    backend = args.func(args)
    backend.submit(job)
    monitor_jobs(args, job)
    if isinstance(backend, Local):
        backend.join()

if __name__ == "__main__":
    import sys
    sys.exit(main())
