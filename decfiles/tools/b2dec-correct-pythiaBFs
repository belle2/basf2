#!/usr/bin/env python3

##########################################################################
# basf2 (Belle II Analysis Software Framework)                           #
# Author: The Belle II Collaboration                                     #
#                                                                        #
# See git log for contributors and copyright holders.                    #
# This file is licensed under LGPL-3.0, see LICENSE.md.                  #
##########################################################################

"""
Helper script that reads the decay file and saves a new decay file where the automatically
created hadronic B meson decay modes (pythia/jetset) are rescaled such that the total B meson
BF is compatible with 1 (up to a certain precision, at the moment of this script creation O~1e-7)
"""

import basf2
import argparse
import os
import sys

def arg_parser():

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-i', '--input',
                        default=basf2.find_file('decfiles/dec/DECAY_BELLE2.DEC'),
                        help='input file path',
                        metavar='FILE')
    parser.add_argument('-o', '--output',
                        default='DECAY_BELLE2.COR',
                        help='output file path',
                        metavar='FILE')
    return parser


if __name__ == '__main__':
 
    args = arg_parser().parse_args()
    filepath = args.input
    outpath = args.output

    Balldecs = {'B+': [], 'B-': [], 'B0': [], 'anti-B0': []}
    Bdecs = {'B+': [], 'B-': [], 'B0': [], 'anti-B0': []}

    BtotBF = {'B+': 0., 'B-': 0., 'B0': 0., 'anti-B0': 0.}
    Btohadtotdecs = {'B+': 0., 'B-':  0., 'B0':  0., 'anti-B0': 0.}
    jetsetscale = {'B+': 0., 'B-': 0., 'B0': 0., 'anti-B0': 0.}
    togglesave = ''

    with open(filepath) as f:
        line = f.readline()
        cnt = 1
        while line:
            if "Decay B+" in line and line[0]!='#':
                togglesave = 'B+'
            if "Decay B-" in line and line[0]!='#':
                togglesave = 'B-'
            if "Decay B0" in line and line[0]!='#':
                togglesave = 'B0'
            if "Decay anti-B0" in line and line[0]!='#':
                togglesave = 'anti-B0'

            if "Enddecay" in line:
                togglesave = ''

            if togglesave:
                if(line[0] != '#' and line[0:5] != 'Decay' and line != '\n'):
                    Bdecs[togglesave].append(line)

            line = f.readline()
            cnt += 1

    basf2.B2INFO(len(Bdecs['B+']))
    basf2.B2INFO(len(Bdecs['B-']))
    basf2.B2INFO(len(Bdecs['B0']))
    basf2.B2INFO(len(Bdecs['anti-B0']))

    for keys, vals in Bdecs.items():
        basf2.B2INFO(f'Processing decays of {keys}')
        for string in vals:
            BtotBF[keys] += float(string.split()[0])
            if('u' == string.split()[1] or 'anti-u' == string.split()[1]
                    or 'd' == string.split()[1] or 'anti-d' == string.split()[1]
                    or 's' == string.split()[1] or 'anti-s' == string.split()[1]
                    or 'c' == string.split()[1] or 'anti-c' == string.split()[1]
                    or 'cd' in string.split()[1] or 'anti-cd' in string.split()[1]
                    or 'cs' in string.split()[1] or 'anti-cs' in string.split()[1]):
                Btohadtotdecs[keys] += float(string.split()[0])

    for keys, vals in Btohadtotdecs.items():
        jetsetscale[keys] = (1-((BtotBF[keys]-1)/Btohadtotdecs[keys]))

    basf2.B2INFO("the jetset scaling factors are: ")
    basf2.B2INFO(jetsetscale)

    with open(filepath) as f:
        with open(outpath, "w+") as outf:
            line = f.readline()
            cnt = 1
            while line:
                if "Decay B+" in line and line[0]!='#':
                    togglesave = 'B+'
                if "Decay B-" in line and line[0]!='#':
                    togglesave = 'B-'
                if "Decay B0" in line and line[0]!='#':
                    togglesave = 'B0'
                if "Decay anti-B0" in line and line[0]!='#':
                    togglesave = 'anti-B0'

                if "Enddecay" in line:
                    togglesave = ''

                if togglesave:
                    if(line[0] != '#' and line[0:5] != 'Decay' and line != '\n'):
                        if('u' == line.split()[1] or 'anti-u' == line.split()[1]
                                or 'd' == line.split()[1] or 'anti-d' == line.split()[1]
                                or 's' == line.split()[1] or 'anti-s' == line.split()[1]
                                or 'c' == line.split()[1] or 'anti-c' == line.split()[1]
                                or 'cd' in line.split()[1] or 'anti-cd' in line.split()[1]
                                or 'cs' in line.split()[1] or 'anti-cs' in line.split()[1]):
                            bfstr = f'{float(line.split()[0]) * jetsetscale[togglesave]:.8f}    '
                            bfstr += (line.split(None, 1)[-1])
                            outf.write(bfstr)
                        else:
                            outf.write(line)
                    else:
                        outf.write(line)
                else:
                    outf.write(line)

                line = f.readline()
                cnt += 1
        basf2.B2INFO('sucessfully rescaled decay file to '+outpath)
        outf.close()
