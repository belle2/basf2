diff --git a/analysis/modules/RemoveParticlesNotInLists/include/RemoveParticlesNotInLists.h b/analysis/modules/RemoveParticlesNotInLists/include/RemoveParticlesNotInLists.h
index 8ba11dba3..1c36d672a 100644
--- a/analysis/modules/RemoveParticlesNotInLists/include/RemoveParticlesNotInLists.h
+++ b/analysis/modules/RemoveParticlesNotInLists/include/RemoveParticlesNotInLists.h
@@ -52,6 +52,7 @@ namespace Belle2 {
   private:
     StoreArray<Particle> m_particles; /**< StoreArray of Particles */
     std::vector<std::string>  m_particleLists; /**< keep Particles and daughters in these lists. */
+    bool m_includeAntiPlists; /**< keep Particles from the anti-ParticleLists of the given ParticleLists. */
     ParticleSubset m_subset; /**< reduces the Particles array. */
     unsigned long m_nRemoved; /**< number of particles removed. */
     unsigned long m_nTotal; /**< number of particles before removal. */
diff --git a/analysis/modules/RemoveParticlesNotInLists/src/RemoveParticlesNotInLists.cc b/analysis/modules/RemoveParticlesNotInLists/src/RemoveParticlesNotInLists.cc
index 8fd459efe..1ba12f25b 100644
--- a/analysis/modules/RemoveParticlesNotInLists/src/RemoveParticlesNotInLists.cc
+++ b/analysis/modules/RemoveParticlesNotInLists/src/RemoveParticlesNotInLists.cc
@@ -24,6 +24,7 @@ RemoveParticlesNotInListsModule::RemoveParticlesNotInListsModule(): m_nRemoved(0
   setPropertyFlags(c_ParallelProcessingCertified);
 
   addParam("particleLists", m_particleLists, "Keep the Particles and their daughters in these ParticleLists.");
+  addParam("includeAntiPlists", m_includeAntiPlists, "Also keep Particles from the anti-ParticleLists of the given ParticleLists.", false);
 }
 
 void RemoveParticlesNotInListsModule::initialize()
@@ -40,7 +41,7 @@ void RemoveParticlesNotInListsModule::event()
 {
   const int nBefore = m_particles.getEntries();
 
-  m_subset.removeParticlesNotInLists(m_particleLists);
+  m_subset.removeParticlesNotInLists(m_particleLists, m_includeAntiPlists);
 
   const int nAfter = m_particles.getEntries();
 
diff --git a/analysis/utility/include/ParticleSubset.h b/analysis/utility/include/ParticleSubset.h
index 5113fc6e0..1fa3a8a86 100644
--- a/analysis/utility/include/ParticleSubset.h
+++ b/analysis/utility/include/ParticleSubset.h
@@ -21,7 +21,7 @@ namespace Belle2 {
      *
      * Removal is done immediately, there is no need to call select() afterwards.
      */
-    void removeParticlesNotInLists(const std::vector<std::string>& listNames);
+    void removeParticlesNotInLists(const std::vector<std::string>& listNames, const bool includeAntiPlists = false);
 
     /** select Particles for which f returns true, discard others */
     void select(std::function<bool (const Particle*)> f)
diff --git a/analysis/utility/src/ParticleSubset.cc b/analysis/utility/src/ParticleSubset.cc
index 208951ff3..822011ad7 100644
--- a/analysis/utility/src/ParticleSubset.cc
+++ b/analysis/utility/src/ParticleSubset.cc
@@ -25,7 +25,7 @@ namespace {
   }
 }
 
-void ParticleSubset::removeParticlesNotInLists(const std::vector<std::string>& listNames)
+void ParticleSubset::removeParticlesNotInLists(const std::vector<std::string>& listNames, const bool includeAntiPlists)
 {
   std::unordered_set<int> indicesToKeep;
   for (const auto& l : listNames) {
@@ -43,6 +43,27 @@ void ParticleSubset::removeParticlesNotInLists(const std::vector<std::string>& l
       B2ERROR("ParticleList " << l << " uses Particle array '" << list->getParticleCollectionName() <<
               "', but ParticleSubset uses different array '" << m_set->getName() << "'!");
     }
+
+    if (includeAntiPlists) {
+      const auto& antiListName = list->getAntiParticleListName();
+      if (antiListName.empty())
+        continue;
+      StoreObjPtr<ParticleList> antiList(antiListName);
+
+      if (!antiList)
+        continue;
+
+      if (antiList->getParticleCollectionName() == m_set->getName()) {
+        const int n = antiList->getListSize();
+        for (int i = 0; i < n; i++) {
+          const Particle* p = antiList->getParticle(i);
+          keepParticle(p, &indicesToKeep);
+        }
+      } else {
+        B2ERROR("AntiParticleList " << antiListName << " uses Particle array '" << antiList->getParticleCollectionName() <<
+                "', but ParticleSubset uses different array '" << m_set->getName() << "'!");
+      }
+    }
   }
 
   //remove everything not in indicesToKeep
diff --git a/framework/modules/rootio/SConscript b/framework/modules/rootio/SConscript
index ae0c7f409..466271997 100644
--- a/framework/modules/rootio/SConscript
+++ b/framework/modules/rootio/SConscript
@@ -1,6 +1,6 @@
 Import('env')
 
 env.AppendUnique(CCFLAGS=["-fvisibility=hidden"])
-env['LIBS'] = ['framework', 'framework_io']
+env['LIBS'] = ['framework', 'framework_io', 'analysis_DecayDescriptor']
 
 Return('env')
diff --git a/framework/modules/rootio/include/RootOutputModule.h b/framework/modules/rootio/include/RootOutputModule.h
index b73c35021..fff354d45 100644
--- a/framework/modules/rootio/include/RootOutputModule.h
+++ b/framework/modules/rootio/include/RootOutputModule.h
@@ -111,6 +111,12 @@ namespace Belle2 {
      */
     std::vector<std::string> m_branchNames[DataStore::c_NDurabilityTypes];
 
+    /** Flag to include anti-particles in the output.
+     *
+     *  This flag is steerable.
+     */
+    bool m_includeAntiPlists;
+
     /** Array of names of branches that should be written out although they are not flagged for writeout.
      *  And usually ignored, use to writeout RestOfEvent.
      */
diff --git a/framework/modules/rootio/src/RootOutputModule.cc b/framework/modules/rootio/src/RootOutputModule.cc
index 1def95737..e972a78ea 100644
--- a/framework/modules/rootio/src/RootOutputModule.cc
+++ b/framework/modules/rootio/src/RootOutputModule.cc
@@ -8,6 +8,8 @@
 
 #include <boost/python.hpp>
 
+#include <analysis/DecayDescriptor/ParticleListName.h>
+
 #include <framework/modules/rootio/RootOutputModule.h>
 
 #include <framework/io/RootIOUtilities.h>
@@ -126,6 +128,7 @@ Warning:
 
 .. versionadded:: release-03-00-00
 )DOC", m_outputSplitSize);
+  addParam("includeAntiPlists", m_includeAntiPlists, "Include anti particle lists in the output", false);
 
   m_outputFileMetaData = new FileMetaData;
 }
@@ -167,6 +170,30 @@ void RootOutputModule::initialize()
       m_regularFile = false;
     }
   }
+
+  // add anti particle lists to the list of branches to be saved
+  if (m_includeAntiPlists) {
+    std::vector<std::string> antiParticleLists;
+    for (auto branchName : m_branchNames[0]) {
+      if (branchName.find(":") == std::string::npos) continue;
+      string antiListName = ParticleListName::antiParticleListName(branchName);
+      if (!antiListName.empty()) {
+        antiParticleLists.push_back(antiListName);  
+      }
+    }
+    m_branchNames[0].insert(m_branchNames[0].end(), antiParticleLists.begin(), antiParticleLists.end());
+    
+    std::vector<std::string> exAntiParticleLists;
+    for (auto exBranchName : m_excludeBranchNames[0]) {
+      if (exBranchName.find(":") == std::string::npos) continue;
+      string exAntiListName = ParticleListName::antiParticleListName(exBranchName);
+      if (!exAntiListName.empty()) {
+        exAntiParticleLists.push_back(exAntiListName);  
+      }
+    }
+    m_excludeBranchNames[0].insert(m_excludeBranchNames[0].end(), exAntiParticleLists.begin(), exAntiParticleLists.end());
+  }
+
   openFile();
 }
 
