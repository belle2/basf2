#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""\
This tool reads the given conditions objects from the database and writes them
to a TTree. Intra run dependencies are not supported.

For example the command

  b2conditionsdb-extract --exp 5 --runs 1-3,12 BeamParameters

will create a root file with a Tree containing the beam parameters of the runs
1, 2, 3, and 12 of experiment 5. The branch BeamParameters_valid contains 1 if
the beam parameters are available for the given run and 0 if not.
The following command plots the x position of the beam spot after opening the
conditions.root file in root:

  conditions->Draw("BeamParameters.m_vertex.x():run", "BeamParameters_valid", "*")

"""

from basf2 import *
from ROOT import Belle2
from ROOT import PyConfig
PyConfig.IgnoreCommandLineOptions = True
PyConfig.StartGuiThread = False
import ROOT
from array import array
import argparse


class Condition:
    """This class contains the data related to a conditions object."""

    def __init__(self, condition):
        if '/' in condition:
            self.name, className = condition.split('/')
        else:
            self.name = className = condition
        try:
            eval('Belle2.%s.Class()' % className)
            self.className = 'Belle2.%s' % className
        except:
            self.className = 'ROOT.%s' % className
        self.valid = array('i', [0])
        self.obj = ROOT.TObject()
        self.dbObj = Belle2.PyDBObj(self.name, eval('%s.Class()' % self.className))


class ConditionsTreeModule(Module):
    """This module writes conditions to a TTree."""

    def initialize(self):
        self.eventMetaData = Belle2.PyStoreObj("EventMetaData")

    def beginRun(self):
        run[0] = self.eventMetaData.getRun()
        B2INFO("run %s" % run[0])

        for condition in conditions:
            if condition.dbObj.isValid():
                condition.valid[0] = True
                condition.obj = condition.dbObj.obj()
            else:
                condition.valid[0] = False
        tree.Fill()


parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)
parser.add_argument("--output", "-o", default="conditions.root", type=str,
                    help="output file containing the TTree of conditions")
parser.add_argument("--tag", "-t", type=str,
                    help="global tag")
parser.add_argument("--exp", "-e", type=int, required=True,
                    help="experiment number")
parser.add_argument("--runs", type=str, required=True,
                    help="run numbers, ranges are given as X-Y, multiple runs or ranges are separated by comma")
parser.add_argument("condition", type=str, nargs='+',
                    help="payload identifier, if the type is not equal to the name it has to be appended after a /")
args = parser.parse_args()

# setup database if a tag is given
if args.tag:
    reset_database()
    use_database_chain()
    for tag in args.tag.split(':'):
        if tag.endswith('.txt'):
            use_local_database(tag)
        else:
            use_central_database(tag)

# parse runs argument
runs = []
for runentry in args.runs.split(','):
    if '-' in runentry:
        firstrun, lastrun = runentry.split('-')
        runs += list(range(int(firstrun), int(lastrun) + 1))
    else:
        runs.append(int(runentry))
runs = sorted(list(set(runs)))

# get conditions from command line
conditions = []
for condition in args.condition:
    conditions.append(Condition(condition))

# cretae root file, tree, and branches for the run numnber and the conditions
rootFile = ROOT.TFile(args.output, 'RECREATE')
tree = ROOT.TTree('conditions', 'Conditions data for experiment %d' % args.exp)
run = array('i', [0])
tree.Branch('run', run, 'run/I')
for condition in conditions:
    tree.Branch(condition.name + '_valid', condition.valid, condition.name + '_valid/I')
    condition.obj = eval('%s()' % condition.className)
    tree.Branch(condition.name, condition.obj)


# run over the given run ranges and write the conditions to the TTree
main = create_path()
main.add_module('EventInfoSetter', expList=[args.exp] * len(runs), runList=runs, evtNumList=[1] * len(runs))
main.add_module(ConditionsTreeModule())
process(main)


tree.Write()
rootFile.Close()
