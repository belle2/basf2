#!/usr/bin/env python3

##########################################################################
# basf2 (Belle II Analysis Software Framework)                           #
# Author: The Belle II Collaboration                                     #
#                                                                        #
# See git log for contributors and copyright holders.                    #
# This file is licensed under LGPL-3.0, see LICENSE.md.                  #
##########################################################################

"""\
This tool determines the recommended set of global tags.
"""

import basf2
from ROOT import PyConfig
PyConfig.IgnoreCommandLineOptions = True
PyConfig.StartGuiThread = False
import basf2.version
import argparse
import os
import subprocess
import json
from versioning import recommended_global_tags_v2


def create_argumentparser():
    """Create an argument parser with all defined arguments"""
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument("input_file", type=str, nargs='?',
                        help="Input file that should be processed. No input file means MC generation.")
    parser.add_argument("--oneline", default=False, action='store_true',
                        help="Prints the recommended global tags as a one-liner string.")
    return parser


if __name__ == "__main__":
    args = create_argumentparser().parse_args()

    metadata = None
    base_tags = basf2.conditions.default_globaltags

    # get metadata and base_tags from input file
    if args.input_file:
        if not os.path.isfile(args.input_file):
            basf2.B2FATAL("No input file %s" % args.input_file)
        process = subprocess.Popen(['b2file-metadata-show', '--json', args.input_file], stdout=subprocess.PIPE)
        out = process.communicate()[0]
        if process.returncode != 0:
            basf2.B2FATAL("Could not get metadata from file %s" % args.input_file)
        metadata = [json.loads(out)]
        base_tags = metadata[0]['globalTag'].split()

    # get recommendation
    result = recommended_global_tags_v2(basf2.version.get_version(), base_tags, None, metadata)

    # print result
    if result and result['tags']:
        if not args.oneline:
            print('The recommended global tags are:\n')
            print('  ' + ' '.join(result['tags']) + '\n')
            if result['message']:
                print('Your global tag manager (mgt-global-tag@belle2.org) tells you:\n')
                print(result['message'])
        else:
            print(' '.join(result['tags']))
    else:
        basf2.B2ERROR("No recommended global tag found")
