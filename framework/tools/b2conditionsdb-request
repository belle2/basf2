#!/usr/bin/env python3

##########################################################################
# basf2 (Belle II Analysis Software Framework)                           #
# Author: The Belle II Collaboration                                     #
#                                                                        #
# See git log for contributors and copyright holders.                    #
# This file is licensed under LGPL-3.0, see LICENSE.md.                  #
##########################################################################

"""Tool to request an update of a global tag.

The tool will ask for the information required by the global tag manager
for the update or take them from the command line options.
"""

import sys
import os
import datetime
import argparse
import requests
import getpass
import readline  # wraps `input()` to have gnu readline functionality
from terminal_utils import InputEditor, ANSIColors
from conditions_db import ConditionsDB


def ask_new(data):
    """Request information in case of new payload classes"""

    data['task'] = 'main'
    data['request'] = 'New'
    if input('\nIs the code for the new payload already in the main branch (y/n) [n]? ').lower() in ['n', '']:
        data['pull-request'] = input('\nPlease give the number of the pull request that contains the new payload classes: ')


def ask_modify(data):
    """Request information in case of modified payload classes"""

    data['task'] = 'main'
    data['request'] = 'Modification'
    data['pull-request'] = input('\nPlease give the number of the pull request that contains the modified payload classes: ')
    data['backward-compatibility'] = input('\nWhat happens if the old payload is encountered by the updated code? ')
    data['forward-compatibility'] = input('\nWhat happens if a new payload is encountered by the existing code? ')


def get_argument_parser():
    """
    Return an ArgumentParser with all defined arguments
    """

    # Specify the possible arguments
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('--task', type=str, default=None,
                        choices=['main', 'new', 'modify', 'validation', 'online', 'prompt', 'data', 'mc', 'analysis'],
                        help="""Type of global tag that should be updated.
                                Use new/modify if the request contains new/modified payload classes.""")
    normalize_group = parser.add_mutually_exclusive_group()
    normalize_group.add_argument('--normalize', dest="normalize", default=False, action="store_true",
                                 help="Normalize the payload files to have reproducible checksums. "
                                 "This option should only be used if the payload files were created "
                                 "with an older software version (before release-04)")
    normalize_group.add_argument('--normalize-name', type=str,
                                 help="Set the file name in the root file metadata to the given value. "
                                 "This implicitly enables ``--normalize`` and should only be used if "
                                 "the payload files were created with an older software version (before release-04)")
    parser.add_argument('--release', type=str,
                        help='Required release version')
    parser.add_argument('--reason', type=str,
                        help='Reason for the request')
    details_group = parser.add_mutually_exclusive_group()
    details_group.add_argument('--details', type=str,
                               help='Detailed instructions/information for the global tag manager')
    details_group.add_argument('--details-file', type=str,
                               help='File containing detailed instructions/information for the global tag manager')
    parser.add_argument('--issue', type=str, default=None,
                        help='Identifier of an existing jira issue for the request')
    auth_group = parser.add_mutually_exclusive_group()
    auth_group.add_argument('--password', type=str,
                            help='Password to authenticate the request')
    auth_group.add_argument('--oauth', default=False, action='store_true',
                            help='Authenticate via oauth. '
                            'This is should only be used for automated updates running within the DAQ network.')
    parser.add_argument('--confirm', default=False, action='store_true',
                        help='Confirm that the given information is correct and that the payloads should be uploaded')
    parser.add_argument('payloads', help='Name of the testing payload storage file')
    return parser


if __name__ == "__main__":
    # parse arguments
    args = get_argument_parser().parse_args()
    payloadsFile = args.payloads

    # check whether the testing payload storage file exist
    if not os.path.isfile(payloadsFile):
        sys.stderr.write('ERROR: The testing payload storage file %s does not exist.\n' % (payloadsFile))
        sys.exit(1)

    # get testing payload storage content
    data = {}
    data['content'] = open(payloadsFile).read()
    if not args.confirm:
        print('The content of the testing payload storage file %s is:' % payloadsFile)
        print(data['content'])
        print('If you want to select a subset, quit now and create a new testing payload storage file with the desired subset of IoVs.')
        if input('- Continue (y/n) [y]? ').lower() not in ['y', '']:
            sys.exit(0)

    # normalize files?
    normalize = args.normalize_name if args.normalize_name is not None else args.normalize
    if normalize is False and not args.confirm:
        normalize = input('\nShould the payload root files be normalized (y/n) [n]? ').lower() in ['y']
        if normalize:
            normalize_filename = input('\nEnter the file name in the payload root file metadata if that should be normalized or '
                                       'press enter to not change it []? ')
            if normalize_filename:
                normalize = normalize_filename

    # type of global tag request
    if args.task:
        if args.task == 'new':
            ask_new(data)
        elif args.task == 'modify':
            ask_modify(data)
        else:
            data['task'] = args.task
            data['request'] = 'Update'
    else:
        if input('\nDoes the request contain new or modified payloads classes (y/n) [n]? ').lower() in ['n', '']:
            data['request'] = 'Update'
            print('\nFor which type of global tags is the request, ma[i]n, [v]alidation, [o]nline, [p]rompt, [d]ata, [m]c, or [a]nalysis?')
            while True:
                task = input('i/o/p/d/m/a: ').lower()
                if task in ['i', 'v', 'o', 'p', 'd', 'm', 'a']:
                    break
            data['task'] = {'i': 'main', 'v': 'validation', 'o': 'online', 'p': 'prompt', 'd': 'data', 'm': 'mc', 'a': 'analysis'}[task]
        else:
            if input('\nDo payloads of the given names already exist, but the class definition has changed (y/n) [n]? ').lower() in ['n', '']:
                ask_new(data)
            else:
                ask_modify(data)
            # if there are new or modified payloads they first have to go to main
            data['task'] = 'main'

    # release and reason
    data['release'] = args.release or input('\nThe new payloads require at least the following software release: ')
    data['reason'] = args.reason or input('\nPlease describe the reason for the request: ')

    # detailed instructions
    if args.details:
        data['details'] = args.details
    elif args.details_file:
        data['details'] = open(args.details_file).read()
    else:
        # For this multiline input, offer option to use temporary editor
        if input(f"\nUse editor (e) or command line (c) for entering detailed instructions for the global tag manager? [e] ").lower() != "c":
            input_editor = InputEditor(commentlines_start_with="#")
            # define initial comment for the temporary input file to guide the user
            editor_help_comment = (
                "\n# Enter detailed instructions for the global tag manager.\n"
                "# Lines starting with `#` will be ignored.\n"
                f"# Currently in editor: {input_editor.get_editor_command()}.\n"
                "# When finished, save and quit."
            )
            if input_editor.editor_command_list[0] in ['vi', 'vim']:
                editor_help_comment += "\n# If in vim: Use :wq to save and quit or :q! to discard changes."
            input_editor.initial_content = editor_help_comment
            data['details'] = input_editor.input()
        else:
            print("Input detailed instructions in command line and hit CTRL-D to finish")
            data['details'] = sys.stdin.readlines()

    # if this is an online globaltag update request, provide additional details
    if data['task'] == 'online':
        # For this multiline input, offer option to use temporary editor
        if input(f"\nUse editor (e) or command line (c) for entering detailed information about the impact of this online globaltag update request on the data taking conditions or the relevant changes to monitor on DQM histograms? [e] ").lower() != "c":
            input_editor = InputEditor(commentlines_start_with="#")
            # define initial comment for the temporary input file to guide the user
            editor_help_comment = (
                "\n# Enter detailed information about the impact of this online globaltag update request "
                "on the data taking or detector conditions or about the relevant changes to monitor "
                "on DQM histograms.\n"
                "# Lines starting with `#` will be ignored.\n"
                f"# Currently in editor: {input_editor.get_editor_command()}.\n"
                "# When finished, save and quit."
            )
            if input_editor.editor_command_list[0] in ['vi', 'vim']:
                editor_help_comment += "\n# If in vim: Use :wq to save and quit or :q! to discard changes."
            input_editor.initial_content = editor_help_comment
            data['data_taking'] = input_editor.input()
        else:
            print("Input detailed information about the impact of this online globaltag request in command line and hit CTRL-D to finish")
            data['data_taking'] = sys.stdin.readlines()

    # issue and time
    if data['task'] == 'main':
        if args.issue is not None:
            print(f'\n{ANSIColors.fg("red")}You requested an update of the main globaltag, but you passed an existing jira issue ({args.issue}): this will be ignored and a new issue will be created and automatically assigned to the TUPPR manager{ANSIColors.reset()}')
        data['issue'] = None
    else:
        data['issue'] = args.issue or input('\nIdentifier of existing jira issue, leave empty to take default: ')
    data['time'] = datetime.datetime.utcnow().strftime('%Y%m%d-%H%M%S')

    # summarize request and ask for confirmation
    if not args.confirm:
        main_info = ""
        if data['request'] != 'Update':
            main_info = f"  -> {data['request']}: "
            main_info += f"PR #{data['pull-request']}" if 'pull-request' in data.keys() else "already in main"
        print(f"""\nSUMMARY:
Payloads file       : {payloadsFile}
Normalize payloads  : {normalize}
Type of global tag  : {data['task']}{main_info}
Required release    : {data['release']}
Request reason      : {data['reason']}
Details:""")
        print(''.join(data['details']))
        if data['task'] == 'online':
            print("Online impact:\n" + ''.join(data['data_taking']))
        if data['issue']:
            print(f"Jira issue          : {data['issue']}")
        if input('\n- Is the above information correct (y/n) [n]? ').lower() != 'y':
            sys.exit(0)

    data['user'] = os.environ['BELLE2_USER']
    password = args.password
    if args.oauth and password:
        password = password.split()
        if len(password) != 2:
            sys.stderr.write('ERROR: The password has to be the access token and secret separated by a space in case of oauth.\n')
            sys.exit(1)
    if not password and not args.oauth:
        while True:
            username = input('\nConfirm your DESY user name by pressing enter or type the correct one [%s]: ' % data['user'])
            if username != '':
                data['user'] = username
            password = getpass.getpass("\nPlease give your DESY password to authenticate the request: ")
            response = requests.get('https://software.belle2.org', auth=(data['user'], password))
            if response.status_code == 401:
                print('Authorization failed. Please try again.')
            else:
                break

    # upload to staging global tags and create/update jira issue
    db = ConditionsDB()
    db.set_authentication("commonDBUser", "Eil9ohphoo2quot")
    if not db.staging_request(payloadsFile, normalize, data, password):
        sys.exit(1)