#!/usr/bin/env python3

##########################################################################
# basf2 (Belle II Analysis Software Framework)                           #
# Author: The Belle II Collaboration                                     #
#                                                                        #
# See git log for contributors and copyright holders.                    #
# This file is licensed under LGPL-3.0, see LICENSE.md.                  #
##########################################################################

"""\
Check a given basf2 root file for problems. This program checks a given output root file for the following problems

* File is readable (``file_readable``)
* File contains event and persistent trees (``contains_tree``, ``contains_persistent``)
* Event tree contains event meta data (``eventmetadata_readable``)
* Persistent tree contains file metadata (``filemetadata_readable``)
* All entries in persistent and event trees are readable (``all_entries_readable``)
* Number of entries in event tree == number of events in file metadata (``entries_eq_filemetadata``)
* Number of entries in event tree == expected_no_of_events, if given (``entries_eq_expectation``)
* Number of MC events generated == expected_no_of_mcevents, if given (``mcevents_eq_expectation``)
* If the expected size is given:
    abs(total_file_size/(#events*expected_event_size) - 1) < relative_uncertainty (``eventsize_eq_expectation``)
* If branches are given: Event tree contains the given branches (``branches_present``)

It returns 0 if all checks succeeded, 1 otherwise. Details about check failures are printed on standard output.
"""
# TODO: (check_basf2_log?)
# - If log is give: Grep for suspicious messages like Fatal, segmentation
# fault, etc. [although this should be caught by the basf2 return code.]


import ROOT
import sys
import os
import argparse
import json
from contextlib import redirect_stdout
from ROOT import PyConfig
PyConfig.IgnoreCommandLineOptions = True


def get_argument_parser():
    """Return argument parser with all defined arguments"""
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument("-n", "--events", type=int, dest='expected_no_of_events', default=None,
                        help="Expected number of events")
    parser.add_argument("--mcevents", type=int, dest='expected_no_of_mcevents', default=None,
                        help="Expected number of generated events")
    parser.add_argument("-s", "--size", type=float, dest='expected_event_size',
                        metavar=('EXPECTED_EVENT_SIZE_KIB', 'RELATIVE_UNCERTAINTY'), default=None, nargs=2,
                        help=("Expected size per event (KiB), with maximal relative uncertainty. Check is passed when "
                              "abs(total_file_size/(#events*expected_event_size) - 1) < relative_uncertainty"))
    parser.add_argument("--json", action='store_true', dest='json_output', default=False,
                        help=("Provide dictionary of passed checks and file statistics in JSON format on standard output.  "
                              "Checks are only included when actually run, and receive a boolean value indicating success."))
    parser.add_argument("FILE", type=str, help="The basf2 .root file to check. http:// and root:// URLs are also supported.")
    parser.add_argument("BRANCH", type=str, nargs='*', help="Branches that should exist in the event durability tree.")
    return parser


def read_tree(tree):
    """
    try reading all events in TTree tree. return false if an entry cannot be read
    """
    for entry in range(tree.GetEntries()):
        if tree.GetEntry(entry, 1) <= 0:
            print('Failed to read entry %d in "%s"! (no further entries will be checked.)' % (entry, tree.GetName()))
            return False
    return True


def checkFile(args):
    """
    Runs checks on given filename, returns dictionaries with passed checks
    and file statistics.
    """
    checks_passed = dict()
    stats = dict()
    root_file = ROOT.TFile.Open(args.FILE)

    checks_passed['file_readable'] = bool(root_file) and root_file.IsOpen()
    if not checks_passed['file_readable']:
        return checks_passed, stats
    try:
        stats['compression_algorithm'] = root_file.GetCompressionAlgorithm()
        stats['compression_level'] = root_file.GetCompressionLevel()
        stats['compression_factor'] = root_file.GetCompressionFactor()
        size_kib = root_file.GetSize() / 1024.0
        stats['filesize_kib'] = size_kib

        checks_passed['contains_tree'] = False
        tree = root_file.Get('tree')
        if tree:
            nevents = tree.GetEntries()
            checks_passed['contains_tree'] = True
            stats['events'] = nevents

        persistent = root_file.Get('persistent')
        checks_passed['contains_persistent'] = bool(persistent)

        checks_passed['filemetadata_readable'] = False
        if persistent.GetEntry(0) > 0:
            filemetadata = persistent.FileMetaData.Clone()
            nevents_metadata = filemetadata.getNEvents()
            checks_passed['filemetadata_readable'] = True

            checks_passed['entries_eq_filemetedata'] = nevents_metadata == nevents

            mcevents = filemetadata.getMcEvents()
            stats['mcevents'] = mcevents
            if args.expected_no_of_mcevents is not None:
                checks_passed['mcevents_eq_expectation'] = mcevents == args.expected_no_of_mcevents
                if not checks_passed['mcevents_eq_expectation']:
                    print('Expected %d MC events, but file contains %d!' % (args.expected_no_of_mcevents, mcevents))

        if args.expected_no_of_events is not None:
            checks_passed['entries_eq_expectation'] = nevents == args.expected_no_of_events
            if not checks_passed['entries_eq_expectation']:
                print('Expected %d events, but file contains %d!' % (args.expected_no_of_events, nevents))

        if args.BRANCH:
            checks_passed['branches_present'] = all([tree.GetBranch(b) for b in args.BRANCH])

        if nevents == 0:
            print('File contains zero events')
            stats['events_without_errorflag'] = 0
            if args.expected_event_size is not None:
                checks_passed['eventsize_eq_expectation'] = False
            return checks_passed, stats

        checks_passed['eventmetadata_readable'] = False
        if tree.GetEntry(0) > 0:
            eventmetadata = tree.EventMetaData.Clone()
            eventmetadata.getEvent()
            checks_passed['eventmetadata_readable'] = True
            del eventmetadata

        size_kib_per_event = size_kib / nevents
        stats['size_per_event_kib'] = size_kib_per_event
        if args.expected_event_size is not None:
            exp_size_kib, rel_uncertainty = args.expected_event_size
            dev = abs(size_kib_per_event / exp_size_kib - 1)
            checks_passed['eventsize_eq_expectation'] = dev < rel_uncertainty
            if not checks_passed['eventsize_eq_expectation']:
                print(f'Size per event ({size_kib_per_event:g} kiB) differs from expectation (deviation: {dev:g} >= {rel_uncertainty:g})')

        checks_passed['all_entries_readable'] = read_tree(tree) and read_tree(persistent)

        # Get number of events which do not have the errorFlag set.
        stats['events_without_errorflag'] = tree.GetEntries("EventMetaData.m_errorFlag == 0")
        if stats['events_without_errorflag'] != 0:
            stats['size_per_event_without_errorflag_kib'] = size_kib / stats['events_without_errorflag']

    except BaseException:
        # at least one of the checks should have failed
        assert not all(checks_passed.values())

    return checks_passed, stats


if __name__ == "__main__":
    args = get_argument_parser().parse_args()
    if args.json_output:
        # suppress other things on standard output
        with redirect_stdout(open(os.devnull, 'w')):
            checks_passed, stats = checkFile(args)
        print(json.dumps({'checks_passed': checks_passed, 'stats': stats}, sort_keys=True, indent=2))
    else:
        checks_passed, stats = checkFile(args)

    checks_failed = [c for (c, ok) in checks_passed.items() if not ok]
    if not args.json_output:
        if checks_failed:
            print('The following checks FAILED: ' + ' '.join(checks_failed))

    if checks_failed:
        sys.exit(1)
