#!/usr/bin/env python3

"""
Utility to search for decfiles which include given decay string.

NOTE : Currently this script only work on full release but not light release, since there is not the decfile directory.
       Charge conjugate mode could not be found if it is not explicitly written.
       Sub-decay is not supported. 
       Decay including additional daughters cannot be distinguished, e.g. 'B+ -> K+ e+ e-' matches to 'B+ -> K+ pi0 e+ e-', too.
"""

import sys
import os
import argparse
from ROOT import PyConfig
PyConfig.IgnoreCommandLineOptions = True


def get_argument_parser():
    """Return an argument parser to parse all arguments"""
    parser = argparse.ArgumentParser(description=__doc__,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument("decay_string", type=str,
                        help="Decay string to search for the EventType and decfiles. \
                              Please use single-/double-quotation to give a decay sting (e.g. 'B+ -> K+ e+ e-'). \
			      Otherwise, an arrow (->) is recognized as redirection.")
    return parser


if __name__ == "__main__":
    parser = get_argument_parser()
    args = parser.parse_args()

    from ROOT import Belle2
    d = Belle2.DecayDescriptor()
    if not d.init(args.decay_string):
        print("Invalid decay string")
        sys.exit(1)

    import subprocess
    import pdg
    import re

    release_dir = ''
    if 'BELLE2_RELEASE_DIR' in os.environ:
        release_dir = os.environ['BELLE2_RELEASE_DIR']
    if 'BELLE2_LOCAL_DIR' in os.environ:
        release_dir = os.environ['BELLE2_LOCAL_DIR']

    mother_name = d.getMother().getName()

    proc_mother = subprocess.run(['grep', '-rl', 'Decay '+re.escape(mother_name), release_dir+'/decfiles/dec/'],
                                 stdout=subprocess.PIPE)
    output_mother = proc_mother.stdout.decode('utf8')
    matched_list = output_mother.split('\n')
    
    n_daughters = d.getNDaughters()
    for i in range(n_daughters):

        daughter_name = d.getDaughter(i).getMother().getName()

        proc_daughter = subprocess.run(['grep', '-rl', re.escape(daughter_name), release_dir+'/decfiles/dec/'],
                                       stdout=subprocess.PIPE)    
        output_daughter = proc_daughter.stdout.decode('utf8')

        matched_list_daughter = output_daughter.split('\n')

        new_list = []
        for line in matched_list:
            if line in matched_list_daughter:
                new_list.append(line)

        matched_list = new_list

    for line in matched_list:
        print(line)

