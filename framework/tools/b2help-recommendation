#!/usr/bin/env python3

##########################################################################
# basf2 (Belle II Analysis Software Framework)                           #
# Author: The Belle II Collaboration                                     #
#                                                                        #
# See git log for contributors and copyright holders.                    #
# This file is licensed under LGPL-3.0, see LICENSE.md.                  #
##########################################################################

"""
Get a summary of recommendations for analysis tools.
"""

import json
import argparse
import requests
import sys

import conditions_db
import basf2 as b2


class Tool:
    """
    Analysis tool information.
    """

    def __init__(self, name, tags=None, description="", recommendation=None, snippet=""):
        self.name = name
        self.tags = tags if tags else []
        self.description = description
        self.recommendation = recommendation if recommendation else {}
        self.snippet = snippet

    def to_json(self):
        return {
            "name": self.name,
            "tags": self.tags,
            "description": self.description,
            "recommendation": self.recommendation,
            "snippet": self.snippet,
        }


def load_data(filename):
    """
    load a local json file.
    """
    with open(filename, 'r') as file:
        data = json.load(file)
        return [Tool(**tool_data) for tool_data in data]


def load_data_url(url):
    """
    load a json file from url.
    """
    text = requests.get(url).text
    data = json.loads(text)
    return [Tool(**tool_data) for tool_data in data]


def display_tool_info(tool):
    """
    display a tool's information.
    """
    print(f"Tool: {tool.name}")
    print(f"  Tags: {', '.join(tool.tags)}")
    print(f"  Description: {tool.description}")

    recommendation = "\n".join([f"    {key}: {value}" for key, value in tool.recommendation.items()])
    print(f"  Recommendation:\n{recommendation}")

    print(f"  Snippet:\n\n{tool.snippet}")

    print()


def get_available_tags(tools):
    """
    get all available tags.
    """
    tags = set()
    for tool in tools:
        tags.update(tool.tags)
    return tags


def convert_json_to_payload(localfile='', payload=''):

    from ROOT import Belle2

    iov = Belle2.IntervalOfValidity.always()
    db = Belle2.Database.Instance()
    db.addPayload(payload, localfile, iov)


def main():

    parser = argparse.ArgumentParser(description="Tool recommendation information")
    parser.add_argument("--tags", help="Filter tools by specific tags. The 'all' tag allows to show all information.",
                        nargs='+', default=None)
    parser.add_argument("--globaltag", help="Global tag name, if one wants to check another recommendation",
                        default='user_yosato_recommendations')  # temporal
    parser.add_argument("--payload", help="Payload name, if one wants to check another recommendation",
                        default='recommendation_payload')  # temporal
    parser.add_argument("--localfile", help="If one wants to check a json file locally.", default=None)
    parser.add_argument("--convert", help="For developers. Convert the localfile to a payload.", action='store_true')

    args = parser.parse_args()

    if args.convert:
        b2.B2INFO("Convert the localfile to a payload")

        if args.localfile is None:
            b2.B2ERROR("The localfile is not provided!")
            sys.exit(1)
        else:
            convert_json_to_payload(args.localfile, args.payload)
            sys.exit(0)

    if args.localfile is None:
        gt_name = args.globaltag
        payload_name = args.payload

        cdb = conditions_db.ConditionsDB()
        payload = None
        for p in cdb.get_all_iovs(gt_name, 0, 0, f", name={payload_name}"):
            if p.name == payload_name and (payload is None or p.revision > payload.revision):
                payload = p

        if payload is None:
            print("Recommendation information is not found")
            return
        else:
            tools = load_data_url(payload.url)

    else:
        tools = load_data(args.localfile)

    if args.tags is None:
        print("Available Tags:")

        available_tags = get_available_tags(tools)
        for tag in available_tags:
            print(f"  - {tag}")

        print("\nYou can check all information with the 'all' tag.")

    elif 'all' in args.tags:
        for tool in tools:
            display_tool_info(tool)

    else:
        for tool in tools:
            if all(tag in tool.tags for tag in args.tags):
                display_tool_info(tool)


if __name__ == "__main__":
    main()
