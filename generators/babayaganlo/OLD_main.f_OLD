      program main
! written by CMCC, last modified 5/3/2006
      implicit double precision (a-h,o-z)
      integer*8 npoints,k,naccepted,iwriteout
      parameter (mph=40)
      real*4 csi(1)
      dimension sump(0:mph-1),sum2p(0:mph-1)
      dimension fractions(0:mph-1)
      dimension xsecp(0:mph-1),varp(0:mph-1)
      dimension pin(0:3),p1(0:3),p2(0:3),qph(mph,0:3),q(0:3),qcut(0:3)
      dimension qphcut(mph,0:3)
      dimension pin1(0:3),pin2(0:3),ptmp(0:3),pbeam1(0:3),pbeam2(0:3)
      dimension pbeam1p(0:3),pbeam2p(0:3),p1lab(0:3),p2lab(0:3)
      dimension p1b(0:3),p2b(0:3),p12lab(0:3)
      dimension dir(3)
      dimension p1cut(0:3),p2cut(0:3),pcm(0:3)
      integer isvec(25)
      common/rlxstatus/isvec
      character*6   ord
      character*10  model
      character*100 outfile,storefile
      character*3   eventlimiter,store
      common/beforesort/p1o(0:3),p2o(0:3),qpho(40,0:3)
      common/testsdebug/elmat2cmn,e2approx,s12,s34,t24,t13,u14,u23
      common/debug2/p1mod,odv
      common/eg_branchsampling/ibranch
*** filled in the subroutine userinterface
      character*2 fs
      common/finalstate/fs
      common/ecms/ecms,ecmsnom
      common/nphot_mode/nphotmode
      common/expcuts/thmin,thmax,emin,zmax,egmin,thgmin,thgmax
      common/zparameters/zm,gz,ve,ae,rv,ra,wm,s2th,gfermi,sqrt2,um
      common/epssoft/eps
      common/energiabeam/ebeam
      common/parameters/ame,ammu,convfac,alpha,pi
      common/intinput/iwriteout,iseed,nsearch,iverbose
      common/qedORDER/ord
      common/charinput/model,eventlimiter,store,storefile,outfile
      common/realinput/anpoints,sdifmax
      common/nmaxphalpha/nphmaxalpha

      character*100 vpuncout
      common/vpuncfile/vpuncout

      common/ialpharunning/iarun
      common/teubner/iteubn
      common/nskvp/inskvp

      common/idebugging/idebug
      common/regolatori/regulator1,regulator2
*********************************************
      common/ggreg/ipair
      common/coseni/cmax,cmin ! these now are in the cm frame, beware of beam energy spread!
      common/channelref/iref
      common/momentainitial/pin1,pin2
      common/radpattern/nph(4)
      common/forborncrosssection/phsp2b,flux2b,bornme,bornmeq2,bornmez,
     > bornmenovp
      common/reducedtoborn/p1b,p2b
      common/samplelimits/spmin,omaxext
      common/various/beta,betafs
      common/for_debug/ppp(0:3),denphsp,dir3(0:3),dir4(0:3),br,bq,onm
      common/enableifirst/ifrstenbld
      common/tmintmax/tmin,tmax,tcur
      common/weightwcos/wcos ! to be depurated in phasespaceNEW
      
      common/idarkon/idarkon
      common/darkmatter/amassU,gammaU,gvectU,gaxU

      common/rescaledhaderr/scal_err_dhad
      common/beamspreadsigmas/esig1,esig2
      dimension immloc(1)

      dimension iswvperr(3),iswvperrt(6)
      common/iswitchvperror/iswvperr,iswvperrt

      parameter (nvps = 26)
      dimension sumv(nvps),sum2v(nvps)
      dimension xsecv(nvps),varv(nvps),diffv(nvps)
      dimension remtx(nvps)
      common/rationsvpunc/remtx,invp

      parameter (nvpst = 728)
      dimension sumvt(nvpst),sum2vt(nvpst)
      dimension xsecvt(nvpst),varvt(nvpst),diffvt(nvpst)
      dimension remtxt(nvpst)
      integer ist(nvpst,6)
      common/rationsvpunct/remtxt,invpt,ist
      
      irepeat = 0

      call userinterface

** [[begin initialization]]
      if (idarkon.eq.1) then
        if (gammaU.lt.0.) then
          gammaU=gammafunc(amassU,gvectU)
        endif
        if (amassU.eq.0.) then
          amassU=1.d-13
        endif
        gvectU=gvectU*sqrt(4.*pi*alpha)
        gaxU=gaxU*sqrt(4.*pi*alpha)
        call init_apar
      endif

      idebug = 0

      ecmsnom = ecms

      call getcmaxmin(cmax,cmin)
      
      E1 = ecmsnom * 0.5d0
      b1 = sqrt(1.d0 - ame**2/E1/E1)
      bmin = sqrt(1.d0 - ame**2/emin/emin)
      tmin = 2.d0*E1**2*(1.d0-b1**2*cmin)
      tmin = 2.d0*ame*ame - tmin
      tmax = 2.d0*E1*emin*(1.d0-b1*bmin*cmax)
      tmax = 2.d0*ame*ame - tmax

      npoints = anpoints

* for ALPHA, not released
*      call init_apar
      am1 = ame
      am2 = ame
      if (fs.eq.'gg') then
         am1 = 0.d0
         am2 = 0.d0
      endif
      if (fs.eq.'mm') then
         am1 = ammu
         am2 = ammu
      endif
      in_conf_spin = 4

      sum = 0.d0
      sum2 = 0.d0
      do k = 0,mph-1
         sump(k) = 0.d0
         sum2p(k) = 0.d0
      enddo
      sumv  = 0.d0
      sum2v = 0.d0
      remtx = 1.d0
      diffv = 0.d0
      invp  = 0
      xsecv = 0.d0
      sumvt  = 0.d0
      sum2vt = 0.d0
      remtxt = 1.d0
      diffvt = 0.d0
      invpt  = 0
      xsecvt = 0.d0

      iswvperr(1) = 0
      iswvperr(2) = 0
      iswvperr(3) = 0
      iswvperrt(1) = 0
      iswvperrt(2) = 0
      iswvperrt(3) = 0
      iswvperrt(4) = 0
      iswvperrt(5) = 0
      iswvperrt(6) = 0
      
      nphmax       = 0
      xsec         = 0.d0
      var          = 0.1d0
      naccepted    = 0
      sumb1        = 0.d0
      sumb2        = 0.d0
      bornmax      = 0.d0
      phspmax      = 0.d0
      nwhenmax     = 0
      wmax         = 0.d0
      prodmax      = 0.d0
      elmmax       = 0.d0
      nover        = 0
      hitpmiss     = 0.d0
      hit          = 0.d0
      istopsearch  = 0
      nneg         = 0
      sumover      = 0.d0
      sum2over     = 0.d0
      sumneg       = 0.d0
      sum2neg      = 0.d0
      ieb          = 0
      ie           = 0

      if (store.eq.'yes') then
         call initstorage(storefile)
      endif
      k = 0
      wnpoints = npoints
      do j = 0,3
         do ki = 1,mph
            qph(ki,j) = 0.d0
         enddo
      enddo
      ng = 0

** for debugging!!
c      open(16,file='ranluxsequence',status='unknown')
c      read(16,*)isvec
c      call rluxin(isvec)
c      close(16)
***
      do while(k.lt.wnpoints)

         call rluxut(isvec)

****  THE FOLLOWING LINES BETWEEN "*[[ start" AND "* end ]]" MUST
**** BE RECALCULATED FOR EACH EVENT IF ECMS CHANGES EVENT BY EVENT.
**** FURTHERMORE, IF ECMS CHANGES EVENT BY EVENT ifrstenbld MUST 
**** BE SET TO 0
*[[ start
        ifrstenbld = 0

****** Beam energy spread
        call spreadbeams(esig1,esig2,ame,am1,p1lab,p2lab,ieb)
        p12lab = p1lab + p2lab
        call new_boost(p12lab,p1lab,pin1,1)
        call new_boost(p12lab,p2lab,pin2,1)
**** to avoid round offs, I recalculate off-shell relations
        et = pin1(0)+pin2(0)
        ebt = 0.5d0*et
        pin1(0) = ebt
        pin1(3) = ebt*sqrt((1.d0+ame/ebt)*(1.d0-ame/ebt))
        pin2(0) =  pin1(0)
        pin2(3) = -pin1(3)
        ecms=sqrt(dot(pin1+pin2,pin1+pin2))
******
        esoft  = eps * ecms/2.d0 ! ecms is in a common, it is changed in spreadbeams
        pin(0) = ecms
        pin(2) = 0.d0
        pin(3) = 0.d0
        pin(1) = 0.d0
        betafs = sqrt(1.d0 - 4.d0*am1*am1/pin(0)**2)
        beta   = sqrt(1.d0 - 4.d0*ame*ame/pin(0)**2)
        do ki = 0,3
           pbeam1(ki) = pin1(ki)
           pbeam2(ki) = pin2(ki)
        enddo
        s = ecms*ecms
* end ]]

** [[end initialization]]

         k = k + 1
** for debugging!!
c         if (k.eq.4708386) then
c            idebug = 1
c         else
c            idebug = 0
c         endif
c         if (k.eq.586) then
c            print*,'DUMPING RANLUX SEQUENCE'
c            open(16,file='ranluxsequence',status='unknown')
c            call rluxut(isvec)
c            write(16,*)isvec
c            close(16)
c         endif
c         print*,k
***
         flux = 8.d0 * (ecms/2.d0)**2
         if (fs.eq.'ee'.or.fs.eq.'mm') then
c            call get_cos_ferNEW(cth,wcos)
            call get_cos_fer(cth,wcos)
         endif
         call multiplicity(eps,ecms,cth,ng,wnphot)

         if (fs.eq.'gg') then
            if (ng.eq.0) then 
               call get_cos_2g_born(cth,wcos)
            else
               call get_cos_2g(cth,wcos)
            endif
         endif
         sdif = wnphot*wcos
***************************************************
** initial state radiation with structure functions
*

         if (ord.eq.'struct') then
            call emission(pbeam1,pbeam2,wisr,'e')

            betafs = sqrt(1.d0 - 4d0*am1**2/(pbeam1(0)+pbeam2(0))**2)
            beta   = sqrt(1.d0 - 4d0*ame**2/(pbeam1(0)+pbeam2(0))**2)
*     
            sreduced =   (pbeam1(0)+pbeam2(0))**2 
     +           - (pbeam1(3)+pbeam2(3))**2
            
            pbeam1p(0) = sqrt(sreduced)/2.d0
            pbeam1p(1) = 0d0
            pbeam1p(2) = 0d0
            pbeam1p(3) = beta*pbeam1p(0)
*     
            pbeam2p(0) = pbeam1p(0)
            pbeam2p(1) = 0d0
            pbeam2p(2) = 0d0
            pbeam2p(3) = -pbeam1p(3)
*     
            sdif = sdif * wisr
         else
            pbeam1p = pbeam1
            pbeam2p = pbeam2
         endif

*
** end of initial state radiation
*******************************************
      
         if (fs.eq.'ee'.or.fs.eq.'mm') then
ccc            call phasespaceNEW(pbeam1p,pbeam2p,p1,p2,qph,ng,am1,am2,
ccc     .           esoft,cth,w,phsp,ie)
            call phasespaceTMP(pbeam1p,pbeam2p,p1,p2,qph,ng,am1,am2,
     .           esoft,cth,w,phsp,ie)
c            call phasespace(pbeam1p,pbeam2p,p1,p2,qph,ng,am1,am2,
c     .        esoft,cth,w,phsp,ie)
         else
            call phasespace(pbeam1p,pbeam2p,p1,p2,qph,ng,am1,am2,
     .        esoft,cth,w,phsp,ie)
         endif

***
         ie = ie + ieb          ! ieb if beam energy spread fails
         if (ieb.gt.0) phsp = 0.d0
***         
         sdif = sdif * phsp * w
         
         if (isnan(phsp).or.isnan(w)) then
            print*,'NAN found (pos 1)!!!'
            print*,isvec
            print*,'end ----!!!'
         endif
*
** final state radiation with structure function
         if (ord.eq.'struct'.and.ie.eq.0) then
            do kk = 0,3
               p1cut(kk) = p1(kk)
               p2cut(kk) = p2(kk)
               pcm(kk)   = pbeam1(kk) + pbeam2(kk)
            enddo
            do ii = 1,ng
               do kk = 0,3
                  qcut(kk)  = qph(ii,kk)
               enddo
               call new_boost(pcm,qcut,qcut,-1)
               do kk = 0,3
                  qphcut(ii,kk)  = qcut(kk)
               enddo
            enddo
            
            call new_boost(pcm,p1cut,p1cut,-1)
            call new_boost(pcm,p2cut,p2cut,-1)
            
            if (fs.eq.'mm') call emission(p1cut,p2cut,wfsr,'m')
            if (fs.eq.'ee') call emission(p1cut,p2cut,wfsr,'e')
         endif
** end of final state radiation
*****************************************
         if (ie.ge.1) ie = 1
         if (fs.eq.'gg'.and.ie.eq.0) then
            call mixandsortmomenta(ng,p1,p2,qph)
         endif

         if (ord.ne.'struct'.and.ie.eq.0) then
            call new_boost(p12lab,p1,p1cut,-1)
            call new_boost(p12lab,p2,p2cut,-1)

            qphcut = 0.d0
            if (ng.gt.0) then
               do ii = 1,ng
                  ptmp = qph(ii,:)
                  call new_boost(p12lab,ptmp,ptmp,-1)
                  qphcut(ii,:) = ptmp
               enddo
            endif
         endif
         
         if (ie.lt.1) then 
             if (fs.eq.'ee'.or.fs.eq.'mm') then
                 call cuts(p1cut,p2cut,qphcut,icut)
             elseif (fs.eq.'gg') then
                 call cutsgg(ng,p1cut,p2cut,qphcut,icut)
             endif
         else
            icut = 1
         endif
         ie = ie + icut

         if (ng.gt.nphmax.and.ie.eq.0) nphmax = ng
         if (icut.eq.0) naccepted = naccepted + 1

!!         ie = 1   ! uncomment  for phase space integral

         irepeat = irepeat + 1

         iswvperr  = 0
         iswvperrt = 0
         call squared_matrix(model,ng,ecms,p1,p2,pbeam1,pbeam2,qph,
     >         ie,icalc,emtx,prod,deltah)
         irepeat = 0

         bck  = emtx
         emtx = emtx/in_conf_spin ! divided by initial spin conf. 
         emtx = emtx*convfac/flux ! divided by the flux

         if (fs.eq.'gg') emtx = emtx/(ng+2)/(ng+1)

         if (ie.eq.0) then
            call svfactor(model,ng,ecms,p1,p2,eps,sv,deltasv)
            sdif = sdif * sv
ccc additive form            sdif = sdif / prod/(1.d0+deltasv) * (1.d0+deltasv+deltah)
         else
            sdif = 0.d0
         endif

         sdif = sdif * emtx

         if (ord.eq.'struct'.and.ie.eq.0) then
            do kk = 0,3
                p1(kk) = p1cut(kk)
                p2(kk) = p2cut(kk)
                qph(1,kk) = qcut(kk)
            enddo
            sdif = sdif * wfsr
         endif

! rescaling for Z exchange (bornmez = 0 for gg...)
         sdif = sdif/bornme*(bornme + bornmez)
!!         emtx = 1.d0 ! uncomment  for phase space integral
         iii = 0
         if (sdif.gt.sdifmax) then 
            sdifmax = sdif
            nwhenmax = ng
            iii = 1
         endif
         if (istopsearch.eq.0) then            
            if (iverbose.gt.0.and.iii.eq.1) then
               call printstatus(1,k,p1,p2,qph,xsec,var,varbefore,sdif,
     .              sdifmax,fmax)
            endif
         endif

!! unweightening for unweighted events...
         if (k.gt.nsearch) then
            istopsearch = 1
            if (hitpmiss.lt.1.d0) then
               fmax = 1.05d0*sdifmax
               print*,'Starting now also unweighted generation!'
            endif
            hitpmiss = hitpmiss + 1.d0
            call ranlux(csi,1)
            if (fmax*csi(1).lt.sdif) then
               hit = hit + 1.d0
c               if (store.eq.'yes') call eventstorage(p1,p2,qph)
               if (store.eq.'yes') call eventstorage(p1cut,p2cut,qphcut)
            endif
            if (sdif.lt.-1.d-20) then 
               nneg  = nneg  + 1
               sumneg  = sumneg + abs(sdif)
               sum2neg = sum2neg + sdif**2
            endif
            if (sdif.gt.fmax) then 
               nover = nover + 1
               sumover  = sumover  + sdif - fmax
               sum2over = sum2over + (sdif - fmax)**2

               if (iverbose.gt.0) then
                  call printstatus(2,k,p1,p2,qph,xsec,var,varbefore,
     .                 sdif,sdifmax,fmax)
               endif
            endif
         endif
       
         if (isnan(sdif)) then
c            print*,'NAN found (pos 2)!!!'
c            print*,sdif,phsp,w
c            print*,isvec
c            print*,'end ----!!!'
            if (iverbose.gt.0) then
               call printstatus(5,k,p1,p2,qph,xsec,var,varbefore,
     .              sdif,sdifmax,fmax)
            endif
         endif

         sum  = sum  + sdif
         sum2 = sum2 + sdif**2

         if (ibranch.eq.1) sumb1 = sumb1 + sdif
         if (ibranch.eq.2) sumb2 = sumb2 + sdif

         sump(ng)  = sump(ng)  + sdif
         sum2p(ng) = sum2p(ng) + sdif**2

         varbefore = var
         xsec = sum/k
         var  = sqrt(abs((sum2/k-xsec**2)/k))
c         tollerate = 1.2d0
         tollerate = 1.8d0
         if (var.gt.tollerate*varbefore
     .        .and.varbefore.gt.0.d0.and.ie.eq.0) then
            if (iverbose.gt.0) then
               call printstatus(3,k,p1,p2,qph,xsec,var,varbefore,sdif,
     .              sdifmax,fmax)
            endif
!---------- Nullifying this event ------------!
            ratio = var/varbefore
c            if (k.gt.5000000.and.ratio.gt.3) then
            if (k.gt.5000000.and.ratio.gt.6) then
               print*,' ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'
               print*,' ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'
               print*,' >>>>>>>> REJECTING THE EVENT <<<<<<<<'
               print*,' ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'
               print*,' ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'
               if (iverbose.gt.0) then
                  call printstatus(4,k,p1,p2,qph,xsec,var,varbefore,
     .                 sdif,sdifmax,fmax)
               endif
c               print*,'WELL... actually not rejecting it...'
c               goto 12345
               sum = sum - sdif
               sum2 = sum2 - (sdif)**2
               sump(ng) = sump(ng) - sdif
               sum2p(ng) = sum2p(ng) - (sdif**2)
               xsec = sum/k
               var  = sqrt((sum2/k-xsec**2)/k)
               sdif = 0.d0
12345          continue
            endif
         endif

*[[[  START VP PARAMETRIC UNCERTAINTY
         if (iteubn.eq.0) then
            if (invp.gt.0) then
               do ii = 1,invp
                  sumv(ii)  = sumv(ii)  +  sdif*remtx(ii)
                  sum2v(ii) = sum2v(ii) + (sdif*remtx(ii))**2
                  xsecv(ii) = sumv(ii)/k
                  varv(ii)  = sqrt(abs((sum2v(ii)/k-xsecv(ii)**2)/k))
               enddo
            endif  
         else
            if (invpt.gt.0) then
               do ii = 1,nvpst
                  sumvt(ii)  = sumvt(ii)  +  sdif*remtxt(ii)
                  sum2vt(ii) = sum2vt(ii) + (sdif*remtxt(ii))**2
                  xsecvt(ii) = sumvt(ii)/k
                  varvt(ii)  = sqrt(abs((sum2vt(ii)/k-xsecvt(ii)**2)/k))
               enddo
            endif  
         endif
*]]]  END VP PARAMETRIC UNCERTAINTY
         
         if (icalc.eq.1.and.ie.eq.0) then
c            call distributions(sdif,k,p1,p2,qph)
            call distributions(sdif,k,p1cut,p2cut,qphcut)
         endif
*     
**[[WRITING OUTPUT]]
         if (mod(k,iwriteout).eq.0.or.k.eq.npoints.or.hit.eq.npoints)
     .        then
            call writedistributions    
!! hit or miss cross section...
            hmxsect = 0.d0
            hmerr   = 0.d0
            if (hitpmiss.gt.0.d0)  then 
               hmeff   = hit/hitpmiss
               hmxsect = fmax*hmeff
               hmerr   = fmax * sqrt(hmeff*(1-hmeff)/hitpmiss)
            endif
!!            
            xsec = sum/k
            var  = sqrt((abs(sum2/k-xsec**2))/k)            
            open(10,file=outfile,status='unknown')            
            write(10,*)' '
            write(10,'(1x,A,A,A)')
     >           'final state = ',fs,' '
            write(10,'(1x,A,f12.4,A)')
     >           'nominal ecms   =',ecmsnom,' GeV'
            write(10,'(1x,A,f12.4,A)')
     >           'thmin  =',thmin*180.d0/pi,' deg'
            write(10,'(1x,A,f12.4,A)')
     >           'thmax  =',thmax*180.d0/pi,' deg'
            write(10,'(1x,A,f12.4,A)')
     >           'acoll. =',zmax*180.d0/pi,' deg'
            write(10,'(1x,A,f12.4,A)')
     >           'emin   = ',emin,' GeV'
            write(10,'(1x,A)')
     >           'ord    = '//ord
            write(10,'(1x,A)')
     >           'model  = '//model
            write(10,'(1x,A,i5)')
     >           'nphot mode =',nphotmode
            write(10,'(1x,A,i9)')
     >           'seed   =',iseed
            write(10,'(1x,A,i5)')
     >           'iarun  =',iarun
            if (iarun.eq.1) then
               if (iteubn.eq.1) then
                  write(10,*)'(Teubner & al. alpha running)'
               elseif (inskvp.eq.1) then
                  write(10,*)'(Novosibirsk alpha running)'
               else
                  write(10,*)'(Jegerlehner alpha running)'
               endif
            endif
            write(10,'(1x,A,f10.9)')
     >           'eps    = ',eps
            write(10,'(1x,A,i5)')
     >           'darkmod =',idarkon
            if(idarkon.eq.1) then
            write(10,'(1x,A,e14.7,A)')
     >           'U mass  = ',amassU, ' GeV'
            write(10,'(1x,A,e14.7,A)')
     >           'U width = ',gammaU, ' GeV'
            write(10,'(1x,A,e14.7,A)')
     >           'k       = ',gvectU/sqrt(4.*pi*alpha), 
     >           ' * electric charge'
            write(10,'(1x,A,f7.3,A)')
     >           'egmin   = ', egmin,  ' GeV'
            write(10,'(1x,A,f7.3,A)')
     >           'thgmin  = ', thgmin*180.d0/pi, ' deg'
            write(10,'(1x,A,f7.3,A)')
     >           'thgmax  = ', thgmax*180.d0/pi, ' deg'
            endif
            write(10,*)' '
            if (eventlimiter.eq.'w') then
               write(10,'(A,f12.0,A)')'~ Generating ',wnpoints,
     .              ' weighted events ~'
            else
               write(10,'(A,i12,A)')'~ Generating ',npoints,
     .              ' unweighted events ~'
            endif
            write(10,*)' '
            write(10,*)'::::::>>>>>> weighted events <<<<<<::::::'
            do i = 0,nphmax
               xsecp(i) = sump(i)/k
               varp(i)  = sqrt((abs(sum2p(i)/k-xsecp(i)**2))/k)
               fractions(i) = xsecp(i)/xsec * 100.d0
               iii = i
               if (fs.eq.'gg') iii = i + 2
               write(10,'(i2,A,f16.8,A,f16.8,A,f8.4,A)')
     :              iii,' photons: ',xsecp(i),' +-',varp(i),
     :              '     (',fractions(i),' %)'
            enddo
            write(10,'(1x,A,f16.8,A,f16.8,A)')
     :           'total:   ',xsec,' +-',var,' nb'
            write(10,*)' '
            write(10,'(1x,A,i12,A,f20.0)')
     :           'n. ',k,' of ',wnpoints
            eff = (1.d0*naccepted)/k
            write(10,'(1x,A,f6.2,A)')
     :           'cut points ',100.d0 - eff*100,' %'
            write(10,*)'::::::>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<::::::'
            write(10,*)' '
            write(10,*)'::::::>>>>>> unweighted events <<<<<<::::::'
            write(10,'(1x,A,f6.2,A)')
     :           'hit or miss efficiency ',hmeff*100,' %'
            write(10,'(1x,A,f12.0)')
     :           'unweighted events generated ',hit
            biashit        = 0.d0
            biashitpmiss   = 0.d0
            biasneghit     = 0.d0
            biasneghitmiss = 0.d0
            sezover        = 0.d0
            errsezover     = 0.d0
            if (hit.gt.0.d0) then 
               biashit      = 1.d0*nover/hit
               biashitpmiss = 1.d0*nover/hitpmiss
               biasneghit   = 1.d0*nneg/hit
               biasneghitmiss = 1.d0*nneg/hitpmiss
               sezover    = sumover/hitpmiss
               errsezover = (sum2over/hitpmiss - sezover**2)/hitpmiss
               errsezover = sqrt(abs(errsezover))
               sezneg    = sumneg/hitpmiss
               errsezneg = (sum2neg/hitpmiss - sezneg**2)/hitpmiss
               errsezneg = sqrt(abs(errsezneg))
            endif
            write(10,*)' '
            write(10,'(1x,A,f16.8,A,f16.8,A)')
     :           'total (nb):   ',hmxsect,' +-',hmerr,' +'
            write(10,'(1x,A,f16.8,A,f16.8,A)')
     :           '       !!!!   ',sezover,' +-',
     :           errsezover,' (bias over fmax) +'
            write(10,'(1x,A,f16.8,A,f16.8,A)')
     :           '       !!!!   ',-sezneg,' +-',
     :           errsezneg,' (bias negative)'
            write(10,'(1x,A,f16.8,A,f16.8)')
     :           'total + biases: ',hmxsect
     :           +sezover-sezneg,' +-',hmerr+errsezover+errsezneg
            write(10,*)' '
            write(10,'(1x,A,i12)')
     :           'N. points with w > fmax (bias): ',nover
            write(10,'(1x,A,f10.7,A,f10.7,A)')
     :           'bias/hit and bias/(hit+missed):',
     :           biashit*100,' % and ',biashitpmiss*100,' %'
            write(10,'(1x,A,i12)')
     :           'N. points with w < 0:',nneg
            write(10,'(1x,A,f10.5,A,f10.5,A)')
     :           'biases for w < 0:   ',
     :           biasneghit*100,' % and ',biasneghitmiss*100,' %'
            write(10,*)' '
            write(10,'(1x,A,f14.6,A,f14.6)')
     :           'Upper limits fmax and sdifmax ',fmax,' ',sdifmax
            nwhenprint = nwhenmax
            if (fs.eq.'gg') nwhenprint = nwhenmax+2
            write(10,'(1x,A,i3,A)')
     :           'when there were ',nwhenprint,' photons'
            write(10,*)'::::::>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<::::::'

            if (abs(scal_err_dhad).gt.1.d-5) then
               open(15,file=vpuncout,status='unknown')
               write(15,*)' '
               write(15,*)'VP PARAMETRIC UNCERTAINTIES: '
               IF (iteubn.eq.0) THEN
               ii = 0
               do i1 = -1,1
                  do i2 = -1,1
                     do i3 = -1,1
                        if (i1.ne.0.or.i2.ne.0.or.i3.ne.0) then
                           ii = ii + 1
                           diffv(ii) = xsecv(ii)-xsec
                           perc      = (xsecv(ii)-xsec)/xsec*100
                           percerr   = varv(ii)/xsecv(ii)*100
                           write(15,*)ii,'>',i1,i2,i3,xsecv(ii),'+-',
     :                          varv(ii),' (',perc,'%)'
                        endif
                     enddo
                  enddo
               enddo
               write(15,*)' '
               immloc = minloc(xsecv,MASK=xsecv.gt.0.d0)
               write(15,*)'  Minumum x-sect.:',xsecv(immloc(1)),'+-',
     :              varv(immloc(1)),
     :          ' (',(xsecv(immloc(1))-xsec)/xsec*100,'%)'
               write(15,*)'  Central x-sect.:',xsec,'+-',
     :              var
               immloc = maxloc(xsecv,MASK=xsecv.gt.0.d0)
               write(15,*)'  Maximum x-sect.:',xsecv(immloc(1)),'+-',
     :              varv(immloc(1)),
     :          ' (',(xsecv(immloc(1))-xsec)/xsec*100,'%)'
               ELSE ! for Teubner et al. parameterization
               ii = 0
               do ii = 1,nvpst
                  diffvt(ii) = xsecvt(ii)-xsec
                  perc      = (xsecvt(ii)-xsec)/xsec*100
                  percerr   = varvt(ii)/xsecvt(ii)*100
                  write(15,*)ii,'>',ist(ii,:),xsecvt(ii),'+-',varvt(ii),
     :                 ' (',perc,'%)'
               enddo
               write(15,*)' '
               immloc = minloc(xsecvt,MASK=xsecvt.gt.0.d0)
               write(15,*)'  Minumum x-sect.:',xsecvt(immloc(1)),'+-',
     :              varvt(immloc(1)),
     :          ' (',(xsecvt(immloc(1))-xsec)/xsec*100,'%)'
               write(15,*)'  Central x-sect.:',xsec,'+-',
     :              var
               immloc = maxloc(xsecvt,MASK=xsecvt.gt.0.d0)
               write(15,*)'  Maximum x-sect.:',xsecvt(immloc(1)),'+-',
     :              varvt(immloc(1)),
     :          ' (',(xsecvt(immloc(1))-xsec)/xsec*100,'%)'

               ENDIF
               close(15)
            endif
            write(10,*)' '
            close(10)
         endif
**[[END WRITING OUTPUT]]
         if (eventlimiter.eq.'unw') wnpoints = 1.d13
         if (eventlimiter.eq.'unw'.and.hit.ge.npoints) goto 100
      enddo
 100  continue
      if (store.eq.'yes') call finalizestorage
      print*,'Generation finished'
      stop
      end
