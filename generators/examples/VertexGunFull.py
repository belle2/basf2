#!/usr/bin/env python
# -*- coding: utf-8 -*-

##############################################################################
# This steering file which shows all usage options for the vertex gun module in
# the generators package. The generated particles from the vertex gun are then
# fed through a full Geant4 simulation and the output is stored in a root file.
# The vertex gun is similar to the particle gun but instead creating either one
# vertex where all particle in a event come from or creating tracks that all
# come from different points it can create several vertices per event. The user
# can specify the number of vertices and the exact properties of all particles
# coming from each vertex. Most parameters have the same or similar meaning
# than the particle gun's parameters but have to be state for all vertices in
# the event
#
# The different options for the particle gun are explained below.
# Uncomment/comment different lines to get the wanted settings
#
# Example steering file - 2011 Belle II Collaboration
##############################################################################

from basf2 import *

# suppress messages and warnings during processing:
set_log_level(LogLevel.ERROR)

# to run the framework the used modules need to be registered
vertexgun = register_module('VertexGun')

# ============================================================================
# Setting the random seed for particle generation: this number can be any int,
# preferably large a value of 0 will use a different random seed each time
# default is 3452346.
set_random_seed(1028307)

# ============================================================================
# Setting the number of tracks independently for every vertex in one event. The
# length of this list determines the number of vertices per event this number
# can be any list of ints >= 1 default is [2,2]
vertexgun.param('tracksPerVertex', [4, 3, 2])

# ============================================================================
# Setting the list of particle codes (PDG codes) for the generated particles
# The user has to provide exactly one pdg code per track. That means the pdg
# code list must be as long as the sum of all elements in the tracksPerVertex
# list. In this example the 4 first elements will only be used by the first
# vertex. Every track generated by at this vertex will get one of the pdg codes
# randomly assigned
vertexgun.param('pdgCodes', [
    -11,
    11,
    -13,
    13,
    -211,
    211,
    -211,
    -11,
    11,
    ])

# ============================================================================
# Setting the parameters for the random generation of particles momenta: Five
# different distributions can be used: - fixed:     always use the exact same
# value - uniform:   uniform distribution between min and max - uniformPt:
# uniform distribution of transverse momentum between min and max - normal:
# normal distribution around mean with width of sigma - normalPt:  normal
# distribution of transverse momentum around mean with width of sigma
#
# The difference to the particle gun is that you have to set all track
# properties for every vertex individually so all parmaters are list with the
# same length
vertexgun.param('momentumGeneration', ['normal', 'normal', 'normal'])
# The next list of parameters corresponds to the first element of the
# momentumParams list of the particle gun
vertexgun.param('momentumParams1', [1, 1, 0.5])
# The next list of parameters corresponds to the second element of the
# momentumParams list of the particle gun. The same scheme applies to all the
# other Param1, Param2
vertexgun.param('momentumParams2', [0.05, 0.05, 0.01])

# ============================================================================
# Setting the parameters for the random generation of the particle polar angle:
# Four different distributions can be used: - fixed:     always use the exact
# same value - uniform:   uniform distribution between min and max -
# uniformCosinus: uniform distribution of cos(theta) between min and max -
# normal:    normal distribution around mean width width of sigma
#
# The default is a uniform theta distribution between 17 and 150 degrees
vertexgun.param('thetaGeneration', ['uniform', 'uniform', 'uniform'])
vertexgun.param('thetaParams1', [17, 17, 60])
vertexgun.param('thetaParams2', [150, 150, 120])

# ============================================================================
# Setting the parameters for the random generation of the particle azimuth
# angle: Three different distributions can be used: - fixed:     always use the
# exact same value - uniform:   uniform distribution between min and max -
# normal:    normal distribution around mean width width of sigma
#
# The default is a uniform theta distribution between 0 and 360 degrees
vertexgun.param('phiGeneration', ['uniform', 'uniform', 'uniform'])
vertexgun.param('phiParams1', [0, 0, 0])
vertexgun.param('phiParams2', [360, 360, 360])

# ============================================================================
# Setting the parameters for random generation of the event vertex Three
# different distributions can be used: - fixed:     always use the exact same
# value - uniform:   uniform distribution between min and max - normal: normal
# distribution around mean with width of sigma
#
# The default is a uniform distribution of the vertex
vertexgun.param('vertexGeneration', ['fixed', 'fixed', 'fixed'])
vertexgun.param('xVertexParams1', [0, 1, 0])
vertexgun.param('xVertexParams2', [0, 1, 0])
vertexgun.param('yVertexParams1', [0, 1, 0])
vertexgun.param('yVertexParams2', [0, 1, 0])
vertexgun.param('zVertexParams1', [0, 1, 3])
vertexgun.param('zVertexParams2', [0, 1, 3])

# ============================================================================
# Print the parameters of the particle gun
print_params(vertexgun)

# ============================================================================
# Now lets create the necessary modules to perform a simulation
#
# Create Event information
evtmetagen = register_module('EvtMetaGen')
# Show progress of processing
progress = register_module('Progress')
# Load parameters
gearbox = register_module('Gearbox')
# Create geometry
geometry = register_module('Geometry')
# Run simulation
simulation = register_module('FullSim')
# Save output of simulation
output = register_module('RootOutput')

# Setting the option for all non particle gun modules: want to process 100 MC
# events
evtmetagen.param({'EvtNumList': [10], 'RunList': [1]})

# Set output filename
output.param('outputFileName', 'ParticleGunOutput.root')

# ============================================================================
# Do the simulation
mcparticleprinter = register_module('PrintMCParticles')
mcparticleprinter.logging.log_level = LogLevel.INFO
main = create_path()
main.add_module(evtmetagen)
main.add_module(progress)
main.add_module(gearbox)
main.add_module(geometry)
main.add_module(vertexgun)
main.add_module(mcparticleprinter)
main.add_module(simulation)
main.add_module(output)

# Process events
process(main)

# Print call statistics
print statistics
