#!/usr/bin/env python3

##########################################################################
# basf2 (Belle II Analysis Software Framework)                           #
# Author: The Belle II Collaboration                                     #
#                                                                        #
# See git log for contributors and copyright holders.                    #
# This file is licensed under LGPL-3.0, see LICENSE.md.                  #
##########################################################################

"""
Small tool to create beam parameter payloads for local usage.

This tool can be used to create database payloads for custom beam parameters. It
will not check if a payload for the given iov is already present in the local
database, that is up to the user.

You can supply all the arguments you can supply to the BeamParameters module and
in addition choose a predefined preset (one of %s) and scale the beam energies
to achieve a selected cms energy.
"""

import argparse
import numpy as np
import basf2
from beamparameters import beamparameter_presets, calculate_beamparameters
import ROOT
from ROOT import Belle2


def __parse_floatlist(string):
    """Small helper function to parse a comma separated list of floats"""
    try:
        return [float(e) for e in string.split(",")]
    except BaseException:
        raise argparse.ArgumentTypeError(
            f"'{string}' is not a valid list of comma separated float values"
        )


def __parse_bool(string):
    """Small helper function to parse a bool"""
    is_true = string.lower() in ["1", "true", "yes", "on"]
    is_false = string.lower() in ["0", "false", "no", "off"]
    if not is_true and not is_false:
        raise argparse.ArgumentTypeError(f"'{string}' is not a valid bool value")
    return is_true


def __parse_iov(string):
    """Small helper function to check validity of iov argument"""
    try:
        iov = [int(e) for e in string.split(",")]
        if len(iov) != 4:
            raise ValueError()
    except BaseException:
        raise argparse.ArgumentTypeError(
            "'%s' is not a valid iov. It should be of the format "
            "'firstExp,firstRun,lastExp,lastRun'" % string
        )

    if iov[0] > iov[2]:
        raise argparse.ArgumentTypeError(
            "first experiment cannot be larger than final experiment"
        )
    if iov[0] == iov[2] and iov[1] > iov[3] and iov[3] != -1:
        raise argparse.ArgumentTypeError("first run cannot be larger than final run")
    return iov


def __vec(values):
    vec = ROOT.std.vector("double")()
    for v in values:
        vec.push_back(v)
    return vec


if __name__ == "__main__":
    #: command line parser
    parser = argparse.ArgumentParser(
        description=__doc__ % ", ".join(sorted(beamparameter_presets.keys())),
        epilog="Arguments of type bool can be anything out of [1, true, on, yes] "
        "for true and [0, false, off, no] for false. list(float) should be a "
        "comma separated list of values",
    )
    parser.add_argument(
        "--preset",
        default="Y4S",
        metavar="PRESET",
        choices=sorted(beamparameter_presets.keys()),
        help="Name of the preset to use (default: %(default)s)",
    )
    parser.add_argument(
        "--cms",
        default=None,
        type=float,
        help="CMS energy to aim for, selected preset will be "
        "scaled accordingly to achieve desired center of mass. "
        "If energyHER or energyLER are supplied this option "
        "scaling will have no effect on them",
    )
    parser.add_argument(
        "--iov",
        type=__parse_iov,
        default=[0, 0, -1, -1],
        help="Interval of validity. Needs to be a list of four "
        "numbers separated by comma specifing the initial "
        "experiment, initial run, final experiment and final run "
        "for which this payload should be valid. If no iov is "
        "given the payload will be valid for everything. "
        "Example: --iov=0,0,1,12 will create a payload valid "
        "from experiment 0, run 0 up to and including experiment "
        "1, run 12.",
    )
    parser.add_argument(
        "--tries",
        type=int,
        default=0,
        help="If a non-negative number indicates the amount of "
        "generated collisions to estimate errors",
    )

    #: temporary BeamParameters module to get list of parameters
    bp = basf2.register_module("BeamParameters")
    values = {}
    for param in bp.available_params():
        if param.name in ["payloadIov", "createPayload"]:
            continue
        values[param.name] = param.default
        #: argument type conversion to parse them correctly
        argument_type = {
            "float": float,
            "int": int,
            "bool": __parse_bool,
            "list(float)": __parse_floatlist,
        }[param.type]
        # add a new argument to override the parameter
        parser.add_argument(
            f"--{param.name}",
            type=argument_type,
            help=param.description + ". Type: " + param.type,
            metavar=param.name.upper(),
            dest="param_" + param.name,
        )

    #: command line arguments
    arguments = parser.parse_args()

    #: calculate beam parameter values from arguments
    values.update(calculate_beamparameters(arguments.preset, arguments.cms))

    # now loop over all the arguments and pass the ones starting with param_
    # directly to the Beamparameters if they are set
    for arg, value in arguments.__dict__.items():
        if arg.startswith("param_") and value is not None:
            values[arg[6:]] = value

    #: Beamparameter object we want
    beamparams = Belle2.BeamParameters()
    beamparams.setHER(
        values["energyHER"],
        values["angleXHER"],
        values["angleYHER"],
        __vec(values["covHER"]),
    )
    beamparams.setLER(
        values["energyLER"],
        values["angleXLER"],
        values["angleYLER"],
        __vec(values["covLER"]),
    )
    beamparams.setVertex(
        ROOT.Math.XYZVector(*values["vertex"]), __vec(values["covVertex"])
    )
    flags = 0
    if values["generateCMS"]:
        flags |= Belle2.BeamParameters.c_generateCMS
    if values["smearDirection"]:
        flags |= Belle2.BeamParameters.c_smearBeamDirection
    if values["smearEnergy"]:
        flags |= Belle2.BeamParameters.c_smearBeamEnergy
    if values["smearVertex"]:
        flags |= Belle2.BeamParameters.c_smearVertex
    beamparams.setGenerationFlags(flags)

    # do we want to estimate uncertainties from smearing?
    if arguments.tries > 0:
        # then we need the intial particle generator
        ROOT.gInterpreter.Declare(
            "#include <generators/utilities/InitialParticleGeneration.h>"
        )
        Belle2.DBStore.Instance().addConstantOverride("BeamParameters", beamparams)
        gen = Belle2.InitialParticleGeneration(Belle2.BeamParameters.c_smearALL)
        gen.initialize()
        # and do some trials
        e_cms = []
        boosts = []
        for i in range(arguments.tries):
            evt = gen.generate()
            e_cms.append(evt.getMass())
            cms = evt.getLER() + evt.getHER()
            boost = cms.BoostToCM()
            boost_tvector3 = ROOT.TVector3(boost.X(), boost.Y(), boost.Z())
            boosts.append(list(boost_tvector3))

        e_cms = np.array(e_cms)
        energy_mean = e_cms.mean()
        energy_spread = e_cms.std()
        energy_error = energy_spread / len(e_cms) ** 0.5

        boosts = np.array(boosts)
        boost_mean_np = boosts.mean(axis=0)
        boost_mean = ROOT.TVector3(*boost_mean_np)
        cov = np.cov(boosts.T)
        boost_cov = ROOT.TMatrixDSym(3)
        for i in range(3):
            for j in range(3):
                boost_cov[i][j] = cov[i][j]
    else:
        # otherwise just take zero for the errors
        cms = beamparams.getLER() + beamparams.getHER()
        energy_mean = cms.M()
        energy_spread = 0
        energy_error = 0
        boost = cms.BoostToCM()
        boost_mean = ROOT.TVector3(boost.X(), boost.Y(), boost.Z())
        boost_cov = ROOT.TMatrixDSym(3)

    #: beamspot object
    beamspot = Belle2.BeamSpot()
    vtx_cov = beamparams.getCovVertex()
    # set error matrix for the vertex position to 0.1% of the beam spot size:
    pos_cov = ROOT.TMatrixDSym(3)
    for i in range(3):
        for j in range(3):
            pos_cov[i][j] = 1e-6 * vtx_cov[i][j]

    vertex = beamparams.getVertex()
    beamspot.setIP(ROOT.TVector3(vertex.X(), vertex.Y(), vertex.Z()), pos_cov)
    beamspot.setSizeCovMatrix(vtx_cov)

    #: Collision invariant mass.
    invmass = Belle2.CollisionInvariantMass()
    invmass.setMass(energy_mean, energy_error, energy_spread)
    #: Collision boost vector.
    boost = Belle2.CollisionBoostVector()
    boost.setBoost(-boost_mean, boost_cov)
    #: Collision axis in CMS.
    axis = Belle2.CollisionAxisCMS()
    center_cov = ROOT.TMatrixDSym(2)
    axis.setAngles(values["angleXHER"], values["angleYHER"], center_cov)

    # save them all ...
    database = Belle2.Database.Instance()
    iov = Belle2.IntervalOfValidity(*arguments.iov)
    for obj in beamparams, beamspot, invmass, boost, axis:
        name = obj.ClassName()[8:]
        database.storeData(name, obj, iov)
