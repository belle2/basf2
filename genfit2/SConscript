Import('env')

import os
from SCons.Script import *
from SCons.Scanner.C import CScanner

# genfit2 directories
dirs = ['core', 'fields', 'finitePlanes', 'fitters', 'GBL', 'GFRave', 'measurements', 'trackReps', 'utilities']

# libraries
env['LIBS'] = ['$ROOT_LIBS', 'RaveBase']

# check for EVE (needed for eventDisplay)
if env.get('HAS_TEVE', False):
  env['LIBS'] += env['TEVE_LIBS']
  dirs += ['eventDisplay']
else:
  print "Genfit's eventDisplay disabled, please recompile root with opengl support (on Debian/Ubuntu you'll probably only need to install libglu1-mesa-dev and rebuild)"

# add genfit2 to include path
env.Append(CPPPATH = os.path.join(env['INCDIR'], 'genfit'))

# install header files
includes = env.Install(os.path.join(env['INCDIR'], 'genfit'), Glob(os.path.join('code', '*', 'include', '*.h')))
env.Alias('genfit2', includes)

# collect source files
source_files = []
for dir in dirs:
    source_files.append([os.path.join(env['BUILDDIR'], 'genfit2', str(source_file)) for source_file in Glob(os.path.join('code', dir, 'src', '*.cc'))])

# builder for root dictionaries
rootcint = Builder(action='rootcint -f $TARGET -c -p $CINTFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS $SOURCES', source_scanner=CScanner())
env['BUILDERS']['RootCint'] = rootcint
rootcint.action.cmdstr = '${ROOTCINTCOMSTR}'

# generate, build, and collect dictionary files
dict_files = []
for dir in dirs:
    linkdef_files = Glob(os.path.join('code', dir, 'src', '*LinkDef.h'))
    for linkdef_file in linkdef_files:
        dict_filename = str(linkdef_file).replace(os.sep, '_')[:-9] + 'Dict.cc'
        header_files = Glob(os.path.join('code', dir, 'include', '*.h'))
        if dir == 'core':
            header_files += Glob(os.path.join('code', 'finitePlanes', 'include', '*.h'))
        elif dir == 'GBL':
    	    header_files = [os.path.join('code', dir, 'include', 'GFGbl.h')]
        elif dir == 'GFRave':
            header_files = [os.path.join('code', dir, 'include', 'GFRaveVertex.h'), os.path.join('code', dir, 'include', 'GFRaveTrackParameters.h')]
        header_files = [os.path.join(env['INCDIR'], 'genfit', os.path.basename(str(header_file))) for header_file in header_files]
        dict_file = env.RootCint(os.path.join(env['BUILDDIR'], dict_filename), header_files + [linkdef_file])
        dict_files.append(env.SharedObject(dict_file, CPPPATH=['#'] + env['CPPPATH']))

# build library
lib = env.SharedLibrary(os.path.join(env['LIBDIR'], 'libgenfit2.so'), [source_files, dict_files])
env.Alias('genfit2', lib)


env['CONTINUE'] = False

Return('env')

