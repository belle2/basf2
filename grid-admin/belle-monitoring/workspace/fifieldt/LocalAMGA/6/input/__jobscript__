#!/usr/bin/env python

import os,os.path,shutil,tempfile
import sys,popen2,time

import sys

# FIXME: print as DEBUG: to __syslog__ file
#print sys.path
#print os.environ['PATH']
#print sys.version

# bugfix #13314 : make sure that the wrapper (spawned process) is detached from Ganga session
# the process will not receive Control-C signals
# using fork  and doing setsid() before  exec would probably  be a bit
# better (to avoid  slim chance that the signal  is propagated to this
# process before setsid is reached)
# this is only enabled if the first argument is 'subprocess' in order to enable
# running this script by hand from outside ganga (which is sometimes useful)
if len(sys.argv)>1 and sys.argv[1] == 'subprocess':
 os.setsid()

############################################################################################

"""
Sandbox functions used in the job wrapper script on the worker node.
The text of this module is sourced into the job wrapper script.
It therefore may use ###TAGS###  which are expanded in the wrapper script.
"""

INPUT_TARBALL_NAME = '_input_sandbox.tgz'
OUTPUT_TARBALL_NAME = '_output_sandbox.tgz'
PYTHON_DIR = '_python'

def getPackedInputSandbox(tarpath,dest_dir='.'):
    """Get all sandbox_files from tarball and write them to the workdir.
       This function is called by wrapper script at the run time.
    Arguments:
      'tarpath': a path to the tarball
      'dest_dir': a destination directory
    """

    #tgzfile = os.path.join(src_dir,INPUT_TARBALL_NAME)
    tgzfile = tarpath

#
##	Curent release with os module 
#        	
    if os.system("tar -C %s -xzf %s"%(dest_dir,tgzfile)) != 0:
        raise Error('cannot upack tarball with InputSandbox')

#
##	Future release with tarfile module	
#    
#    tf = tarfile.open(tgzfile,"r:gz")
#    
#    [tf.extract(tarinfo,dest_dir) for tarinfo in tf]
#
#    tf.close()




    
def getInputSandbox(src_dir,dest_dir='.'):
    """Get all input sandbox_files from tarball and write them to the workdir.
       This function is called by wrapper script at the run time.
    Arguments:
      'src_dir': a source directory  with InputSandbox files.
      'dest_dir': a destination directory 
    """
    
    os.system("tar chf - -C %s . | tar xf - -C %s" %(src_dir,dest_dir))


def createOutputSandbox(output_patterns,filter,dest_dir):
    """Get all files matching output patterns except filtered with filter and
       write them to the destination directory.
       This function is called by wrapper script at the run time.
    Arguments:
      'output_patterns': list of filenames or patterns.
      'filter': function to filter files (return True to except) 
      'dest_dir': destination directory for output files
    """

    from Ganga.Utility.files import multi_glob,recursive_copy
    
    for f in multi_glob(output_patterns,filter):
        try:
            recursive_copy(f,dest_dir)
        except Exception,x:
            print "ERROR: (job '6' createOutput )",x
	
    
def createPackedOutputSandbox(output_patterns,filter,dest_dir):
    """Get all files matching output patterns except filtered with filter and
       put them to the Sandbox tarball in destination directory.
       This function is called by wrapper script at the run time.
    Arguments:
      'output_patterns': list of filenames or patterns.
      'filter': function to filter files (return True to except) 
      'dest_dir': destination directory for tarball
    """

    tgzfile = os.path.join(dest_dir,OUTPUT_TARBALL_NAME)

    from Ganga.Utility.files import multi_glob,recursive_copy
    outputlist = multi_glob(output_patterns,filter)

#
##	Curent release with os module 
#        	
    
    if len(outputlist) > 0:
        if os.system("tar czf %s %s"%(tgzfile," ".join(outputlist))) != 0:
            print "ERROR: (job '6' createPackedOutput ) can't creat tarball" 

#
##	Future release with tarball module 
#
#        tf = tarfile.open(tgzfile,"w:gz")
#        tf.dereference=True
#        [tf.add(f) for f in outputlist]
#        tf.close()


############################################################################################

input_sandbox = ['/home/fifieldt/belle-monitoring/workspace/fifieldt/LocalAMGA/6/input/_input_sandbox_6.tgz', '/home/fifieldt/belle-monitoring/workspace/fifieldt/LocalAMGA/6/input/_input_sandbox_6_master.tgz']
sharedoutputpath= '/home/fifieldt/belle-monitoring/workspace/fifieldt/LocalAMGA/6/output/'
outputpatterns = []
appscriptpath = ['echo', 'Hello World']
environment = {}
workdir = '/tmp/tmp1R2Rgb'

statusfilename = os.path.join(sharedoutputpath,'__jobstatus__')

try:
  statusfile=file(statusfilename,'w')
except IOError,x:
  print 'ERROR: not able to write a status file: ', statusfilename
  print 'ERROR: ',x
  raise
  
line='START: '+ time.strftime('%a %b %d %H:%M:%S %Y',time.gmtime(time.time())) + os.linesep
statusfile.writelines(line)
statusfile.flush()

os.chdir(workdir)

import sys
sys.path.insert(0, '/opt/exp_soft/atlas/ganga/install/latest/python')
sys.path.insert(0,os.path.join(os.getcwd(),PYTHON_DIR))
try:
    import subprocess
except ImportError,x:
    sys.path.insert(0,'/imports/ExpSoft/atlas/ganga/external/subprocess/2.4.2/noarch/lib/python2.2/site-packages')
    import subprocess
try:
    import tarfile
except ImportError,x:
    sys.path.insert(0,'/imports/ExpSoft/atlas/ganga/external/tarfile/2.4.2/noarch/lib/python2.2/site-packages')
    import tarfile

for f in input_sandbox:
  getPackedInputSandbox(f)

for key,value in environment.iteritems():
    os.environ[key] = value

outfile=file('stdout','w')
errorfile=file('stderr','w')

sys.stdout=file('./__syslog__','w')
sys.stderr=sys.stdout

def createMonitoringObject(): from Ganga.Lib.MonitoringServices.Composite import CompositeMonitoringService; return CompositeMonitoringService([],[])

monitor = createMonitoringObject()
monitor.start()

import subprocess

try:
 child = subprocess.Popen(appscriptpath, shell=False, stdout=outfile, stderr=errorfile)
except OSError,x:
 file('tt','w').close()
 print >> statusfile, 'EXITCODE: %d'%-9999
 print >> statusfile, 'PROBLEM STARTING THE APPLICATION SCRIPT: %s %s'%(appscriptpath,str(x))
 statusfile.close()
 sys.exit()
 
print >> statusfile, 'PID: %d'%child.pid
statusfile.flush()

result = -1

try:
  while 1:
    result = child.poll()
    if result is not None:
        break
    outfile.flush()
    errorfile.flush()
    monitor.progress()
    time.sleep(0.3)
finally:
    monitor.progress()
    sys.stdout=sys.__stdout__
    sys.stderr=sys.__stderr__

monitor.stop(result)

outfile.flush()
errorfile.flush()

createOutputSandbox(outputpatterns,None,sharedoutputpath)

outfile.close()
errorfile.close()

from Ganga.Utility.files import recursive_copy

for fn in ['stdout','stderr','__syslog__']:
    try:
        recursive_copy(fn,sharedoutputpath)
    except Exception,x:
        print 'ERROR: (job'+'6'+')',x

line="EXITCODE: " + repr(result) + os.linesep
line+='STOP: '+time.strftime('%a %b %d %H:%M:%S %Y',time.gmtime(time.time())) + os.linesep
statusfile.writelines(line)
sys.exit()

