#!/bin/sh
#
#   evtgen-charged-09-all-e000041r001256-b20090127_0910.sh
#   ======================================================
#
    JOB_ID=1729238
#
#   The production version using b20070402_1209 or later,
#   with 2005 of CERN library.
#   Intended for x86_64 distributions.
#
#   NOTE: "qam_trg" is excluded from the analysis path.
#         The master index file is not made.
#
#         "qam_pi0" is excluded.
#
#	This file was automatically generated by mcprod_make_script.
#
#   The following environmental variables are optionally used:
#
#	MAILTO			: Mail address of the one to whom messages from
#				  the MC job are sent. Defaults to undefined.
#				  (No message is sent.)
#	BHOME			: Top directory name where the belle library
#				  resides. Defaults to /belle
#	BASF_NPROCESS		: Number of basf processes. Defaults to the
#				  number of CPU's, which is obtained using
#				  "grep -c '^processor' /proc/cpuinfo" command.
#	BELLE_POSTGRES_SERVER	: Name of the host where the Postgres server
#				  for the Belle calibration/run condition
#				  database is running. Defaults to "localhost"
#	BELLE_POSTGRES_PORT	: Port number for BELLE_POSTGRES_SERVER.
#				  Defaults to 5432.
#	MCPROD_INPUT_DIR	: Name of the directory where the input
#				  generator file is. Defaults to the current
#				  working directory.
#	MCPROD_ADDBG_DIR	: Name of the directory where the background
#				  data file for AddBG module is. Defaults to
#				  the current working dir.
#	MCPROD_OUTPUT_DIR	: Name of the directory where the output mdst
#				  file is created. Defaults to the current
#				  working dir.
#	MCPROD_INDEX_DIR	: Name of the directory where the master index
#				  files are created. Defaults to tha value of
#				  MCPROD_OUTPUT_DIR
#	MCPROD_LOG_DIR		: Name of the directory where the job log file
#				  is written. Defaults to the current working
#				  dir.
#	MCPROD_HISTO_DIR	: Name of the directory where the histogram
#				  files are written. Defaults to the current
#				  working dir.
#	MCPROD_GSIM_DAT_DIR	: Name of the directory where the temporary
#				  parameter file for GSIM module is generated.
#				  Defaults to the current working dir.
#	EXTRA_PATH		: Directory names to add to the default command
#				  search path.
#	EXTRA_LIBRARY_PATH	: Directory names to add to the default value
#				  of LD_LIBRARY_PATH.
#       MCPROD_CERN_LEVEL       : If you use RHEL or a clone, CERN_LEVEL is
#                                 auto-detected. If you use another distribution,
#                                 you need to set this variable to 2005 or 2006
#                                 depending on which RPM you're using.

ulimit -c 0

if [ -n "${MAILTO}" ]
then
  notify_err=" Mail -s [MCPROD]:Error:evtgen-charged-09-all-e000041r001256-b20090127_0910:Terminated. ${MAILTO}"
  notify_done="Mail -s [MCPROD]:Done:evtgen-charged-09-all-e000041r001256-b20090127_0910:Finished.    ${MAILTO}"
fi

#
# check the redhat Linux version (vernum)
#
# RHEL5 needs CERN 2006
# RHEL4 needs CERN 2005
# other distribution, it depends

rlsfile=/etc/redhat-release

grep -q -e "Red Hat Enterprise Linux" -e "CentOS" -e "Scientific Linux" $rlsfile 2> /dev/null
if [ $? -eq 0 ]; then 
tmp=`cat $rlsfile | tr '[:alpha:][:punct:][:cntrl:]' ' '`
vernum=`echo $tmp | awk '{print $1}'`
relnum=`echo $tmp | awk '{print $2}'`
##echo "redhat $vernum $relnum"

if [ ${vernum} -eq 5 ]; then
CERN_LEVEL=2006
else
CERN_LEVEL=2005
fi

else
#echo "not redhat"
if [ -n "${MCPROD_CERN_LEVEL}" ]; then
CERN_LEVEL=$MCPROD_CERN_LEVEL
else
echo "You need to set MCPROD_CERN_LEVEL"
exit
fi
fi

unset vernum relnum tmp


BHOME=${BHOME:-/belle}
BELLE_LEVEL=b20090127_0910
BELLE_TOP_DIR=${BHOME}/belle/${BELLE_LEVEL}
BELLE_DEBUG=opt
BELLE_RUN_DIR=${BELLE_TOP_DIR}/x86_64-unknown-linux-gnu/${BELLE_DEBUG}
CERN=${CERN:-${BHOME}/cern}
CERN_ROOT=${CERN}/${CERN_LEVEL}
PATH=${BHOME}/local/bin:/usr/local/bin:/usr/X11R6/bin:/usr/bin:/usr/sbin:/bin
PATH=${PATH}:${BELLE_RUN_DIR}/bin
[ -n "${EXTRA_PATH}" ] && \
  PATH=${PATH}:${EXTRA_PATH}
LD_LIBRARY_PATH=${BHOME}/local/lib:${BELLE_RUN_DIR}/lib/so:${BELLE_RUN_DIR}/bin
LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${CERN_ROOT}/lib64:${CERN_ROOT}/lib64/so
[ -n "${EXTRA_LIBRARY_PATH}" ] && \
  LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${EXTRA_LIBRARY_PATH}
BASF_MODULE_DIR=.:${BELLE_RUN_DIR}/bin
PANTHER_TABLE_DIR=${BELLE_TOP_DIR}/share/tables

BELLE_POSTGRES_SERVER=${BELLE_POSTGRES_SERVER:-localhost}
BELLE_POSTGRES_PORT=${BELLE_POSTGRES_PORT:-5432}

input_dir=${MCPROD_INPUT_DIR:-.}
input_file=${input_dir}/charged-e000041r001256-9.pgen
addbg_dir=${MCPROD_ADDBG_DIR:-.}
ADDBG_DAT=${addbg_dir}/Background-e000041r001256-b20050311_0738.addbg_index
output_dir=${MCPROD_OUTPUT_DIR:-.}
hostname=`hostname`
changeme=`date +%s%N`
output_file=${output_dir}/evtgen-charged-09-all-e000041r001256-b20090127_0910.mdst-${changeme}-${hostname}
index_dir=${MCPROD_INDEX_DIR:-${output_dir}}
log_dir=${MCPROD_LOG_DIR:-.}
log_file=${log_dir}/evtgen-charged-09-all-e000041r001256-b20090127_0910.log-${changeme}-${hostname}
err_summary=${log_dir}/evtgen-charged-09-all-e000041r001256-b20090127_0910.status-${changeme}-${hostname}
scan_log=${log_dir}/evtgen-charged-09-all-e000041r001256-b20090127_0910-scan.log-${changeme}-${hostname}
histo_dir=${MCPROD_HISTO_DIR:-.}
histo=${histo_dir}/evtgen-charged-09-all-e000041r001256-b20090127_0910.his-${changeme}-${hostname}
gsim_dat_dir=${MCPROD_GSIM_DAT_DIR:-.}
gsim_dat=${gsim_dat_dir}/gsim-evtgen-charged-09-all-e000041r001256-b20090127_0910.dat

master_index_file=${index_dir}/evtgen-charged-09-all-e000041r001256-b20090127_0910.index

GSIM_EXP=41
GSIM_RUN=1256

unset KLM_EFF_DB
if [ ${GSIM_EXP} -eq 15 -a ${GSIM_RUN} -ge 566 ]
then
  KLM_EFF_DB=${BELLE_TOP_DIR}/share/data-files/klm/klm_eff_db_exp15_hvoff.dat
  export KLM_EFF_DB
fi

BELLE_MESSAGE_LEVEL=${BELLE_MESSAGE_LEVEL:-RESULT}
BASF_NPROCESS=${BASF_NPROCESS:-`grep -c '^processor' /proc/cpuinfo`}
FPDA_TIMEOUT=7200
BASF_USER_INIT=geant_init.so
BASF_USER_IF=user_if.so

export BHOME
export BELLE_LEVEL
export BELLE_TOP_DIR
export BELLE_DEBUG
export BELLE_RUN_DIR
export CERN
export CERN_LEVEL
export CERN_ROOT
export PATH
export LD_LIBRARY_PATH
export BASF_MODULE_DIR
export PANTHER_TABLE_DIR
export BELLE_POSTGRES_SERVER
export BELLE_POSTGRES_PORT
export BELLE_MESSAGE_LEVEL
export ADDBG_DAT
export BASF_NPROCESS
export FPDA_TIMEOUT
export BASF_USER_INIT
export BASF_USER_IF
export GSIM_EXP
export GSIM_RUN

psql -h ${BELLE_POSTGRES_SERVER} -p ${BELLE_POSTGRES_PORT} -d svd -c "\q" >/dev/null
if [ ${?} -ne 0 ]
then
  message="${0} : `date` : Job failed to start.
  PSQL failed to connect ${BELLE_POSTGRES_SERVER}"
  echo "${message}" 1>&2
  echo "${message}" | ${notify_err} 1>&2
  echo 0 0 0
  exit 1
fi

if [ ! -r ${input_file} ]
then
  message="${0} : `date` : Job failed to start.
  Could not read ${input_file}"
  echo "${message}" 1>&2
  echo "${message}" | ${notify_err} 1>&2
  echo 0 0 0
  exit 1
fi

addbg_node=`echo ${ADDBG_DAT} | cut -f 1 -d ':'`
[ "${addbg_node}" = "${ADDBG_DAT}" ] && addbg_node=

if [ -z "${addbg_node}" -a ! -r "${ADDBG_DAT}" ]
then
  message="${0} : `date` : Job failed to start.
  Could not read ${ADDBG_DAT}"
  echo "${message}" 1>&2
  echo "${message}" | ${notify_err} 1>&2
  echo 0 0 0
  exit 1
fi

sed "s/^EXPN.*/EXPN ${GSIM_EXP}/;s/^RUNG.*/RUNG ${GSIM_RUN} 1/" \
  ${BELLE_TOP_DIR}/share/data-files/gsim/gsim.dat > ${gsim_dat}
if [ ! -r ${gsim_dat} ]
then
  message="${0} : `date` : Job failed to start.
  Could not create ${gsim_dat}"
  echo "${message}" 1>&2
  echo "${message}" | ${notify_err} 1>&2
  echo 0 0 0
  exit 1
fi

gen_nevent=22955

start_time=`date`
echo "${0} : ${start_time} : Job ${JOB_ID} started."  1>&2 
echo "       ${gen_nevent} events to simulate."       1>&2

basf <<EOF_BASF >${log_file}

path add_module main ProcessHeader
path add_module main cdctable genunpak
path add_module main bpsmear gsim acc_mc calsvd addbg
path add_module main tof_datT0TS tsimtof calcdc l4 evtime l0svd tsimsvd
path add_module main reccdc recsvd
path add_module main trasan TOFt0 trak trkmgr AnadEdx ext
path add_module main rectof rececl_cf rececl_match rececl_gamma rececl_pi0
path add_module main rec_acc muid_set muid_dec klid efcclust
path add_module main v0finder rec2mdst evtvtx evtcls

path add_module main l0chk4mdst
path add_module main sakura
path add_module main qam qam_svd2 qam_cdc qam_ecl qam_tof qam_acc qam_klm
#path add_module main qam_pi0
path add_module main AnadEdx_data_mon kid_mon eid_mon mumu_mon
path add_module main svd2_me_mon acc_center_mon
path add_module main QEDMon HadronMon hodaka

module put_parameter gsim GSIM_INPUT\\${gsim_dat}

module put_parameter addbg LUMDEP\1

module put_parameter bpsmear ip_nominal_x\0.44558600E-01
module put_parameter bpsmear ip_nominal_y\0.32153400E-01
module put_parameter bpsmear ip_nominal_z\-0.10337600E-01

module put_parameter bpsmear sigma_ip_x\0.74755500E-02
module put_parameter bpsmear sigma_ip_y\0.43690000E-03
module put_parameter bpsmear sigma_ip_z\0.33872600E+00

module put_parameter evtcls classification_level\0
module put_parameter l4 debug\0

initialize

histogram define ${histo}

table save mdst_all
table save evtcls_all
table save evtvtx_all
table save gsim_rand
table save gen_hepevt
table save mctype
table save level4_all

table save bgtbl_info
table save dattof_trgl0
table save reccdc_timing

output open   ${output_file}
process_event ${input_file}
terminate
EOF_BASF

basf_error=${?}
basf_finished=`date`

if [ -f flukaerr.dat ]; then
  cat flukaerr.dat >>${log_file}
  rm -f flukaerr.dat
fi

job_status=`awk \
'BEGIN{finish=0;ok=0;l4stat=0;totev=0;l4ev=0} \
 /BASF Execution Statistics/                  {finish=1} \
 /^RESULT : l4: L4> \*\** Stat\. Summary \*\**/{if(finish==1){ok=1;l4stat=1}} \
 /^RESULT : l4: L4> \*\** End of Summary \*\**/{l4stat=0} \
 /^RESULT : l4: L4> #input events/             {if (l4stat==1) {totev=$8}} \
 /^RESULT : l4: L4> #output events/            {if (l4stat==1) {l4ev=$8}} \
 END{if (ok==1) {printf "OK       "} else {printf "not-ready"}; \
                 printf " %10d %10d\n", totev,l4ev}' \
  ${log_file}`

job_ok=`echo ${job_status} | cut -f 1 -d ' '`
nevent=`echo ${job_status} | cut -f 2 -d ' '`
[ -z "${nevent}" ] && nevent=0

echo "${0} : ${basf_finished} : Basf job finished." 1>&2
echo "  ${nevent} events simulated." 1>&2
echo "  basf_error = ${basf_error} : status = ( ${job_status} )" 1>&2

sum_status=`cat ${output_file}* | sum`
chksum=` echo ${sum_status} | cut -f 1 -d ' '`
outsize=`echo ${sum_status} | cut -f 2 -d ' '`
[ -z "${chksum}" ]  && chksum=0
[ -z "${outsize}" ] && outsize=0

chksum_finished=`date`

echo "${0} : ${chksum_finished} : Output check-sum calculated: = ${chksum}" \
  1>&2
echo "  Output file size = ${outsize} kB" 1>&2

error=1
[ "${job_ok}" = "OK" -a "${nevent}" -eq "${gen_nevent}" -a \
  "${basf_error}" -eq 0 ] && \
  error=0

BASF_NPROCESS=0
export BASF_NPROCESS

echo "${0} : `date` : Scanning the output mdst file..." 1>&2

basf <<EOF_SCAN >${scan_log}

path create main
path add_module main evtcls
path add_module main table_list
initialize
process_event    ${output_file} 0
module display evtcls     
terminate
EOF_SCAN

scan_basf_error=${?}
scan_basf_finished=`date`

scan_status=`awk \
 'BEGIN{ok=0;totev=0;readev=0;presel=0;recon=0} \
  /^RESULT : evtcls: *results of pre-selection/{presel=1;recon=0} \
  /^RESULT : evtcls: *results print out/       {presel=0;recon=1} \
  /^RESULT : evtcls: *# of total read events/{ if (presel==1){totev=$10} else \
                          { if (recon==1){readev=$10} } } \
  /^RESULT : evtcls: *hadronic event statistics summary/{ok=1} \
  END{if (ok==1) {printf "OK       "} else {printf "not-ready"}; \
      if (totev==0) totev=readev; \
      printf " %10d %10d\n", totev, readev}' \
  ${scan_log}`
scan_ok=` echo ${scan_status} | cut -f 1 -d ' '`
scan_nev=`echo ${scan_status} | cut -f 3 -d ' '`
[ -z "${scan_nev}" ] && scan_nev=0

echo "${0} : ${scan_basf_finished} : Output scan finished." 1>&2
echo "  ${scan_nev} events found." 1>&2
echo "  basf_error = ${scan_basf_error} : status = ( ${scan_status} )" 1>&2

nev_diff=`expr "${gen_nevent}" - "${scan_nev}"`
[ -z "${nev_diff}" ] && nev_diff=99

scan_error=0
[ ${scan_basf_error} -eq 0    -a \
  "${scan_ok}"       =   "OK" -a \
  "${nev_diff}"      -eq 0 ] || \
  scan_error=2

# Master index file is not created.

dblist_error=0
master_index_error=0

if [ "${basf_error}"      -eq 0 -a \
     "${scan_basf_error}" -eq 0 -a "${scan_error}" -eq 2 -a \
     "${nev_diff}"        -ge 0 -a "${nev_diff}"   -le 4 ]
then
  error=0
  scan_error=0
fi

error=`expr ${error} + ${scan_error} + ${master_index_error}`
finish_time=`date`

if [ ${error} -ne 0 ]
then
  m1="${0} : Job ${JOB_ID} terminated."
  notify="${notify_err}"
else
  m1="${0} : Job ${JOB_ID} finished."
  notify="${notify_done}"
fi
  numbers="${gen_nevent} generated, ${nevent} simulated, ${scan_nev} written."
  message="${m1}
  The output file name  : ${output_file}
  Job started at        : ${start_time}
  Job finished at       : ${finish_time}
  Job executed on       : ${HOSTNAME}
  Job error code        : ${error}
  GSIM job finished at  : ${basf_finished}
  basf error code       : ${basf_error}
  Job status            : ${job_status}
  Output scan status    : ${scan_status}
  Output size           : ${outsize} kB
  Check-sum finished at : ${chksum_finished}
  Output file check-sum : ${chksum}
  Numbers of Events     : ${numbers}"

  echo "${message}"  >${err_summary}
  echo "${message}" 1>&2
  echo "${message}" | ${notify} 1>&2

if [ ${error} -eq 0 ]
then
  [ -r ${scan_log} ] && rm ${scan_log}
  [ -r ${gsim_dat} ] && rm ${gsim_dat}
fi

echo ${scan_nev} ${chksum} ${outsize}
exit ${error}
