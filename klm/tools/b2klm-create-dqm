#!/usr/bin/env python3
# -*- coding: utf-8 -*-

'''Script used to generate KLM DQM plots.'''

__author__ = 'Giacomo De Pietro'
__copyright__ = '2019 - Belle II Collaboration'

import basf2
import sys
import argparse

def arg_parser():

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-i', '--input',
                        required=True,
                        nargs='+',
                        help='input file names; it is possible to use the wildcard "*" to pass multiple files in input',
                        metavar='FILE')
    parser.add_argument('-n', '--events',
                        default=-1,
                        type=int,
                        help='maximum number of events to be processed',
                        metavar='EVENTS')
    parser.add_argument('--prepend_gt',
                        default='',
                        type=str,
                        nargs='*',
                        help='Global Tags to be prepended',
                        metavar='GT')
    parser.add_argument('--append_gt',
                        default='',
                        type=str,
                        nargs='*',
                        help='Global Tags to be appended',
                        metavar='GT')
    parser.add_argument('--raw',
                        default=False,
                        action='store_true',
                        help='flag for raw input files; it must be used if data must be unpacked and reconstructed from scratch')
    return parser

if __name__ == "__main__":

    args = arg_parser().parse_args()

    raw_data = args.raw

    input_files = args.input

    max_events = args.events

    # Check if we are using .sroot files or not
    sroot = False
    if input_files[0].endswith('.sroot'):
        sroot = True
        # If .sroot files are used, we must disable the GT replay
        basf2.conditions.override_globaltags(['online'])
        basf2.B2INFO('No Global Tag is set in FileMetaData; base GT automatically set to "online"')
    elif input_files[0].endswith('.root'):
        # Disable the GT replay also if no GT is set in FileMetaData
        metadata = basf2.get_file_metadata(input_files[0])
        if metadata.getDatabaseGlobalTag() == '':
            raw_data = True
            basf2.conditions.override_globaltags(['online'])
            basf2.B2INFO('No Global Tag is set in FileMetaData; base GT automatically set to "online"')
        else:
            basf2.B2FATAL('Please provide a valid list of .sroot or .root input files.')

    if not (args.prepend_gt == ''):
        for gt in reversed(args.prepend_gt):
            basf2.conditions.prepend_globaltag(gt)

    if not (args.append_gt == ''):
        for gt in args.append_gt:
            basf2.conditions.append_globaltag(gt)

    # Set the global log level
    basf2.set_log_level(basf2.LogLevel.INFO)

    # Create path
    main = basf2.Path()

    # Input
    if sroot:
        main.add_module('SeqRootInput',
                        inputFileNames=input_files)
    else:
        main.add_module('RootInput',
                        inputFileNames=input_files)

    # Progress
    main.add_module('Progress')
        
    # Histogram manager
    main.add_module('HistoManager',
                    histoFileName='KLMDQM.root')

    # Unpacker and reconstruction.
    if (sroot or raw_data):
        # Gearbox
        main.add_module('Gearbox')
        
        # Geometry
        main.add_module('Geometry')

        # Unpacker
        main.add_module('KLMUnpacker')

        # BKLM reconstruction
        main.add_module('BKLMReconstructor')

    # DQM
    main.add_module('KLMDQM')

    # Process events
    basf2.process(path=main,
                  max_event=max_events)

    # Print the statistics
    print(basf2.statistics)
