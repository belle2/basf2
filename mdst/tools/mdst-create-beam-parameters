#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import basf2
from conditions_db import ConditionsDB
from ROOT.Belle2 import IntervalOfValidity, BeamParametersFitter

# Arguments.
parser = argparse.ArgumentParser()
parser.add_argument('--input-tag', required=True, default=None,
                    help="Input global tag.")
arguments = parser.parse_args()

# Setup database.
basf2.conditions.override_globaltags()
basf2.conditions.prepend_globaltag(arguments.input_tag)
db = ConditionsDB()

def get_iov_list(payload_name):
    iovs = db.get_iovs(arguments.input_tag, payload_name)
    iovs2 = []
    for (payloadId, firstExp, firstRun, finalExp, finalRun) in iovs:
        iov = IntervalOfValidity(firstExp, firstRun, finalExp, finalRun)
        iovs2.append(iov)
    for i in range(len(iovs2)):
        j = i + 1
        while j < len(iovs2):
            if (iovs2[i].overlaps(iovs2[j])):
                basf2.B2FATAL('Overlapping IOVs found.')
            j = j + 1
    return iovs2

# Get intervals of validity for calibrated beam payloads.
invariant_mass_iovs = get_iov_list('CollisionInvariantMass')
boost_vector_iovs = get_iov_list('CollisionBoostVector')
beam_spot_iovs = get_iov_list('BeamSpot')

# Get list of intervals of validity for combination of
# CollisionBoostVector and CollisionInvariantMass.
collision_iovs = []
for iov1 in invariant_mass_iovs:
    for iov2 in boost_vector_iovs:
        overlap = iov1.overlap(iov2)
        if overlap.empty():
            continue
        collision_iovs.append(overlap)
collision_iovs.sort(key = lambda x: (x.getExperimentLow(), x.getRunLow()))

# Get beam parameters for each interval.
beam_parameters = []
fitter = BeamParametersFitter()
fitter.setAngleHER(0.0415);
fitter.setAngleLER(-0.0415);
fitter.setAngleError(0.0001);
fitter.setVerbose(False)
for iov in collision_iovs:
    fitter.setIntervalOfValidity(iov)
    fitter.fit()
    beam_parameters.append(fitter.getBeamParameters())

# Get list of validity intervals.
full_iovs = []
for i in range(len(collision_iovs)):
    iov1 = collision_iovs[i]
    for iov2 in beam_spot_iovs:
        overlap = iov1.overlap(iov2)
        if overlap.empty():
            continue
        full_iovs.append([overlap, i])
full_iovs.sort(key = lambda x: (x[0].getExperimentLow(), x[0].getRunLow()))

# Fill beam spot information.
for iov in full_iovs:
    fitter.setIntervalOfValidity(iov[0])
    fitter.setBeamParameters(beam_parameters[iov[1]])
    fitter.fillVertexData()
    fitter.importBeamParameters()
