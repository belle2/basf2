#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""\
Tool to combine signal and background MC to a train and test ROOT file.

This tool is a helper script to combine a set of MC from signal and background files into a single train and test file.

--examples--
.. rubric:: Examples

* Simple example of combining signal and background in output_train.root and output_test.root::

    $ %(prog)s -s /path/to/SignalMC.root -b /path/to/BackgroundMC.root

* More complex example:

    $ %(prog)s -s /path/to/SignalMC.root -b /path/to/BackgroundMC.root -t TREENAME --cut_sig "Mbc>5.22"

"""

import ROOT
from ROOT import PyConfig
PyConfig.IgnoreCommandLineOptions = True

import argparse
import numpy as np
from root_pandas import read_root
from sklearn.model_selection import train_test_split
import os


def getCommandLineOptions():
    """ Parses the command line options of the fei and returns the corresponding arguments. """
    parser = argparse.ArgumentParser()
    # Specify the possible arguments
    parser = argparse.ArgumentParser(
        description=__doc__.split("--examples--")[0],
        epilog=__doc__.split("--examples--")[1],
        formatter_class=argparse.RawDescriptionHelpFormatter,
        usage="%(prog)s [optional arguments] [--] program [program arguments]"
    )

    parser.add_argument('-s', '--data_sig', dest='data_sig', type=str, required=True, action='append', nargs='+',
                        help='Location of signal data root file(s).')
    parser.add_argument('-b', '--data_bkg', dest='data_bkg', type=str, required=True, action='append', nargs='+',
                        help='Location of backgrouns data root file(s).')
    parser.add_argument('-o', '--output', dest='output', type=str, default='output',
                        help='Prefix for the output files (default: output)')
    parser.add_argument('-t', '--treename', dest='treename', type=str, default='tree',
                        help='Tree name in data file (default: tree)')
    parser.add_argument('--columns', dest='columns', type=str, required=False, action='append', nargs='+',
                        help='(Optional) Columns to consider.', default=None)
    parser.add_argument('--cut', dest='cut', type=str, default=None,
                        help='(Optional) Cut on both signal and background.')
    parser.add_argument('--cut_sig', dest='cut_sig', type=str, default=None,
                        help='(Optional) Cut on signal data, replaces --cut for signal.')
    parser.add_argument('--cut_bkg', dest='cut_bkg', type=str, default=None,
                        help='(Optional) Cut on background data, replaces --cut for background.')
    parser.add_argument('--ftest', dest='ftest', type=float, default=0.2,
                        help="""Fraction of data used for the test file, (default: 0.2)""")
    parser.add_argument('--fsig', dest='fsig', type=float, default=None,
                        help="(Optional) Fraction of signal.")
    parser.add_argument('--fillnan', dest='fillnan', action='store_true',
                        help='(Optional) Fill nan and inf values with actual numbers')
    parser.add_argument('--signalcolumn', dest='signalcolumn', type=str, default='Signal',
                        help='Name of the new signal column (default: Signal)')
    parser.add_argument('--random_state', dest='random_state', type=int, default=None,
                        help='Random state of shuffling between train and test (default: None)')
    args = parser.parse_args()
    return args


if __name__ == '__main__':

    ROOT.gROOT.SetBatch(True)

    old_cwd = os.getcwd()
    args = getCommandLineOptions()

    cut_sig = args.cut_sig if args.cut_sig is not None else args.cut
    cut_bkg = args.cut_bkg if args.cut_bkg is not None else args.cut

    data_sig = sum(args.data_sig, [])
    data_bkg = sum(args.data_bkg, [])

    print("Load data")

    df_sig = read_root(data_sig, args.treename, args.columns, where=cut_sig)
    df_bkg = read_root(data_bkg, args.treename, args.columns, where=cut_bkg)

    n_sig = len(df_sig)
    n_bkg = len(df_bkg)

    print("- %d signal candidates selected." % n_sig)
    print("- %d background candidates selected." % n_bkg)

    # Add signal column

    df_sig[args.signalcolumn] = 1
    df_bkg[args.signalcolumn] = 0

    if args.fsig is not None:
        print('Adjusting signal/background ratio from %f to %f.' % (n_sig/float(n_bkg+ n_sig), args.fsig))
        assert 0 < args.fsig < 1, 'Please provide a signal fraction within [0,1]'

        if n_sig>=n_bkg:
            fs = (args.fsig*n_bkg) / ((1-args.fsig)*n_sig)
            print("\t Warning: sampling down signal")
            df_sig = df_sig.sample(int(n_sig*fs))

        else:
            fb = (n_sig/float(n_bkg))*(1/args.fsig - 1)
            print("\t Warning: sampling down background")
            df_bkg = df_bkg.sample(int(fb*n_bkg))

    df = df_bkg.append(df_sig, ignore_index=True)

    if args.fillnan:
        print('- Replacing NaN values')
        for c in df.columns:
            df[c] = np.nan_to_num(df[c])

    print('Splitting train/test with fraction', args.ftest)

    df_train, df_test = train_test_split(df, test_size=args.ftest, random_state=args.random_state)

    print('Creating output files\n\t -  %s \n\t -  %s' % (args.output + '_train.root', args.output + '_test.root'))

    df_train.to_root(args.output + '_train.root', args.treename)
    df_test.to_root(args.output + '_test.root', args.treename)


