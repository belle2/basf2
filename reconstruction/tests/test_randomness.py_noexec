##########################################################################
# basf2 (Belle II Analysis Software Framework)                           #
# Author: The Belle II Collaboration                                     #
#                                                                        #
# See git log for contributors and copyright holders.                    #
# This file is licensed under LGPL-3.0, see LICENSE.md.                  #
##########################################################################

'''
We generate, simulate and reconstruct few mu-mu+ events
'''

import basf2 as b2
import generators as ge
import simulation as si
import reconstruction as re
import mdst

# We need to suppress the warnings from Tensorflow
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'


class PrintRandomNumber(b2.Module):
    '''Simple module for printing a random number per event.'''

    def event(self):
        '''Event method.'''
        import ROOT  # noqa
        b2.B2INFO(f'A random number is {ROOT.gRandom.Uniform()}')


class PrintPIDLikelihoods(b2.Module):
    '''Simple module for printing PID likelihoods.'''

    def initialize(self):
        '''Initialize method.'''
        import ROOT.Belle2 as B2  # noqa
        self.pid_detectors = []
        it = B2.Const.PIDDetectors.c_set.begin()
        while True:
            if it.getDetector() != B2.Const.KLM:
                self.pid_detectors.append(B2.Const.PIDDetectorSet(it.getDetector()))
            it.increment()
            if it == B2.Const.PIDDetectors.c_set.end():
                break
        self.pid_hypotheses = [B2.Const.ChargedStable(B2.Const.chargedStableSet.at(index))
                               for index in range(B2.Const.chargedStableSet.size())]
        self.pid_likelihoods = B2.PyStoreArray('PIDLikelihoods')
        self.pid_likelihoods.isRequired()

    def event(self):
        '''Event method.'''
        for pl in self.pid_likelihoods:
            for ph in self.pid_hypotheses:
                for pd in self.pid_detectors:
                    b2.B2INFO(f'PID likelihood from {pd} for {ph} hypothesis: {pl.getLogL(ph, pd)}')


main = b2.Path()

main.add_module('EventInfoSetter')

main.add_module('Progress')

main.add_module(PrintRandomNumber())

ge.add_kkmc_generator(main, 'tau-tau+')

main.add_module(PrintRandomNumber())

si.add_simulation(main)

main.add_module(PrintRandomNumber())

re.add_reconstruction(main)

main.add_module(PrintRandomNumber())

mdst.add_mdst_dump(main, print_untested=False, print_mutable=False)

main.add_module(PrintPIDLikelihoods())

b2.process(main)
