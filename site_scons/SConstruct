import os, re, platform
from distutils import sysconfig
import config


# build options
AddOption('--color', dest = 'color', nargs = 1, default = 'off', action = 'store', help = 'Enable color output. Possible values are: off, light, dark')
AddOption('--verbose', dest = 'verbose', action = 'store_true', default = False, help='Enable verbose output')


# get the sub directory name for architecture and build option dependent files
if not os.environ.has_key('BELLE2_SUBDIR'):
    print 'Belle II software environment is not set up.'
    print '-> Execute "setuprel" in your local release directory.'
    Exit(1)
subdir = os.environ['BELLE2_SUBDIR']

# create construction environment
global_env = Environment(ENV = os.environ,
                         tools = ['default', 'root_dict', 'process_dir', 'reg_map', 'output'],
                         BUILDERS = {},
                         BUILDDIR = os.path.join('#build', subdir),
                         INCDIR = '#include',
                         LIBDIR = os.path.join('#lib', subdir),
                         BINDIR = os.path.join('#bin', subdir),
                         MODDIR = os.path.join('#modules', subdir),
                         DATADIR = '#data',
                         EXTDIR = '#externals',
                         EXTINCDIR = os.path.join('$EXTDIR', 'include'),
                         EXTLIBDIR = os.path.join('$EXTDIR', 'lib', subdir),
                         EXTBINDIR = os.path.join('$EXTDIR', 'bin', subdir),
                         CCFLAGS = ['-Wall'],
                         CPPDEFINES = {'_PACKAGE_': '\\"$PACKAGE\\"'},
                         CPPPATH = ['include', '$EXTINCDIR', sysconfig.get_python_inc()],
                         LIBPATH = ['$LIBDIR', '$EXTLIBDIR', os.path.join('$EXTDIR', 'root', 'lib')],
                         TOOLS_LIBS = {},
                         TOOLS_LIBPATH = {},
                         TEST_LIBS = [],
                         TEST_FILES = [])

# check for debug flag
option = os.environ['BELLE2_OPTION']
if option == 'debug':
    global_env.Append(CCFLAGS = '-g')
elif option == 'opt':
    global_env.Append(CCFLAGS = '-O3')
else:
    print 'Aborted because of unknown build option:', option
    Exit(1)

# use central release as repository if it is set up
repository = None
if os.environ.has_key('BELLE2_RELEASE_DIR'):
    repository = os.environ['BELLE2_RELEASE_DIR']
    global_env.Repository(repository)

# set variant directory for object files
VariantDir(global_env['BUILDDIR'], '.', duplicate = 0)


# check for required packages and configure the environment
if (not global_env.GetOption('clean')) and (not global_env.GetOption('help')):
    if not config.configure(global_env):
        Exit(1)

# loop over directory entries and filter out package directories
exclude_dirs = ['build', 'include', 'lib', 'bin', 'modules', 'data']
local_packages = []
for entry in os.listdir(os.getcwd()):
    if entry.find('.') > -1 or os.path.isfile(entry) or entry in exclude_dirs:
        continue

    # we are in a package directory
    global_env['PACKAGE'] = entry
    local_packages.append(entry)

    global_env.ProcessDirectory(entry, False, None)

# loop over directory entries in central release
if repository:
    for entry in os.listdir(repository):
        if entry.find('.') > -1 or os.path.isfile(os.path.join(repository, entry)) or entry in exclude_dirs + local_packages:
            continue

        # we are in a package directory
        global_env['PACKAGE'] = entry

        global_env.ProcessDirectory(entry, False, repository)


# build global test executable
if len(global_env['TEST_FILES']) > 0:
    test = global_env.Program(os.path.join(global_env['BINDIR'], 'test_all'),
                              global_env['TEST_FILES'], LIBS = global_env['TEST_LIBS'])
    global_env.Alias('test_all', test)
    global_env.Alias('tests', test)
