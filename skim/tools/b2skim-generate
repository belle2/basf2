#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""\
Generate skim steering files.

This tool is for if you really need a steering file, and :ref:`b2skim-run <b2skim-run>`
doesn't cut it (such as if you are testing your skim on the grid).
"""


import argparse

from skim.registry import Registry


def get_argument_parser():
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument(
        "skims",
        choices=Registry.names + Registry.modules,
        nargs="+",
        metavar="Skim|Module",
        help=(
            "Skim/s to produce a steering file for. If more than one skim is provided, "
            "then a combined steering file is produced. If a module name is passed, "
            "the combined steering file will contain all skims in that module."
        ),
    )

    parser.add_argument(
        "-o",
        "--output-script-name",
        dest="OutputFilename",
        metavar="OutputFilename",
        nargs="?",
        default="",
        help=(
            "Location to output steering file. If flag not given, code is printed to "
            "screen. If flag is given with no arguments, writes to a file "
            "in the current directory using a default name."
        ),
    )

    return parser


def resolve_skims(SkimsOrModules):
    """
    Produce an ordered list of skims, by expanding any module names into a list of skims
    in that module.
    
    Raises:
        ValueError: Raised if a skim is listed twice.
    """
    skims = []

    for name in SkimsOrModules:
        if name in Registry.names:
            skims.append(name)
        elif name in Registry.modules:
            skims.extend(Registry.get_skims_in_module(name))

    duplicates = set([skim for skim in skims if skims.count(skim) > 1])
    if duplicates:
        raise ValueError(
            f"Skim{'s'*(len(duplicates)>1)} requested more than once: {', '.join(duplicates)}"
        )

    return skims

def make_header():
    header = """#!/usr/bin/env python3
# -*- coding: utf-8 -*-

\"\"\"Skim steering file generated by b2skim-generate.\"\"\"

"""
    return header


def make_imports(skims):
    # Group skims by module, so we can put together some nice import statements
    modules = sorted({Registry.get_skim_module(skim) for skim in skims})
    GroupedSkims = {
        module: sorted([
            skim for skim in skims if Registry.get_skim_module(skim) == module
        ])
        for module in modules
    }

    BasicImports = """import basf2 as b2
import modularAnalysis as ma
"""
    if len(skims) > 1:
        BasicImports += "from skimExpertFunctions import CombinedSkim\n"

    SkimImports = "".join(
        [
            f"from skim.{module} import {', '.join(skims)}\n"
            for (module, skims) in GroupedSkims.items()
        ]
    )

    return BasicImports + SkimImports


def make_processing(skims):
    if len(skims) == 1:
        skim = skims[0]
        MainProcessing = f"""
path = b2.Path()
skim = {skim}()
"""
    else:
        SkimObjects = [f"    {skim}(),\n" for skim in skims]
        MainProcessing = f"""
path = b2.Path()
skim = CombinedSkim(
{''.join(SkimObjects)})
"""
    MainProcessing += """
ma.inputMdstList("default", skim.TestFiles, path=path)
skim(path)
b2.process(path)

print(b2.statistics)
"""
    return MainProcessing


def main():
    parser = get_argument_parser()
    args = parser.parse_args()

    skims = resolve_skims(args.skims)
    SteeringFileCode = make_header() + make_imports(skims) + make_processing(skims)

    SkimName = skims[0] if len(skims) == 1 else ", ".join(skims) + " combined"

    if args.OutputFilename == "":
        # -o flag was not passed
        print(SteeringFileCode)
    elif args.OutputFilename is None:
        # -o flag was passed with no argument
        if len(skims) == 1:
            OutputFilename = f"{SkimName}.py"
        else:
            OutputFilename = f"CombinedSkim.py"

        with open(OutputFilename, "w") as f:
            f.write(SteeringFileCode)

        print(f"Steering file for {SkimName} skim written to {OutputFilename}")
    else:
        # -o flag was passed with argument
        OutputFilename = args.OutputFilename
        with open(OutputFilename, "w") as f:
            f.write(SteeringFileCode)
        print(f"Steering file for {SkimName} skim written to {OutputFilename}")


if __name__ == "__main__":
    main()
