#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""\
Generate skim steering files.

This tool is for if you really need a steering file, and `b2skim-run` doesn't cut
it (such as if you are testing your skim on the grid).
"""


import argparse

from skim.registry import Registry


def get_argument_parser():
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument(
        "skim",
        choices=Registry.names,
        metavar="Skim",
        help="Skim to produce a steering file for.",
    )

    parser.add_argument(
        "-o",
        "--output-udst-name",
        dest="OutputFilename",
        metavar="OutputFilename",
        nargs="?",
        default="",
        help=(
            "Location to output steering file. If flag not given, code is printed to "
            "screen. If flag is given with no arguments, writes to a file "
            "``<SKIMNAME>.py`` in the current directory"
        ),
    )

    return parser


def main():
    parser = get_argument_parser()
    args = parser.parse_args()

    skim = args.skim
    module = Registry.get_skim_module(skim)

    Imports = f"""import basf2 as b2
import modularAnalysis as ma
from skim.{module} import {skim}
"""

    Processing = f"""
path = b2.Path()
skim = {skim}()
ma.inputMdstList("default", skim.TestFiles, path=path)
skim(path)

ma.summaryOfLists(skim.SkimLists, path=path)
b2.process(path)

print(b2.statistics())
"""

    SteeringFileCode = Imports + Processing

    if args.OutputFilename == "":
        # -o flag was not passed
        print(SteeringFileCode)
    elif args.OutputFilename is None:
        # -o flag was passed with no argument
        OutputFilename = f"{skim}.py"
        with open(OutputFilename, "w") as f:
            f.write(SteeringFileCode)
        print(f"Steering file for {skim} skim written to {OutputFilename}")
    else:
        # -o flag was passed with argument
        OutputFilename = args.OutputFilename
        with open(OutputFilename, "w") as f:
            f.write(SteeringFileCode)
        print(f"Steering file for {skim} skim written to {OutputFilename}")


if __name__ == "__main__":
    main()
