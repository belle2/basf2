#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""General steering file for running skims."""

import argparse

import basf2 as b2
import modularAnalysis as ma
from skimExpertFunctions import CombinedSkim
from skim.registry import Registry


class CustomHelpFormatter(argparse.HelpFormatter):
    """Custom formatter for argparse which prints the valid choices for an
    argument in the help string.
    """

    def _get_help_string(self, action):
        if action.choices:
            return (
                action.help + " Valid options are: " + ", ".join(action.choices) + "."
            )
        else:
            return action.help


def get_argument_parser():
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=CustomHelpFormatter,
    )

    subparsers = parser.add_subparsers(
        help="Run just one skim, or multiple skims at once.", dest="action"
    )

    parser.add_argument(
        "-n",
        "--max-input-events",
        dest="MaxInputEvents",
        metavar="MaxInputEvents",
        type=int,
        help="Maximum number of input events to process.",
    )
    parser.add_argument(
        "-i",
        "--input-file-list",
        dest="InputFileList",
        metavar="InputFileList",
        nargs="+",
        help="Input file list",
    )

    single = subparsers.add_parser("single", help="Run a single skim.")

    single.add_argument(
        "skim", choices=Registry.names, metavar="Skim", help="Skim to run.",
    )

    single.add_argument(
        "-o",
        "--output-udst-name",
        dest="OutputFilename",
        metavar="Output uDST location",
        help="Location of output uDST file.",
    )

    combined = subparsers.add_parser(
        "combined", help="Run several skims as a combined steering file.",
    )

    combined.add_argument(
        "skims",
        nargs="+",
        choices=Registry.names,
        metavar="Skim",
        help="List of skims to run.",
    )

    module = subparsers.add_parser("module", help="Run all skims in a module.")

    module.add_argument(
        "module",
        choices=Registry.modules,
        metavar="module",
        help="Skim module to run all skims for as combined steering file.",
    )

    return parser


def main():
    parser = get_argument_parser()
    args = parser.parse_args()

    path = b2.Path()

    # Get the list of skims to run from the argument parsers
    if args.action == "single":
        SkimFunction = Registry.get_skim_function(args.skim)
        Skim = SkimFunction(OutputFileName=args.OutputFilename)
    elif args.action == "combined":
        skims = list({*args.combined.skims})
        SkimObjects = [Registry.get_skim_function(skim)() for skim in skims]
        Skim = CombinedSkim(*SkimObjects)
    elif args.action == "module":
        SkimObjects = [
            Registry.get_skim_function(skim)()
            for skim in Registry.get_skims_in_module(args.module)
        ]
        Skim = CombinedSkim(*SkimObjects)

    # Now proceed like a regular steering file
    InputFileList = args.InputFileList or [Skim.TestFile]

    ma.inputMdstList("default", InputFileList, path=path)
    Skim(path)

    MaxInputEvents = args.MaxInputEvents or 0
    b2.process(path, max_event=MaxInputEvents)
    print(b2.statistics())


if __name__ == "__main__":
    main()
