#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""General steering file for running skims."""

import argparse
from importlib import import_module

import basf2 as b2
import modularAnalysis as ma
import skimExpertFunctions as expert
from skim.registry import Registry


class CustomHelpFormatter(argparse.HelpFormatter):
    """Custom formatter for argparse which prints the valid choices for an
    argument in the help string.
    """

    def _get_help_string(self, action):
        if action.choices:
            return (
                action.help + " Valid options are: " + ", ".join(action.choices) + "."
            )
        else:
            return action.help


def get_argument_parser():
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=CustomHelpFormatter,
    )

    parser.add_argument(
        "skim", choices=Registry.names, metavar="Skim", help="Skim to be run"
    )
    parser.add_argument(
        "-n",
        "--max-input-events",
        dest="MaxInputEvents",
        metavar="MaxInputEvents",
        type=int,
        help="Maximum number of input events to process.",
    )
    parser.add_argument(
        "-i",
        "--input-file-list",
        dest="InputFileList",
        metavar="InputFileList",
        nargs="+",
        help="Input file list",
    )
    parser.add_argument(
        "-o",
        "--output-udst-name",
        dest="OutputFileName",
        metavar="OutputFileName",
        help="Location of output uDST file.",
    )

    return parser


def get_skim_function(SkimName):
    """Get the skim class constructor for the given skim.

    This is achieved by importing the module listed alongside the skim name in the
    `skim.registry.Registry`.

    Parameters:
        SkimName (str): Name of the skim to be found.

    Returns:
        SkimFunction: The class constructor for the given skim.
    """
    ModuleName = Registry.get_skim_module(SkimName)
    SkimModule = import_module(f"skim.{ModuleName}")
    return getattr(SkimModule, SkimName)


def main():
    parser = get_argument_parser()
    args = parser.parse_args()

    path = b2.Path()

    SkimFunction = get_skim_function(args.skim)
    Skim = SkimFunction(args.OutputFileName)

    InputFileList = args.InputFileList or [Skim.TestFile]

    ma.inputMdstList("default", InputFileList, path=path)
    Skim(path)

    args.MaxInputEvents = args.MaxInputEvents or 0
    b2.process(path, max_event=args.MaxInputEvents)
    print(b2.statistics())


if __name__ == "__main__":
    main()
