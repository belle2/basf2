#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""General steering file for running combined skims.

Note:
    I am probably going to delete this, and implement something in `b2skim-prod-json`
    to generate combined steering files as-needed.
"""

import argparse
from importlib import import_module

import basf2 as b2
import modularAnalysis as ma
from skimExpertFunctions import CombinedSkim, get_test_file


def get_argument_parser():
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument("skims", nargs="+", default=[], choices=["LeptonicUntagged", "SinglePhotonDark"])
    parser.add_argument("-n", "--max-input-events", type=int, default=0)
    parser.add_argument(
        "-i",
        "--input-file-list",
        dest="InputFileList",
        nargs="+",
        default=[get_test_file("MC12_mixedBGx1")],
    )
    parser.add_argument("-o", "--output-udst-name", dest="OutputFileName")

    return parser


def get_skim_function(SkimName):
    # TODO: Write generalised method of finding modules, using registry.py
    if SkimName == "LeptonicUntagged":
        SkimModule = import_module("skim.leptonic")
    elif SkimName == "SinglePhotonDark":
        SkimModule = import_module("skim.dark")
    else:
        raise NotImplementedError
    return getattr(SkimModule, SkimName)


def main():
    parser = get_argument_parser()
    args = parser.parse_args()

    path = b2.Path()
    ma.inputMdstList("default", args.InputFileList, path=path)

    SkimObjects = [get_skim_function(skim)() for skim in args.skims]
    SkimObject = CombinedSkim(*SkimObjects)
    SkimObject(path)

    b2.process(path, max_event=args.max_input_events)
    print(b2.statistics())


if __name__ == "__main__":
    main()
