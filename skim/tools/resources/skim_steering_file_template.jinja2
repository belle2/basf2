{#- Jinja2 template for skim steering files, to be used by b2skim-generate. -#}


#!/usr/bin/env python3

"""Skim steering file generated by b2skim-generate."""

import basf2 as b2
import modularAnalysis as ma
{% if backward_compatibility %}
# For backward compatibility, wrap skim imports in try-except block
try:
    # release 6+ imports
    {% if skims|length > 1 -%}
    {{ "    " }}from skim import CombinedSkim
    {% endif -%}
    {% for module, ModuleSkims in modules.items() -%}
        {{ "    " }}from skim.WGs.{{ module }} import {{ ", ".join(ModuleSkims) }}
    {% endfor -%}
except (ImportError, ModuleNotFoundError):
    # release 5 imports
    {% if skims|length > 1 -%}
    {{ "    " }}from skimExpertFunctions import CombinedSkim
    {% endif -%}
    {% for module, ModuleSkims in modules.items() -%}
        {{ "    " }}from skim.{{ module }} import {{ ", ".join(ModuleSkims) }}
    {% endfor -%}
{% else %}
    {#- Just write release 6 imports. -#}
    {% if skims|length > 1 -%}
    from skim import CombinedSkim
    {% endif -%}
    {% for module, ModuleSkims in modules.items() -%}
        from skim.WGs.{{ module }} import {{ ", ".join(ModuleSkims) }}
    {% endfor %}
{% endif %}
path = b2.Path()
{% if skims|length == 1 and not mdstOutput -%}
    skim = {{ skims[0] }}(
    {%- if not backward_compatibility -%}
    {%- if data -%}
    mc=False,
    {%- else -%}
    mc=True,
    {%- endif -%}
    {%- endif -%}
    {%- if udst_output_name -%}
    OutputFileName="{{ udst_output_name }}",
    {%- endif -%}
    {%- if analysis_globaltag -%}
    {{ " " }}analysisGlobaltag="{{ analysis_globaltag }}"
    {%- endif -%}
){%- if hints %}  # pass udstOutput=False to disable udstOutput{%- endif %}
{% else -%}
    skim = CombinedSkim(
    {% for skim in skims -%}
        {{ skim|indent(4, True) }}(),
    {% endfor -%}
    {%- if mdstOutput -%}
    {{ "    " }}udstOutput=False,
    mdstOutput=True,
    mdst_kwargs=dict(),
    {% endif -%}
    {%- if not backward_compatibility -%}
    {%- if data -%}
    {{ "    " }}mc=False,
    {% else -%}
    {{ "    " }}mc=True,
    {% endif -%}
    {% endif -%}
    {%- if udst_output_name -%}
    {{ "    " }}OutputFileName="{{ udst_output_name }}",
    {% endif -%}
    {%- if analysis_globaltag -%}
    {{ "    " }}analysisGlobaltag="{{ analysis_globaltag }}"
    {% endif -%}
    )
{% endif %}
ma.inputMdstList(skim.TestFiles, path=path)
skim(path)

{%- if hints %}

# The skim list names are contained in the Python list skim.SkimLists.
#
# Add all subsequent modules to skim.postskim_path, but call b2.process on
# the main path. For example:
#
#     ma.variablesToNtuple(
#         skim.SkimLists[0],
#         ["pt", "E"],
#         path=skim.postskim_path
#     )
#
# The one exception to this is the attribute skim.flag, which is an event-level variable
# indicating whether an event passed the skim. This variable is available for all events
# on the main path (`path` in this steering file). For example:
#
#     ma.variablesToNtuple("", {% if skims|length == 1 %}[skim.flag]{% else %}skim.flags{% endif %}, path=path)
{%- endif %}

b2.process(path)
{%- if stats %}
print(b2.statistics)
{%- endif %}
