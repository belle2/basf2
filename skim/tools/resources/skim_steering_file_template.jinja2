{#- Jinja2 template for skim steering files, to be used by b2skim-generate. -#}


#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""Skim steering file generated by b2skim-generate."""

import basf2 as b2
import modularAnalysis as ma
{% if skims|length > 1 -%}
from skimExpertFunctions import CombinedSkim
{% endif -%}
{% for module, ModuleSkims in modules.items() -%}
    from {{ module }} import {{ ", ".join(ModuleSkims) }}
{% endfor %}
path = b2.Path()
{% if skims|length == 1 -%}
    skim = {{ skims[0] }}(){%- if hints %}  # pass udstOutput=False to disable udstOutput{%- endif %}
{% else -%}
    skim = CombinedSkim(
    {% for skim in skims -%}
        {{ skim|indent(4, True) }}(),
    {% endfor -%}
    )
{% endif %}
ma.inputMdstList("default", skim.TestFiles, path=path)
skim(path)

{%- if hints %}

# The skim list names are contained in the Python list skim.SkimLists.
# The attribute skim.flag is a variable indicating whether an event passed the skim.
#
# Add all subsequent modules to skim.postskim_path, but call b2.process on
# the main path. For example...
#
#     ma.variablesToNtuple(
#         skim.SkimLists[0],
#         ["pt", "E"],
#         path=skim.postskim_path
#     )
{%- endif %}

b2.process(path)
{%- if stats %}
print(b2.statistics)
{%- endif %}

