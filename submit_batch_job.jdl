#
# local directory
#
initialdir = /nfs/dust/belle2/user/mondal/products/basf2/release_local/

Universe   = vanilla
notify_user = suryanarayan.mondal@pi.infn.it

#
# the following are directly written in local, no need to copy.
#
Log        = condorOut/job_$(Cluster).$(Process).log
Output     = condorOut/job_$(Cluster).$(Process).out
Error      = condorOut/job_$(Cluster).$(Process).err

#
# Executable to the HTCondor node. Copied to node by default.
#
Executable = jobwrapper.sh

#
# if any special requirement
#
# requirements = TARGET.Machine!="wn09.ino.tifr.res.in" && TARGET.Machine!="simclu-wn05.ino.tifr.res.in"

#
# Copy files in between local and nodes
#
# should_transfer_files = YES
# when_to_transfer_output = ON_EXIT

#
# List of OUTPUT files from the node.
#
# transfer_output_files = main

#
# Limit the number of IDLE + RUNNING jobs HTCondor at any instance
#
max_materialize = 1


########################################################################
#
# On BIRD, the following parameters should be kept at default or `Lite`,
#    	   to enjoy unrestricted execution on all threads.
#
########################################################################

#
# Run time in seconds (Default is 10800)
#
+RequestRuntime = 21600

#
# Request Memory in MB (default 1536)
#
RequestMemory = 20480

#
# Request Memory in KB (default 20480000)
#
# RequestDisk = 20480000

#
# CPU Cores
#
Request_Cpus = 10


queue arguments from (
# 1     1
# 2     1
3     1
4     1
5     1
6     1
7     1
8     1
9     1
10    1
1     2
2     2
3     2
4     2
5     2
6     2
7     2
8     2
9     2
10    2
1     3
2     3
3     3
4     3
5     3
6     3
7     3
8     3
9     3
10    3
1     4
2     4
3     4
4     4
5     4
6     4
7     4
8     4
9     4
10    4
1     5
2     5
3     5
4     5
5     5
6     5
7     5
8     5
9     5
10    5
1     6
2     6
3     6
4     6
5     6
6     6
7     6
8     6
9     6
10    6
1     7
2     7
3     7
4     7
5     7
6     7
7     7
8     7
9     7
10    7
1     8
2     8
3     8
4     8
5     8
6     8
7     8
8     8
9     8
10    8
1     9
2     9
3     9
4     9
5     9
6     9
7     9
8     9
9     9
10    9
1     10
2     10
3     10
4     10
5     10
6     10
7     10
8     10
9     10
10    10
)
