/**************************************************************************
 * BASF2 (Belle Analysis Framework 2)                                     *
 * Copyright(C) 2010 - Belle II Collaboration                             *
 *                                                                        *
 * Author: The Belle II Collaboration                                     *
 * Contributors: Peter Kvasnicka, Zbynek Drasal                           *
 *                                                                        *
 * This software is provided "as is" without any warranty.                *
 **************************************************************************/

#ifndef SVDCHEATER_H
#define SVDCHEATER_H

#include <framework/datastore/Units.h>

namespace Belle2 {

  /*
   ** SVD cheater class
   *
   * The class provides detector pitch values which are currently nowhere to read
   * from, and provides simulation resolutions for the Gaussian-smearing
   * digitizer. It is a temporary class.'
   */

  class SVDcheater {

  public:
    /**
     * The constructor just sets defaults.
     */
    SVDcheater() {
      m_pitchRPhi3 = 50;
      m_pitchRPhi4 = 75;
      m_pitchRPhi5 = 75;
      m_pitchRPhi6 = 75;
      m_pitchZ3 = 160;
      m_pitchZ4 = 240;
      m_pitchZ5 = 240;
      m_pitchZ6 = 240;
    }

    ~SVDcheater() {
      // Does nothing.
    }
    /**
     * Return resolution estimate for a specific sensor.
     *
     * These functions are based on MC estimates of sensor resolutions.
     * Sensor resolution is parametrized by a single parameter, the
     * theta angle of impact. Interpolants are spline fits to the data.
     * The interpolants' codes are automatically generated by ROOT TSpline class.
     */
    double getResolutionZ(int iLayer, int iLadder, int iSensor, double theta) const;
    double getResolutionRPhi(int iLayer, int iLadder, int iSensor, double theta) const;
    /*
     * Return pitch for a specific sensor.
     */
    double getPitchZ(int iLayer, int iLadder, int iSensor) const;
    double getPitchRPhi(int iLayer, int iLadder, int iSensor) const;

  protected:
    /**
     * These are spline fits of simulation data.
     *
     * These functions are automatically generated by the ROOT TSpline class.
     */
    double SVD_ResFunc_rphi3(double x) const;
    double SVD_ResFunc_rphi4(double x) const;
    double SVD_ResFunc_rphi5(double x) const;
    double SVD_ResFunc_rphi6(double x) const;
    double SVD_ResFunc_z3(double x) const;
    double SVD_ResFunc_z4(double x) const;
    double SVD_ResFunc_z5(double x) const;
    double SVD_ResFunc_z6(double x) const;

  private:
    /** Pitch values. */
    double m_pitchRPhi3;
    double m_pitchRPhi4;
    double m_pitchRPhi5;
    double m_pitchRPhi6;
    double m_pitchZ3;
    double m_pitchZ4;
    double m_pitchZ5;
    double m_pitchZ6;

  }; // class SVDcheater

} // end namespace Belle2

#endif
