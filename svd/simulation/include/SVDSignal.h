/**************************************************************************
 * BASF2 (Belle Analysis Framework 2)                                     *
 * Copyright(C) 2010 - Belle II Collaboration                             *
 *                                                                        *
 * Author: The Belle II Collaboration                                     *
 * Contributors: Peter Kvasnicka, Martin Ritter                           *
 *                                                                        *
 * This software is provided "as is" without any warranty.                *
 **************************************************************************/

#ifndef SVDSIGNAL_H
#define SVDSIGNAL_H

#include <framework/dataobjects/RelationElement.h>
#include <boost/foreach.hpp>
#include <boost/tuple/tuple.hpp>
#include <deque>
#include <map>
#include <algorithm>
#include <math.h>

namespace Belle2 {
  namespace SVD {

    /**
     * The SVD signal class.
     *
     * The class implements the waveform appearing on an SVD strip as a result of
     * ionization by particles passing through the detector.
     * The class accumulates elementary waveforms formed by chargelets contributing to the
     * charge accumulated on the strip.
     * The elementary waveforms are currently of the form
     * w(t|delta,tau) = charge * (t-delta)/tau * exp(1.0 - (t-delta)/tau)) for t >= delta,
     *                  otherwise 0.
     * with delta being the initial time, and tau the decay time.
     * Maximum is attained at delta + tau and is equal to charge.
     * The class is a functor returning values of summary waveform at a given time.
     * Poisson and gaussian noises will be added externally.
     */

    class SVDSignal {

    public:

      /** Type to store elementary waveforms.
       *  Waveforms are parameterized (in this order) by location parameter (initTime),
       *  norm (charge) and scale factor (tau) - decay time.
       *  It is assumed that each chargelet is generated by a single MCParticle and
       *  it contributes to a single TrueHit.
       */
      struct Wave {
        /** Constructor.*/
        Wave(double initTime, double charge, double tau,
             RelationElement::index_type particle, RelationElement::index_type truehit):
          m_initTime(initTime), m_charge(charge), m_tau(tau), m_particle(particle),
          m_truehit(truehit)
        {}
        /** Start time of the waveform. */
        double m_initTime;
        /** Charge of the wave. */
        double m_charge;
        /** Decay time of the waveform.*/
        double m_tau;
        /** DataStore index of the generating MC Particle. */
        RelationElement::index_type m_particle;
        /** DataStore index of the associated SVDTrueHit. */
        RelationElement::index_type m_truehit;
      };

      /** List of elementary waveforms. */
      typedef std::deque< Wave > function_list;

      /** Type to store contributions to strip signal by different particles on output of SVDSignal */
      typedef std::map<RelationElement::index_type, RelationElement::weight_type> relations_map;
      /** Type of relation_map elements. */
      typedef std::map<RelationElement::index_type, RelationElement::weight_type>::value_type relation_value_type;

      /** Default constructor */
      SVDSignal(): m_charge(0) {}

      /** Copy ctor. */
      SVDSignal(const SVDSignal& other) {
        m_charge = other.getCharge();
        BOOST_FOREACH(Wave wave, other.getFunctions())
        m_functions.push_back(wave);
      }

      /** Add a chargelet to the strip signal.
       * @param charge Charge in electrons to be added
       * @param time Time of arrival of the chargelet to the sensitive surface of the sensor.
       * @param tau Characteristic time of waveform decay.
       * @param particle Index of the particle contributing the charge, -1 for no particle/noise
       * @param truehit Index of the truehit corresponding to the particle that contributed
       * the charge.
       */
      void add(double initTime, double charge, double tau, int particle = -1, int truehit = -1) {
        m_charge += charge;
        m_functions.push_back(Wave(initTime, charge, tau, particle, truehit));
      }

      /** Make the SVDSignals addable.
       * @param other The SVDSignal to be added.
       * @return The sum of this signal and the other.
       */
      SVDSignal& operator+=(const SVDSignal& other) {
        m_charge += other.getCharge();
        BOOST_FOREACH(Wave wave, other.getFunctions())
        m_functions.push_back(wave);
        return *this;
      }

      /** Make the SVDSignals scalable.
       * @param scale The factor by which all charges wil be multiplied.
       * @return This signal with all charges multiplied by scale.
       */
      SVDSignal& operator*=(double scale) {
        m_charge *= scale;
        BOOST_FOREACH(Wave & wave, m_functions)
        wave.m_charge *= scale;
        return *this;
      }

      /** Make the SVDSignal assignable.
       * @param other The original signal.
       * @return This signal with all quantities set to those of the other.
       */
      SVDSignal& operator=(const SVDSignal& other) {
        m_charge = other.getCharge();
        m_functions.clear();
        std::copy(other.getFunctions().begin(), other.getFunctions().end(), m_functions.begin());
        return *this;
      }

      /** Waveform shape.
       * @param time The time at which the function is to be calculated.
       * @param initTime The initial time of the waveform.
       * @param charge The total charge of the waveform.
       * @param tau The decay time of the waveform.
       * @return Value of the waveform at time time.
       */
      double waveform(double time, double initTime, double charge, double tau) const {
        if ((tau <= 0.0) || (time < initTime)) return 0;
        double z = (time - initTime) / tau; return charge * z * exp(1.0 - z);
      }

      /** Waveform taking parameters from a Wave struct.
       * @param time The time at which the function is to be calculated.
       * @param wave The SVDSignal::Wave struct with parameters of a waveform.
       * @return THe value of the waveform at time time.
       */
      double waveform(double time, const Wave& wave) const
      { return waveform(time, wave.m_initTime, wave.m_charge, wave.m_tau); }

      /** Make the SVDSignal a functor.
       * @param time The time at which output is to be calculated.
       * @return Boost tuple containing the summary value of the waveform (observable),
       * and the relation maps of MCParticles and TrueHits.
       */
      boost::tuple<double, const relations_map&, const relations_map&> operator()(double time);

      /** Return the charge collected in the strip.
       * @return Total charge of the waveform.
       */
      double getCharge() const { return m_charge; }

      /** Return the list of waveform parameters.
       * @return The deque containing SVDSignal::Wave structs with waveform parameters.
       */
      const function_list& getFunctions() const { return m_functions; }

    protected:

      /** charge of the pixel */
      double m_charge;

      /** list of elementary waveform parameters.*/
      function_list m_functions;

      /** Return map of MCParticle associations.*/
      relations_map m_particles;
      /** Return map of TrueHit associations. */
      relations_map m_truehits;

    }; // class SVDDigit

  } // end namespace SVD
} // end namespace Belle2

#endif
