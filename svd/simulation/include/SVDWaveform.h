/**************************************************************************
 * basf2 (Belle II Analysis Software Framework)                           *
 * Author: The Belle II Collaboration                                     *
 *                                                                        *
 * See git log for contributors and copyright holders.                    *
 * This file is licensed under LGPL-3.0, see LICENSE.md.                  *
 **************************************************************************/

#ifndef SVDWaveform_H
#define SVDWaveform_H

#include <framework/dataobjects/RelationElement.h>
#include <string>
#include <sstream>
#include <deque>
#include <map>
#include <svd/simulation/SVDSimulationTools.h>

namespace Belle2 {
  namespace SVD {

    /**
     * The SVD waveform class.
     *
     * The class implements the waveform appearing on an SVD strip as a result of
     * ionization by particles passing through the detector.
     * The class accumulates elementary waveforms formed by chargelets contributing to the
     * charge accumulated on the strip.
     * Currently two types of elementary waveforms are in use: w_betaprime and w_adjacent.
     * The class is a functor returning values of summary waveform at a given time.
     * Poisson and gaussian noises will be added externally.
     */

    class SVDWaveform {

    public:

      /** Type to store elementary waveform parameters.
       *  Waveforms are parameterized (in this order) by location parameter (initTime),
       *  norm (charge), decay time (tau) and waveform shape function.
       *  It is assumed that each chargelet is generated by a single MCParticle and
       *  it contributes to a single TrueHit.
       */
      struct ElementaryWaveform {
        /** Constructor.*/
        ElementaryWaveform(double initTime, double charge, double tau, WaveformShape wfun,
                           RelationElement::index_type particle, RelationElement::index_type truehit):
          m_initTime(initTime), m_charge(charge), m_tau(tau), m_wfun(wfun),
          m_particle(particle), m_truehit(truehit)
        {}
        /** Create a string containing data of this ElementaryWaveform object */
        std::string toString() const
        {
          std::ostringstream os;
          os << m_initTime << '\t' << m_charge << '\t' << m_tau << std::endl;
          return os.str();
        }
        /** Start time of the waveform. */
        double m_initTime;
        /** Charge of the waveform. */
        double m_charge;
        /** Decay time of the waveform.*/
        double m_tau;
        /** Waveform shape. */
        WaveformShape m_wfun;
        /** DataStore index of the generating MC Particle. */
        RelationElement::index_type m_particle;
        /** DataStore index of the associated SVDTrueHit. */
        RelationElement::index_type m_truehit;
      };

      /** List of elementary waveforms. */
      typedef std::deque< ElementaryWaveform > elementary_waveform_list;

      /** Type to store contributions to strip signal by different particles on output of SVDWaveform */
      typedef std::map<RelationElement::index_type, RelationElement::weight_type> relations_map;
      /** Type of relation_map elements. */
      typedef std::map<RelationElement::index_type, RelationElement::weight_type>::value_type relation_value_type;

      /** Default constructor */
      SVDWaveform(): m_charge(0) {}

      /** Copy constructor. */
      SVDWaveform(const SVDWaveform& other)
      {
        m_charge = other.getCharge();
        for (ElementaryWaveform elementary_waveform : other.getElementaryWaveforms())
          m_elementaryWaveforms.push_back(elementary_waveform);
      }

      /** Add a chargelet waveform to the total strip waveform.
       * Negative sign of charge has a special meaning, it designates noise signal
       * carrying otherwise no useful information.
       * @param charge Charge in electrons to be added
       * @param initTime Time of arrival of the chargelet to the sensitive surface of the sensor.
       * @param tau Characteristic time of waveform decay.
       * @param particle Index of the particle contributing the charge, -1 for no particle/noise
       * @param truehit Index of the truehit corresponding to the particle that contributed
       * the charge.
       * @param wfun waveform shaper function
       */
      void add(double initTime, double charge, double tau, int particle = -1, int truehit = -1, WaveformShape wfun = w_betaprime)
      {
        if (charge > 0) {
          m_charge += charge;
          m_elementaryWaveforms.push_back(ElementaryWaveform(initTime, charge, tau, wfun, particle, truehit));
          if (particle > -1) m_particles[particle] += static_cast<float>(charge);
          if (truehit > -1) m_truehits[truehit] += static_cast<float>(charge);
        } else if (m_charge == 0)
          m_charge += charge;
      }

      /** Make the SVDWaveform assignable.
       * @param other The original signal.
       * @return This signal with all quantities set to those of the other.
       */
      SVDWaveform& operator=(const SVDWaveform& other)
      {
        m_charge = other.getCharge();
        m_elementaryWaveforms.clear();
        std::copy(other.getElementaryWaveforms().begin(), other.getElementaryWaveforms().end(), m_elementaryWaveforms.begin());
        return *this;
      }

      /** Waveform shape.
       * @param t The time at which the function is to be calculated.
       * @param initTime The initial time of the waveform.
       * @param charge The charge (peak value) of the waveform.
       * @param tau The scale parameter (decay time) of the waveform.
       * @param wfun The functional form of the waveform. Default is betaprime.
       * The function is normalized to peak value of 1.
       * @return Value of the waveform at t.
       */
      double waveform(double t, double initTime, double charge, double tau,
                      WaveformShape wfun = w_betaprime) const
      {
        double z = (t - initTime) / tau;
        return charge * wfun(z);
      }

      /** Waveform taking parameters from a ElementaryWaveform struct.
       * @param t The time at which the function is to be calculated.
       * @param elemWaveform The SVDWaveform::ElementaryWaveform struct with parameters of a waveform.
       * @return The value of the waveform at time t.
       */
      double waveform(double t, const ElementaryWaveform& elemWaveform) const
      { return waveform(t, elemWaveform.m_initTime, elemWaveform.m_charge, elemWaveform.m_tau, elemWaveform.m_wfun); }

      /** Make SVDWaveform a functor.
       * @param t The time at which output is to be calculated.
       * @return value of the waveform
       */
      double operator()(double t) const
      {
        double total_waveform = 0;
        for (SVDWaveform::ElementaryWaveform elementary_waveform : m_elementaryWaveforms) {
          total_waveform += waveform(t, elementary_waveform);
        }
        return total_waveform;
      }

      /** Return the charge collected in the strip.
       * @return Total charge of the waveform.
       */
      double getCharge() const { return m_charge; }

      /** Return the list of waveform parameters.
       * @return The deque containing SVDWaveform::ElementaryWaveform structs with waveform parameters.
       */
      const elementary_waveform_list& getElementaryWaveforms() const { return m_elementaryWaveforms; }

      /** Return the list of MCParticle relations.
       * @return SVDWaveform::relations_map with MCParticle relations of the signal.
       */
      const relations_map& getMCParticleRelations() const { return m_particles; }

      /** Return the list of TrueHit relations.
       * @return SVDWaveform::relations_map with TrueHit relations of the signal.
       */
      const relations_map& getTrueHitRelations() const { return m_truehits; }
      /** Produce a string representation of the object */
      std::string toString() const
      {
        std::ostringstream os;
        size_t i = 0;
        for (auto elementary_waveform : m_elementaryWaveforms)
          os << ++i << '\t' << elementary_waveform.toString();
        return os.str();
      }

    protected:

      /** charge of the pixel */
      double m_charge;
      /** list of elementary waveform parameters.*/
      elementary_waveform_list m_elementaryWaveforms;
      /** Map of MCParticle associations.*/
      relations_map m_particles;
      /** Map of TrueHit associations. */
      relations_map m_truehits;

    }; // class SVDWaveform

  } // end namespace SVD
} // end namespace Belle2

#endif
