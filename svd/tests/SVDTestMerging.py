#!/usr/bin/env python3
# -*- coding: utf-8 -*-

##############################################################################
#
# This script tests merging and splitting of SVDDigits.
# SVDDigits are generated by SVDDigitizer from ParticleGun events.
# These are then merged into SVDShaperDigits and equivalence is checked.
# Next the SVDShaperDigits are split into SVDDigits again and the
# equivalence test is run again.
# We cannot test equivalence between the two sets of SVDDigits, since
# the SVDDigitSplitter cannot re-create the relation weights exactly.
# Also, the splitter doesn't make SVDDiigits from samples with non-positive
# charge.
#
##############################################################################

from basf2 import *

# show warnings during processing
set_log_level(LogLevel.WARNING)

# Register modules

# Particle gun module
particlegun = register_module('ParticleGun')
# Create Event information
eventinfosetter = register_module('EventInfoSetter')
# Show progress of processing
progress = register_module('Progress')
# Load parameters
gearbox = register_module('Gearbox')
# Create geometry
geometry = register_module('Geometry')
# Run simulation
simulation = register_module('FullSim')
# Add the PXD digitizer, too, to avoid problems with empty events.
PXDDIGI = register_module('PXDDigitizer')
# SVD digitization module
SVDDIGI = register_module('SVDDigitizer')
SVDDIGI.param('GenerateDigits', True)
# SVD digit merger
SVDMERG = register_module('SVDDigitMerger')
SVDMERG.set_log_level(LogLevel.DEBUG)
SVDMERG.set_debug_level(1)
# SVD digit checker
SVDCHCK = register_module('SVDCheckDigits')
SVDCHCK.set_log_level(LogLevel.DEBUG)
SVDCHCK.set_debug_level(1)
# SVD digit splitter
SVDSPLT = register_module('SVDDigitSplitter')
SVDSPLT.set_log_level(LogLevel.DEBUG)
SVDSPLT.set_debug_level(1)
SVDSPLT.param('Digits', 'SVDDigitsSplit')
# SVD digit checker
SVDCHCK2 = register_module('SVDCheckDigits')
SVDCHCK2.set_log_level(LogLevel.DEBUG)
SVDCHCK2.set_debug_level(1)
SVDCHCK2.param('Digits', 'SVDDigitsSplit')
# Save output of simulation
# output = register_module('RootOutput')

# ============================================================================
# Set a fixed random seed for particle generation:
# set_random_seed(1028307)

# ============================================================================
# Setting the list of particle codes (PDG codes) for the generated particles
particlegun.param('pdgCodes', [-11, 11])

# ============================================================================
# Setting the number of tracks to be generated per event:
particlegun.param('nTracks', 1)

# Set the number of events to be processed (100 events)
eventinfosetter.param({'evtNumList': [100], 'runList': [1]})

# Set output filename
# output.param('outputFileName', 'SVDTestOutput.root')

# Select subdetectors to be built
# geometry.param('Components', ['PXD','SVD'])
geometry.param('components', ['MagneticField', 'PXD', 'SVD'])

# ============================================================================
# Do the simulation

main = create_path()
main.add_module(eventinfosetter)
main.add_module(progress)
main.add_module(gearbox)
main.add_module(geometry)
main.add_module(particlegun)
main.add_module(simulation)
main.add_module(PXDDIGI)
main.add_module(SVDDIGI)
main.add_module(SVDMERG)
main.add_module(SVDCHCK)
main.add_module(SVDSPLT)
main.add_module(SVDCHCK2)
# main.add_module(output)


# Process events
process(main)

# Print call statistics
print(statistics)
