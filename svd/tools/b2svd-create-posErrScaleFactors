#!/usr/bin/env python3

##########################################################################
# basf2 (Belle II Analysis Software Framework)                           #
# Author: The Belle II Collaboration                                     #
#                                                                        #
# See git log for contributors and copyright holders.                    #
# This file is licensed under LGPL-3.0, see LICENSE.md.                  #
##########################################################################

'''Tool used to generate cluster position error scale factors payload,
for the desired algorithm (supported: CoGOnly, OldDefault)'''


import basf2 as b2
from ROOT import Belle2
from svd import add_svd_reconstruction, add_svd_simulation
from basf2 import conditions as b2c

import datetime
import argparse
import os, glob


def arg_parser():

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--posAlgorithm',
                        required=True,
                        type=str,
                        help='position algorithm',
                        metavar='POSITION_ALGORITHM')
    parser.add_argument('-n', '--events',
                        default=20000,
                        type=int,
                        help='number of events',
                        metavar='EVENTS')
    parser.add_argument('--prepend_gt',
                        default='',
                        type=str,
                        nargs='*',
                        help='Global Tags to be prepended',
                        metavar='GTs')
    parser.add_argument('--no_outliers',
                        default=False,
                        action='store_true',
                        help='flag to remove outliers from the computation of the scale factors')
    parser.add_argument('--no_bkg',
                        default=False,
                        action='store_true',
                        help='flag to remove beam background from simulation')
    parser.add_argument('--exp',
                        default=0,
                        type=int,
                        help='experiment number you want to simulate',
                        metavar='EXP')
    parser.add_argument('--max_pulls',
                        default=10,
                        type=int,
                        help='max (min = -max) of the pulls distribution',
                        metavar='MAX (MIN=-MAX)')

    parser.add_argument('--nBins_pulls',
                        default=100,
                        type=int,
                        help='number of bins of the pulls distribution',
                        metavar='NBINS')
    return parser


now = datetime.datetime.now()


if __name__ == "__main__":

    #####################################################
    # Part 0: setup

    # Argument parsing
    args = arg_parser().parse_args()
    args.events

    if args.posAlgorithm!='CoGOnly' and args.posAlgorithm!='OldDefault' :
        b2.B2FATAL("the algorithm you ask for is not supported!\
        supported algorithms are: CoGOnly and OldDefault")

    b2c.prepend_globaltag("svd_onlySVDinGeoConfiguration")
    b2c.prepend_globaltag("svd_NOPosErrScaleFactors")

    # Prepend and/or append the input GTs
    if not (args.prepend_gt == ''):
        for gt in reversed(args.prepend_gt):
            b2c.prepend_globaltag(gt)


    bkgFiles = glob.glob('/sw/belle2/bkg/*.root')
    if args.no_bkg:
        bkgFiles = None

    #####################################################
    # Part 1: run the SVD simulation and reconstruction
    #         including beam background
 
    # Set the global log level
    b2.set_log_level(b2.LogLevel.INFO)

    # Create path
    main = b2.Path()

    b2.set_random_seed(1)

    eventinfosetter = b2.register_module('EventInfoSetter')
    eventinfosetter.param('expList', [args.exp])
    eventinfosetter.param('runList', [0])
    eventinfosetter.param('evtNumList', [args.events])
    main.add_module(eventinfosetter)
    main.add_module('EvtGenInput')

    main.add_module('Gearbox')
    main.add_module('Geometry')
    main.add_module('FullSim')

    add_svd_simulation(main)

    if bkgFiles is not None:
        bkginput = b2.register_module('BGOverlayInput')
        bkginput.param('inputFileNames', bkgFiles)
        main.add_module(bkginput)
        main.add_module('BGOverlayExecutor', components=['SVD'])
        main.add_module('SVDShaperDigitSorter')
        main.add_module('SVDZeroSuppressionEmulator')

    add_svd_reconstruction(main)

    # set the position algorithm
    b2.set_module_parameters(main, "SVDClusterizer",positionAlgorithm3Samples=args.posAlgorithm)
    b2.set_module_parameters(main, "SVDClusterizer",positionAlgorithm6Samples=args.posAlgorithm)
    b2.set_module_parameters(main, "SVDClusterizer",useDB=False)
    # remove uselss modules for this purpose
    main = b2.remove_module(main,"SVDMissingAPVsClusterCreator")
    main = b2.remove_module(main,"SVDSpacePointCreator")

    #####################################################
    # Part 2: compute scale factors and create localdb

    importer = b2.register_module("SVDPositionErrorScaleFactorImporter")
    importer.param("posAlgorithm", args.posAlgorithm)
    importer.param("minPulls", - args.max_pulls)
    importer.param("maxPulls", args.max_pulls)
    importer.param("nBinsPulls", args.nBins_pulls)
    importer.param("noOutliers", args.no_outliers)
    uniqueid = str(args.posAlgorithm)+"ErrorScaleFactors_default_" + str(now.isoformat()) + "_INFO:_formulas=rel06_scaleFactors=fromSimulation_exp"+str(args.exp)+"_nEvents="+str(args.events)+"_noOutliers="

    if args.no_outliers:
        uniqueid += "True"
    else:
        uniqueid += "False"

    uniqueid +="_noBkg="
    if args.no_bkg:
        uniqueid += "True"
    else:
        uniqueid += "False"

    importer.param("uniqueID", uniqueid)
    main.add_module(importer)

    main.add_module('Progress')

    b2.print_path(main)

    b2.process(main)

    print(b2.statistics)
