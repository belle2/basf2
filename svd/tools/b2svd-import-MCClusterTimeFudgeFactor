#!/usr/bin/env python3

##########################################################################
# basf2 (Belle II Analysis Software Framework)                           #
# Author: The Belle II Collaboration                                     #
#                                                                        #
# See git log for contributors and copyright holders.                    #
# This file is licensed under LGPL-3.0, see LICENSE.md.                  #
##########################################################################

"""
SVD MC Cluster Time Fudge Factor Formulas importer:
json files can be found in the svd_cdb_json repository (B2SVD).
"""
import basf2 as b2
from ROOT import Belle2
import datetime
import argparse
import json
import math


def arg_parser():
    """ argument parser """

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-j', '--json',
                        type=str,
                        help='input json file',
                        metavar='JSON')

    return parser


def get_side(side):
    """returns the value of the side to be read in the json file"""

    if side == 0:
        return "V"
    else:
        return "U"


class jsonSVDMCClusterTimeFudgeFactorImporter(b2.Module):
    """
    Defining the python module to do the import.
    """

    def beginRun(self):
        """
        call the functions to import the cluster parameters
        """

        iov = Belle2.IntervalOfValidity.always()

        uniqueID = "MCClusterTimeFudgeFactor_" + \
            param["uniqueID"]["INFO"]["first"] + "_" + \
            param["uniqueID"]["INFO"]["second"] + "_" + \
            param["uniqueID"]["INFO"]["third"] + "_" + \
            str(now.isoformat()) + \
            "_INFO:_current=" + \
            param["uniqueID"]["INFO"]["current"] + "_" + \
            param["uniqueID"]["INFO"]["tag"]

        print("--> json INFO:")
        print("              "+str(param["_COMMENT"]))
        print("")

        cls_payload = Belle2.SVDMCClusterTimeFudgeFactor.t_payload(-1, str(uniqueID))

        geoCache = Belle2.VXD.GeoCache.getInstance()

        for layer in geoCache.getLayers(Belle2.VXD.SensorInfoBase.SVD):
            layerNumber = layer.getLayerNumber()
            for ladder in geoCache.getLadders(layer):
                ladderNumber = ladder.getLadderNumber()
                for sensor in geoCache.getSensors(ladder):
                    sensorNumber = sensor.getSensorNumber()
                    for side in (0, 1):

                        sigmaData = sigmaValuesData[get_side(side)]["L"+str(layerNumber)]["S"+str(sensorNumber)]
                        sigmaMC = sigmaValuesMC[get_side(side)]["L"+str(layerNumber)]["S"+str(sensorNumber)]
                        if sigmaMC > sigmaData:
                            sigma = 0
                            b2.B2WARNING(f"Resolution in MC ({sigmaMC:.6f}) is higher than data ({sigmaData:.6f}) " +
                                         f"for L{layerNumber:1}{f'L{ladderNumber}':>3}S{sensorNumber:1}{get_side(side)}.\t" +
                                         f"Setting Fudge = {sigma:.06f}")
                        else:
                            sigma = round(math.sqrt(sigmaData * sigmaData - sigmaMC * sigmaMC), 6)
                            b2.B2INFO(f"Resolution in MC = ({sigmaMC:.6f}) and data = ({sigmaData:.6f}) " +
                                      f"for L{layerNumber}{f'L{ladderNumber}':>3}S{sensorNumber}{get_side(side)}.\t" +
                                      f"Fudge = {sigma:.06f}")

                        cls_payload.set(layerNumber, ladderNumber, sensorNumber, bool(side), 1, sigma)

        Belle2.Database.Instance().storeData(Belle2.SVDMCClusterTimeFudgeFactor.name, cls_payload, iov)

        fudge_map_vals = {}
        for side in ['U', 'V']:
            fudge_map_vals[side] = {}
            for layer in geoCache.getLayers(Belle2.VXD.SensorInfoBase.SVD):
                layerNumber = layer.getLayerNumber()
                for ladder in geoCache.getLadders(layer):
                    ladderNumber = ladder.getLadderNumber()
                    fudge_map_vals[side][f'L{layerNumber:d}'] = {}
                    for sensor in geoCache.getSensors(ladder):
                        sensorNumber = sensor.getSensorNumber()
                        fudge_map_vals[side][f'L{layerNumber:d}'][f'S{sensorNumber:d}'] = 0
                        sigmaData = sigmaValuesData[side]["L"+str(layerNumber)]["S"+str(sensorNumber)]
                        sigmaMC = sigmaValuesMC[side]["L"+str(layerNumber)]["S"+str(sensorNumber)]
                        if sigmaMC <= sigmaData:
                            sigma = round(math.sqrt(sigmaData * sigmaData - sigmaMC * sigmaMC), 6)
                            fudge_map_vals[side][f'L{layerNumber:d}'][f'S{sensorNumber:d}'] = sigma
                    break
        print("Fudge Factors:", fudge_map_vals)


if __name__ == "__main__":

    # Argument parsing
    args = arg_parser().parse_args()

    # get the time
    now = datetime.datetime.now()

    # open json file
    f = open(args.json)
    param = json.load(f)

    # # Prepend the svd-only in geometry GT
    # b2conditions.prepend_globaltag('svd_onlySVDinGeoConfiguration')

    main = b2.create_path()

    # Event info setter - execute single event
    eventinfosetter = b2.register_module('EventInfoSetter')
    eventinfosetter.param({'evtNumList': [1], 'expList': 0, 'runList': 0})
    main.add_module(eventinfosetter)

    main.add_module("Gearbox")
    main.add_module("Geometry")

    sigmaValuesMC = param["SigmaValues"]["MC"]
    sigmaValuesData = param["SigmaValues"]["Data"]

    main.add_module(jsonSVDMCClusterTimeFudgeFactorImporter())

    # Show progress of processing
    progress = b2.register_module('Progress')
    main.add_module(progress)

    # Process events
    b2.process(main)
