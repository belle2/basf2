# -*- coding: utf-8 -*-
# vim: syntax=python

Import('env')

env['LIBS'] = [
    'tracking_dataobjects', 
    'pxd', 'pxd_dataobjects',
    'svd', 'svd_dataobjects',
    'vxd', 'vxd_dataobjects', 
    'cdc', 'cdc_dataobjects',
    'testbeam_vxd_dataobjects',
    'simulation_dataobjects',
#    'geometry',
    'mdst_dataobjects',
    'framework',
    'framework_pybasf2',
    'genfit2',
    'EG',
    '$ROOT_LIBS',
    ]


# Enable python package support #
#################################

# This SConsript file snippet looks for all python files in the /scripts directory in the tracking package and 
# adds them to the importable python modules in the compiled release.

import os

# Function definitions 
def get_python_files_recursive(topdir_path):
    python_file_nodes = []
    
    for dir_path, dir_names, file_names in os.walk(topdir_path):
        for file_name in file_names:
            if file_name.endswith(".py"):
                file_path = os.path.join(dir_path, file_name)
                file_node = File(file_path)
                python_file_nodes.append(file_node)

    return python_file_nodes


def define_aliases(
    env,
    target,
    dir_name,
    extension=None,
    ):

    parent_dir = dir_name
    while len(parent_dir) > 0:
        env.Alias(parent_dir, target)
        if extension:
            env.Alias(parent_dir + '.' + extension, target)

        next_parent_dir = os.path.split(parent_dir)[0]
        if next_parent_dir == parent_dir: 
            break
        parent_dir = next_parent_dir

    if extension:
        env.Alias(extension, target)

# Installation of all python files in /scripts/
script_file_nodes = get_python_files_recursive("scripts")
script_targets = []
for script_file_node in script_file_nodes:
    script_file_path = str(script_file_node)
    script_dir = os.path.dirname(script_file_path)

    destination_reldir = os.path.relpath(script_dir, "scripts")

    if not destination_reldir: continue
    destination_dir = os.path.join(env['LIBDIR'], destination_reldir)
    script_target = env.Install(destination_dir, script_file_node)
    script_targets.append(script_target)

this_dir_node = Dir(".")
this_dir_path = this_dir_node.path       
define_aliases(env, script_targets, this_dir_path, "scripts")

# Abolish script files 
# such that the standard build process does not process them again
env['SCRIPT_FILES'] = []

Return('env')

