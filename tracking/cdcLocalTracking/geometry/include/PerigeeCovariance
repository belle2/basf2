/**************************************************************************
 * BASF2 (Belle Analysis Framework 2)                                     *
 * Copyright(C) 2014 - Belle II Collaboration                             *
 *                                                                        *
 * Author: The Belle II Collaboration                                     *
 * Contributors: Oliver Frost                                             *
 *                                                                        *
 * This software is provided "as is" without any warranty.                *
 **************************************************************************/
#ifndef HELIXCOVARIANCE_H
#define HELIXCOVARIANCE_H

#include <cmath>
#include <iostream>
#include "TMatrixDSym.h"
#include "TMatrixD.h"

#include <framework/logging/Logger.h>
#include <tracking/cdcLocalTracking/mockroot/MockRoot.h>


namespace Belle2 {

  namespace CDCLocalTracking {

    /// Class representing the covariance matrix of a Helix in perigee parameters.
    class HelixCovariance : public UsedTObject {

    public:
      /// Helper indices for meaningfull matrix access to the matrices entries
      static const size_t iCurv = 0;
      static const size_t iPhi0 = 1;
      static const size_t iI = 2;
      static const size_t iSZ = 3;
      static const size_t iZ0 = 4;


      /// Default constructor for ROOT compatibility.
      HelixCovariance() :
	m_matrix(5)
      { m_matrix.Zero(); }



      /// Setup the covariance with the given covariance matrx
      explicit HelixCovariance(const TMatrixDSym& covarianceMatrix) :
	m_matrix(covarianceMatrix)
      { checkMatrix(); }



      /// Empty destructor
      ~HelixCovariance() {;}



    private:
      /// Checks the covariance matrix for consistence
      inline void checkMatrix() const {
        if (matrix().GetNrows() != 5 or matrix().GetNcols() != 5) {
          B2ERROR("Helix covariance matrix is a  " <<
                  matrix().GetNrows() << "x" <<
		  matrix().GetNcols() << " matrix. " <<
                  "Expected 5x5 matrix."
		  );
        }
      }



    public:
      /// Setter for the whole covariance matrix of the helix parameters
      inline void setMatrix(const TMatrixDSym& covarianceMatrix)
      { m_matrix = covarianceMatrix; }



      /// Getter for the whole covariance matrix of the helix parameters
      const TMatrixDSym& matrix() const
      { return m_matrix; }



      /// Modifies to helix covariance matrix inplace to represent the reverse travel direction.
      void reverse() {
        // Sign of impact, curvature and szSlope are reversed by a reversion of the helix parameters,
        // while the tangential phi0 gets only an offset by a constant and z0 is unchanged
	// Hence corraletions between 
	// * curvature and phi
	// * curvature and z0
	// * phi and impact
	// * phi and szSlope
	// * impact and z0
	// * szSlope and z0
	// aquire a minus sign

        // receive a minus sign upon reversion.
        m_matrix(iCurv, iPhi0) = -m_matrix(iCurv, iPhi0);
        m_matrix(iPhi0, iCurv) = -m_matrix(iPhi0, iCurv);

        m_matrix(iCurv, iZ0) = -m_matrix(iCurv, iZ0);
        m_matrix(iZ0, iCurv) = -m_matrix(iZ0, iCurv);

        m_matrix(iPhi0, iI) = -m_matrix(iPhi0, iI);
        m_matrix(iI, iPhi0) = -m_matrix(iI, iPhi0);

        m_matrix(iPhi0, iSZ) = -m_matrix(iPhi0, iSZ);
        m_matrix(iSZ, iPhi0) = -m_matrix(iSZ, iPhi0);

        m_matrix(iI, iZ0) = -m_matrix(iI, iZ0);
        m_matrix(iZ0, iI) = -m_matrix(iZ0, iI);

        m_matrix(iSZ, iZ0) = -m_matrix(iSZ, iZ0);
        m_matrix(iZ0, iSZ) = -m_matrix(iZ0, iSZ);
      }



      /// Returns the helix covariance for the reversed travel direction as a copy.
      HelixCovariance reversed() const {
	HelixCovariance result(*this);
	result.reverse();
        return result;
      }



      /// Sets the covariance matrix to zero.
      void setNull() 
      { m_matrix.Zero(); }



      /// Sets the covariance matrix to a unit matrix.
      void setUnit()
      { m_matrix.UnitMatrix(); }


      
    private:
      /// Transforms the covariance by the given jacobian matrix in place.
      void similarityTransform(const TMatrixD& jacobian) {
	if (jacobian.GetNrows() != 5 or jacobian.GetNcols() != 5) {
	  B2ERROR("Cannot transform HelixCovariance with a " << 
		  jacobian.GetNrows() << "x"  << 
		  jacobian.GetNcols() << " inplace.");
	  return;
	}	  
	m_matrix.Similarity(jacobian); 
      }


      
      /// Transforms a copy the covariance by the given jacobian matrix.
      TMatrixDSym similarityTransformed(const TMatrixD& jacobian) const {
	TMatrixDSym matrix = m_matrix;
	matrix.Similarity(jacobian); 
	return matrix;
      }



    private:
      /// Memory for the 5x5 matrix presentation of the covariance.
      TMatrixDSym m_matrix;

      /// ROOT Macro to make HelixCovariance a ROOT class.
      ClassDefInCDCLocalTracking(HelixCovariance, 1);

    }; //class

  } // namespace CDCLocalTracking
} // namespace Belle2
#endif // HELIXCOVARIANCE_H
