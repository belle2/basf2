#!/usr/bin/env python
# -*- coding: utf-8 -*-

######### Imports #########
import sys
import os
import optparse

from basf2 import *
from ROOT import Belle2

import simulation


class PrintMCMatchingRelation(Module):

    """Small helper module to present the relations and informations generated by the MCTrackMatcherModule"""

    def event(self):
        """Event method"""

        trackCands = Belle2.PyStoreArray('TrackCands')
        if trackCands:
            print 'Number of pattern recognition tracks', \
                trackCands.getEntries()

            for (iTrackCand, trackCand) in enumerate(trackCands):
                print str(iTrackCand) + '. track'

                mcTrackId = trackCand.getMcTrackId()
                print 'McTrackId property', mcTrackId


                # trackCand does not have the RelationsInterface yet so we cannot access
                # it from python
                # Hopefully this will change soon when the RecoTrack is used.x

                # mcParticle = trackCand.getRelatedTo("MCParticles"
                # mcTrackCand = trackCand.getRelatedTo("MCTrackCands")

                # print "Related MCParticle" , mcParticle
                # print "Related Monte Carlo track" , mcTrackCand

########## Register modules  ##########
eventInfoSetterModule = register_module('EventInfoSetter')
eventInfoSetterModule.param({'evtNumList': [1], 'runList': [1],
                            'expList': [1]})

printCollectionsModule = register_module('PrintCollections')

particleGunModule = register_module('ParticleGun')
particleGunModule.param({
    'pdgCodes': [13, -13],
    'nTracks': 6,
    'varyNTracks': True,
    'momentumGeneration': 'uniform',
    'momentumParams': [0.2, 3.0],
    'thetaGeneration': 'uniform',
    'thetaParams': [17., 150.],
    })

## Put your track finder here
trackFinderModule = register_module('CDCLegendreTracking')

## Reference Monte Carlo tracks
trackFinderMCTruthModule = register_module('TrackFinderMCTruth')
trackFinderMCTruthModule.param({
    'UseCDCHits': True,
    'UseSVDHits': False,
    'UsePXDHits': False,
    'WhichParticles': ['primary'],
    'EnergyCut': 0.1,
    'GFTrackCandidatesColName': 'MCTrackCands',
    })

mcTrackMatcherModule = register_module('MCTrackMatcher')
mcTrackMatcherModule.param({
    'UseCDCHits': True,
    'UseSVDHits': False,
    'UsePXDHits': False,
    'MCGFTrackCandsColName': 'MCTrackCands',
    'MinimalPurity': 0.66,
    'RelateClonesToMCParticles': True,
    })

########## Create paths and add modules  ##########
main = create_path()
main.add_module(eventInfoSetterModule)
main.add_module(particleGunModule)

components = ['MagneticFieldConstant4LimitedRCDC', 'BeamPipe', 'PXD', 'SVD',
              'CDC']
simulation.add_simulation(main, components=components)

main.add_module(trackFinderModule)

main.add_module(trackFinderMCTruthModule)
main.add_module(mcTrackMatcherModule)

main.add_module(printCollectionsModule)
main.add_module(PrintMCMatchingRelation())

process(main)

# Print call statistics
print statistics
