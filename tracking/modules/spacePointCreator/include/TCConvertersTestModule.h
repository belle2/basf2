/**************************************************************************
 * BASF2 (Belle Analysis Framework 2)                                     *
 * Copyright(C) 2014  Belle II Collaboration                              *
 *                                                                        *
 * Author: The Belle II Collaboration                                     *
 * Contributors: Thomas Madlener                                          *
 *                                                                        *
 **************************************************************************/

#pragma once

#include <framework/core/Module.h>

#include <string>

namespace Belle2 {

  /**
   * Module for testing if the converting Modules do their job as intened. Takes the original genfit::TrackCand (e.g. from MCTruthFinder) that has been converted to a SpacePointTrackCand and the genfit::TrackCand that was generated by the vice versa (from SpacePointTrackCand to genfit::TrackCand) and compares these two. If the comparison fails, this module tries to find a reason why it failed and prints a summary at the end (in terminat)
   */
  class TCConvertersTestModule : public Module {

  public:
    TCConvertersTestModule(); /**< constructor */

    virtual void initialize(); /*<< initialize: check if all required StoreArrays are present, initialize counters, etc. */

    virtual void event(); /**< event: event-wise jobs */

    virtual void terminate(); /** terminate: print some summary information */

  protected:

    std::string m_PXDClusterName; /**< Container name of PXDCluster */

    std::string m_SVDClusterName; /**< Container name of SVDCluster */

    std::vector<std::string> m_genfitTCNames; /**< Names of genfit::TrackCand Store Arrays */

    std::string m_SPTCName; /**< Container name of SpacePointTrackCands */

    std::vector<std::string> m_SpacePointArrayNames; /**< Names of SpacePoint StoreArrays */

    // counter variables

    int m_genfitTCCtr; /**< counter for presented genfit::TrackCands */

    int m_convertedTCCtr; /**< counter for genfit::TrackCands which where obtained by converting from a SpacePointTrackCand */

    int m_SpacePointTCCtr; /**< counter for presented SpacePointTrackCands */

    int m_failedTooMany; /**< counter for conversions, where the converted genfit::TrackCand has more TrackCandHits than the original genfit::TrackCand */

    int m_failedTooLittle; /**< counter for conversions, where the converted genfit::TrackCand has less TrackCandHits than the original genfit::TrackCand */

    int m_failedNoSPTC; /**< counter for conversions where no SpacePointTrackCand was created (i.e. no relation to the original genfit::TrackCand is found) */

    int m_failedNoGFTC; /**< counter for conversions where no genfit::TrackCand was created from a SpacePointTrackCand (i.e. if there is a SpacePointTrackCand in the StoreArray but no genfit::TrackCand related from it, this counter will be increased) */

    int m_failedOther; /**< Counter for failed conversions for which none of the other stated coudl be assigned */

    int m_failedNotSameHits; /**< Counter for failed conversions for which the genfit::TrackCandidates do not contain the same TrackCandHits */

    int m_failedWrongOrder; /**< Counter for failed conversions due to wrong ordering of TrackCandHits */

    void initializeCounters(); /**< initialize all counter variables to zero, to avoid indeterministic behaviour */
  };
}