/**************************************************************************
 * BASF2 (Belle Analysis Framework 2)                                     *
 * Copyright(C) 2015 - Belle II Collaboration                             *
 *                                                                        *
 * Author: The Belle II Collaboration                                     *
 * Contributors: Oliver Frost                                             *
 *                                                                        *
 * This software is provided "as is" without any warranty.                *
 **************************************************************************/
#ifndef SEGMENTFINDERCDCBASEMODULE_H_
#define SEGMENTFINDERCDCBASEMODULE_H_

// Base track finder module
#include <tracking/modules/trackFinderCDC/TrackFinderCDCBaseModule.h>

#include <tracking/trackFindingCDC/eventdata/segments/CDCRecoSegment2D.h>


namespace Belle2 {
  /// Worker for building reconstructed segments form wirehits using reconstructed facets
  class SegmentFinderCDCBaseModule : public TrackFinderCDCBaseModule {

  public:
    // Constant for the orientation of segments to be generated.
    enum EOrientation {
      c_None,
      c_Symmetric,
      c_Outwards,
      c_Downwards
    };

  public:
    /// Constructor of the module overwritting the default desired orientation of the Segments.
    SegmentFinderCDCBaseModule(EOrientation orientation = c_None);

    /// Destructor of the module.
    virtual ~SegmentFinderCDCBaseModule() {;}

    ///  Initialize the Module before event processing
    virtual void initialize();

    /// Processes the event and generates track candidates
    virtual void event();

  public:
    /// Implementation specific method that generates segments and writes them to the output vector not carry about orientation.
    virtual void generate(std::vector<Belle2::TrackFindingCDC::CDCRecoSegment2D>&) {;}

  protected:
    /// Parameter: Name of the output StoreObjPtr of the segments generated by this module.
    std::string m_param_segmentsStoreObjName;

    /// Parameter: String that states the orientation. Valid orientations are "none" (as generated), "symmetric", "outwards", "downwards".
    std::string m_param_orientationString;

    /// Parameter: Switch if the segments shall be fitted after the generation
    bool m_param_fitSegments;

    /// Parameter: Switch if genfit::TrackCandidates shall be generated for each segment.
    bool  m_param_createGFTrackCands;

    /// Encoded orientation. Valid orientations are "c_None" (as generated), "c_Symmetric", "c_Outwards", "c_downwards.
    EOrientation m_orientation;

  }; // end class SegmentFinderCDCBaseModule

} //end namespace Belle2

#endif // SEGMENTFINDERCDCBASEMODULE_H_
