/**************************************************************************
 * BASF2 (Belle Analysis Framework 2)                                     *
 * Copyright(C) 2015 - Belle II Collaboration                             *
 *                                                                        *
 * Author: The Belle II Collaboration                                     *
 * Contributors: Oliver Frost                                             *
 *                                                                        *
 * This software is provided "as is" without any warranty.                *
 **************************************************************************/

#include <tracking/modules/trackFinderCDC/TrackFinderCDCBaseModule.h>

#include <framework/datastore/StoreArray.h>
#include <framework/datastore/StoreObjPtr.h>
#include <framework/dataobjects/EventMetaData.h>
#include <cdc/geometry/CDCGeometryPar.h>

//in type
#include <cdc/dataobjects/CDCHit.h>
#include <tracking/trackFindingCDC/eventtopology/CDCWireHitTopology.h>
#include <tracking/trackFindingCDC/topology/CDCWireTopology.h>

//out type
#include "genfit/TrackCand.h"

using namespace std;
using namespace Belle2;
using namespace TrackFindingCDC;

TrackFinderCDCBaseModule::TrackFinderCDCBaseModule() : Module()
{
  setDescription("This a base module for all track finders in the CDC");
  addParam("CDCHitsStoreArrayName",  m_param_cdcHitsStoreArrayName, "Name of the input StoreArray of the CDCHits.", string(""));
  addParam("GFTrackCandsStoreArrayName",  m_param_gfTrackCandsStoreArrayName, "Name of the output StoreArray of the Genfit track candidates generated by this module.", string(""));
}

TrackFinderCDCBaseModule::~TrackFinderCDCBaseModule()
{
}

void TrackFinderCDCBaseModule::initialize()
{
  // Input StoreArray of CDCHits
  StoreArray <CDCHit>::required(m_param_cdcHitsStoreArrayName);

  // Output StoreArray
  StoreArray <genfit::TrackCand>::registerPersistent(m_param_gfTrackCandsStoreArrayName);

  // Preload geometry during initialization
  // Marked as unused intentionally to avoid a compile warning
  CDC::CDCGeometryPar& cdcGeo __attribute__((unused)) = CDC::CDCGeometryPar::Instance();
  CDCWireTopology& topo __attribute__((unused)) = CDCWireTopology::getInstance();
}

void TrackFinderCDCBaseModule::beginRun()
{
}

void TrackFinderCDCBaseModule::event()
{
  // Try to fetch the CDCHits from the datastore
  B2DEBUG(100, "Getting the CDCHits from the data store");
  StoreArray <CDCHit> storedCDCHits(m_param_cdcHitsStoreArrayName);
  B2DEBUG(100, "  storedCDCHits.getEntries() == " << storedCDCHits.getEntries());

  // Create the wirehits - translate the CDCHits and attach the geometry.
  B2DEBUG(100, "Creating all CDCWireHits");
  CDCWireHitTopology& wireHitTopology = CDCWireHitTopology::getInstance();
  size_t nHits = wireHitTopology.fill(m_param_cdcHitsStoreArrayName);
  if (nHits == 0) {
    B2WARNING("Event with no hits");
  }

  StoreArray < genfit::TrackCand > storedGFTrackCands(m_param_gfTrackCandsStoreArrayName);
  storedGFTrackCands.create();
}

void TrackFinderCDCBaseModule::endRun()
{
}

void TrackFinderCDCBaseModule::terminate()
{
}

