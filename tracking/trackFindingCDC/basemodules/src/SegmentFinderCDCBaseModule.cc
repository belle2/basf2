/**************************************************************************
 * BASF2 (Belle Analysis Framework 2)                                     *
 * Copyright(C) 2015 - Belle II Collaboration                             *
 *                                                                        *
 * Author: The Belle II Collaboration                                     *
 * Contributors: Oliver Frost                                             *
 *                                                                        *
 * This software is provided "as is" without any warranty.                *
 **************************************************************************/
#include <tracking/trackFindingCDC/basemodules/SegmentFinderCDCBaseModule.h>

#include <tracking/trackFindingCDC/rootification/StoreWrappedObjPtr.h>

#include <tracking/trackFindingCDC/mclookup/CDCMCTrackStore.h>
#include <tracking/trackFindingCDC/mclookup/CDCSimHitLookUp.h>

#include <tracking/trackFindingCDC/fitting/CDCRiemannFitter.h>
#include <tracking/trackFindingCDC/eventtopology/CDCWireHitTopology.h>

#include <framework/datastore/StoreArray.h>

//out type
#include <genfit/TrackCand.h>

using namespace std;
using namespace Belle2;
using namespace TrackFindingCDC;

SegmentFinderCDCBaseModule::SegmentFinderCDCBaseModule() :
  TrackFinderCDCBaseModule(),
  m_param_segmentsStoreObjName("CDCRecoSegment2DVector")
{
  addParam("SegmentsStoreObjName",
           m_param_segmentsStoreObjName,
           "Name of the output StoreObjPtr of the segments generated by this module.",
           string(m_param_segmentsStoreObjName));


  ModuleParamList moduleParamList = this->getParamList();
  m_segmentFitter.exposeParameters(&moduleParamList);
  m_segmentOrienter.exposeParameters(&moduleParamList);
  m_segmentExporter.exposeParameters(&moduleParamList);
  this->setParamList(moduleParamList);
}

void SegmentFinderCDCBaseModule::initialize()
{
  TrackFinderCDCBaseModule::initialize();
  StoreWrappedObjPtr< std::vector<CDCRecoSegment2D> >::registerTransient(m_param_segmentsStoreObjName);
  m_segmentFitter.initialize();
  m_segmentOrienter.initialize();
  m_segmentExporter.initialize();
}

void SegmentFinderCDCBaseModule::terminate()
{
  m_segmentExporter.terminate();
  m_segmentOrienter.terminate();
  m_segmentFitter.terminate();
  TrackFinderCDCBaseModule::terminate();
}

void SegmentFinderCDCBaseModule::event()
{
  m_segmentFitter.beginEvent();
  m_segmentOrienter.beginEvent();
  m_segmentExporter.beginEvent();

  // Generate the segments
  std::vector<CDCRecoSegment2D> generatedSegments;
  generatedSegments.reserve(90);
  generateSegments(generatedSegments);
  m_segmentFitter.apply(generatedSegments);

  // Now aquire the store vector
  StoreWrappedObjPtr< std::vector<CDCRecoSegment2D> > storedRecoSegments(m_param_segmentsStoreObjName);
  storedRecoSegments.create();
  std::vector<CDCRecoSegment2D>& outputSegments = *storedRecoSegments;
  outputSegments.clear();

  m_segmentOrienter.apply(generatedSegments, outputSegments);
  m_segmentExporter.apply(outputSegments);
}
