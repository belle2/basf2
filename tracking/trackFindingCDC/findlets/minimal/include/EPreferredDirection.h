/**************************************************************************
 * basf2 (Belle II Analysis Software Framework)                           *
 * Author: The Belle II Collaboration                                     *
 *                                                                        *
 * See git log for contributors and copyright holders.                    *
 * This file is licensed under LGPL-3.0, see LICENSE.md.                  *
 **************************************************************************/
#pragma once

#include <stdexcept>
#include <string>

namespace Belle2 {
  namespace TrackFindingCDC {

    /**
     * Enum for the desired output direction of flight of tracks / segments.
     *
     * Depending on the finder algorithm tracks / segmetns can be generated forward or backward to
     * the direction of travel at random. This enum presents the options for
     * some simple heuristics which direction of travel is preferred by
     * by the user for a predictable outcome.
     */
    enum class EPreferredDirection {
      /// Unchanged as generated by the finding algorithm
      c_None,
      /// Flip the tracks to be outward going as in regular beam events (note that inwards is generally not reasonable)
      c_Outwards,
      /// Flip the tracks to be downward going as in cosmic events (note that upwards is generally not reasonable)
      c_Downwards,
      /// Make two copies of the of each track where one is reversed to the other to let a following algorithm examine both possibilites.
      c_Symmetric,
      /// Make two copies of the of tracks that are likely curling fix others to outwards.
      c_Curling,
    };

    /// Helper function to translate user provided strings to the enum values of the preferred direction
    inline EPreferredDirection getPreferredDirection(const std::string& preferredDirectionString)
    {
      if (preferredDirectionString == std::string("none")) {
        return EPreferredDirection::c_None;
      } else if (preferredDirectionString == std::string("symmetric")) {
        return EPreferredDirection::c_Symmetric;
      } else if (preferredDirectionString == std::string("outwards")) {
        return EPreferredDirection::c_Outwards;
      } else if (preferredDirectionString == std::string("downwards")) {
        return EPreferredDirection::c_Downwards;
      } else if (preferredDirectionString == std::string("curling")) {
        return EPreferredDirection::c_Curling;
      } else {
        throw std::invalid_argument("Unexpected preferred direction string : '" + preferredDirectionString + "'");
      }
    }
  }
}
