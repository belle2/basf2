/**************************************************************************
 * BASF2 (Belle Analysis Framework 2)                                     *
 * Copyright(C) 2015 - Belle II Collaboration                             *
 *                                                                        *
 * Author: The Belle II Collaboration                                     *
 * Contributors: Oliver Frost                                             *
 *                                                                        *
 * This software is provided "as is" without any warranty.                *
 **************************************************************************/
#pragma once

#include <tracking/trackFindingCDC/eventdata/segments/CDCRecoSegment2D.h>
#include <tracking/trackFindingCDC/fitting/CDCRiemannFitter.h>
#include <tracking/trackFindingCDC/findlets/base/Findlet.h>

#include <tracking/trackFindingCDC/utilities/StringManipulation.h>

#include <genfit/TrackCand.h>
#include <framework/datastore/StoreArray.h>

#include <vector>

namespace Belle2 {
  namespace TrackFindingCDC {

    /// Exports segments has genfit tracks
    class SegmentExporter:
      public Findlet<const CDCRecoSegment2D> {

    private:
      /// Type of the base class
      using Super = Findlet<const CDCRecoSegment2D>;

    public:
      /// Short description of the findlet
      virtual std::string getDescription() override
      {
        return "Creates reconstruction track candidates from each individual segments.";
      }

      /// Add the parameters of the filter to the module.
      void exposeParameters(ModuleParamList* moduleParamList, const std::string& prefix = "") override final
      {
        moduleParamList->addParameter(prefixed(prefix, "exportSegments"),
                                      m_param_exportSegments,
                                      "Switch for the creation of track candidates for each segment.",
                                      bool(m_param_exportSegments));

        moduleParamList->addParameter(prefixed(prefix, "exportSegmentsInto"),
                                      m_param_exportSegmentsInto,
                                      "Name of the output StoreArray of track candidates.",
                                      std::string(m_param_exportSegmentsInto));
      }

    public:
      /// Signal initialisation phase to register store array for export
      virtual void initialize() override
      {
        // Output StoreArray
        if (m_param_exportSegments) {
          StoreArray <genfit::TrackCand> storedGFTrackCands(m_param_exportSegmentsInto);
          storedGFTrackCands.registerInDataStore();
        }
        Super::initialize();
      }

      /// Signal new event
      virtual void beginEvent() override
      {
        Super::beginEvent();
      }

      /// Write give segments into track store array
      virtual void apply(const std::vector<CDCRecoSegment2D>& segments) override final
      {
        // Put code to generate gf track cands here if requested.
        if (m_param_exportSegments) {
          StoreArray<genfit::TrackCand> storedGFTrackCands(m_param_exportSegmentsInto);
          for (const CDCRecoSegment2D& segment : segments) {
            genfit::TrackCand* ptrTrackCand = storedGFTrackCands.appendNew();
            segment.fillInto(*ptrTrackCand);
          }
        }
      }

    private:
      /// Parameter: Switch if genfit::TrackCandidates shall be generated for each segment.
      bool m_param_exportSegments = false;

      /// Parameter: Name of the output StoreArray of the Genfit track candidates generated by this module.
      std::string m_param_exportSegmentsInto = "SegmentRecoTracks";

    };
  }
}
