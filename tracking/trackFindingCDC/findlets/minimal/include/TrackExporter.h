/**************************************************************************
 * BASF2 (Belle Analysis Framework 2)                                     *
 * Copyright(C) 2015 - Belle II Collaboration                             *
 *                                                                        *
 * Author: The Belle II Collaboration                                     *
 * Contributors: Oliver Frost                                             *
 *                                                                        *
 * This software is provided "as is" without any warranty.                *
 **************************************************************************/
#pragma once

#include <tracking/trackFindingCDC/eventdata/tracks/CDCTrack.h>
#include <tracking/trackFindingCDC/fitting/CDCRiemannFitter.h>
#include <tracking/trackFindingCDC/findlets/base/Findlet.h>

#include <tracking/trackFindingCDC/utilities/StringManipulation.h>

#include <genfit/TrackCand.h>
#include <framework/datastore/StoreArray.h>

#include <vector>

namespace Belle2 {
  namespace TrackFindingCDC {

    /**
     *  Exports tracks has genfit track candidates
     *  Sets the related genfit track candidates in each exported track
     */

    class TrackExporter:
      public Findlet<CDCTrack> {

    private:
      /// Type of the base class
      typedef Findlet<CDCTrack> Super;

    public:
      /// Short description of the findlet
      virtual std::string getDescription() override
      {
        return "Creates reconstruction track candidates from each individual tracks.";
      }

      /** Add the parameters of the filter to the module */
      void exposeParameters(ModuleParamList* moduleParamList, const std::string& prefix = "") override final
      {
        moduleParamList->addParameter(prefixed(prefix, "GFTrackCandsStoreArrayName"),
                                      m_param_exportTracksInto,
                                      "Alias for exportTracksInto",
                                      std::string(m_param_exportTracksInto));

        moduleParamList->addParameter(prefixed(prefix, "WriteGFTrackCands"),
                                      m_param_exportTracks,
                                      "Alias for exportTracks",
                                      bool(m_param_exportTracks));

        moduleParamList->addParameter(prefixed(prefix, "exportTracks"),
                                      m_param_exportTracks,
                                      "Switch for the creation of genfit track candidates for each cdc track.",
                                      bool(m_param_exportTracks));

        moduleParamList->addParameter(prefixed(prefix, "exportTracksInto"),
                                      m_param_exportTracksInto,
                                      "Name of the output StoreArray of genfit track candidates.",
                                      std::string(m_param_exportTracksInto));
      }

    public:
      /// Signal initialisation phase to register store array for export
      virtual void initialize() override
      {
        // Output StoreArray
        if (m_param_exportTracks) {
          StoreArray <genfit::TrackCand> storedGFTrackCands(m_param_exportTracksInto);
          storedGFTrackCands.registerInDataStore();
        }
        Super::initialize();
      }

      /// Signal new event recreate the store array
      virtual void beginEvent() override
      {
        if (m_param_exportTracks) {
          StoreArray<genfit::TrackCand> storedGFTrackCands(m_param_exportTracksInto);
          storedGFTrackCands.create();
        }
        Super::beginEvent();
      }

      /// Write give tracks into track store array
      virtual void apply(std::vector<CDCTrack>& tracks) override final
      {
        // Put code to generate gf track cands here if requested.
        if (m_param_exportTracks) {
          StoreArray<genfit::TrackCand> storedGFTrackCands(m_param_exportTracksInto);
          for (CDCTrack& track : tracks) {
            genfit::TrackCand gfTrackCand;
            if (track.fillInto(gfTrackCand)) {
              genfit::TrackCand* storedGenfitTrackCand = storedGFTrackCands.appendNew(gfTrackCand);
              track.setRelatedGenfitTrackCandidate(storedGenfitTrackCand);
            }
          }
        }
      }

    private:
      /// Parameter: Switch if genfit::TrackCandidates shall be generated for each track.
      bool m_param_exportTracks = false;

      /// Parameter: Name of the output StoreArray of the Genfit track candidates generated by this module.
      std::string m_param_exportTracksInto = "";

    }; // end class
  } // end namespace TrackFindingCDC
} // end namespace Belle2
