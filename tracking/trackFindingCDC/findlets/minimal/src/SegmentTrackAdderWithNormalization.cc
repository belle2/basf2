/**************************************************************************
 * BASF2 (Belle Analysis Framework 2)                                     *
 * Copyright(C) 2016 - Belle II Collaboration                             *
 *                                                                        *
 * Author: The Belle II Collaboration                                     *
 * Contributors: Nils Braun                                               *
 *                                                                        *
 * This software is provided "as is" without any warranty.                *
 **************************************************************************/
#include <tracking/trackFindingCDC/findlets/minimal/SegmentTrackAdderWithNormalization.h>

#include <tracking/trackFindingCDC/eventdata/tracks/CDCTrack.h>
#include <tracking/trackFindingCDC/eventdata/segments/CDCSegment2D.h>

#include <tracking/trackFindingCDC/utilities/Algorithms.h>
#include <vector>

using namespace Belle2;
using namespace TrackFindingCDC;

/// Constructor for registering the sub.findlets
SegmentTrackAdderWithNormalization::SegmentTrackAdderWithNormalization() : Super()
{
  addProcessingSignalListener(&m_segmentTrackAdder);
  addProcessingSignalListener(&m_trackNormalizer);
}

/// Expose the parameters of the sub-findlets.
void SegmentTrackAdderWithNormalization::exposeParameters(ModuleParamList* moduleParamList, const std::string& prefix)
{
  m_segmentTrackAdder.exposeParameters(moduleParamList, prefix);
  m_trackNormalizer.exposeParameters(moduleParamList, prefix);
}

/// Short description of the findlet
std::string SegmentTrackAdderWithNormalization::getDescription()
{
  return "Add the matched segments to the tracks and normalize the tracks afterwards. Also deletes all "
         "hits from tracks, that are now part in another track (or should not be part in any).";
}

/// Apply the findlet
void SegmentTrackAdderWithNormalization::apply(std::vector<WeightedRelation<CDCTrack, const CDCSegment2D>>& relations,
                                               std::vector<CDCTrack>& tracks, const std::vector<CDCSegment2D>& segments)
{
  for (const CDCSegment2D& segment : segments) {
    segment.unsetAndForwardMaskedFlag(true);
  }

  // Add all segments to the tracks, which were marked as matched
  m_segmentTrackAdder.apply(relations);

  for (const CDCSegment2D& segment : segments) {
    segment.unsetAndForwardMaskedFlag(true);
  }

  // Get the map from all hits in the segments to their matching track partner (generated by the adder during adding)
  // and add the hits of all segments without a partner. Then use this list to remove those hits from tracks,
  // that are now matched to another track (or should not be matched to any track at all, because the whole segment is
  // not matched to one track)
  auto& hitMatchedTrackMap = m_segmentTrackAdder.getHitTrackMap();

  for (const CDCSegment2D& segment : segments) {
    if (not segment.getAutomatonCell().hasTakenFlag()) {
      for (const CDCRecoHit2D& recoHit : segment) {
        const CDCHit* cdcHit = recoHit.getWireHit().getHit();

        // Allow for doubled hits, but keep the first (probably better) match here.
        if (hitMatchedTrackMap.find(cdcHit) == hitMatchedTrackMap.end()) {
          hitMatchedTrackMap.insert({cdcHit, nullptr});
        }
      }
    }
  }

  const auto& hitIsInOtherTrack = [&hitMatchedTrackMap](const CDCTrack & thisTrack, const CDCRecoHit3D & recoHit) {
    const CDCHit* cdcHit = recoHit.getWireHit().getHit();

    // If the hit is not part of any segments, it should stay
    if (hitMatchedTrackMap.find(cdcHit) == hitMatchedTrackMap.end()) {
      return false;
    }

    const CDCTrack* matchedTrack = hitMatchedTrackMap[cdcHit];

    // If the segment it belonged to, was not matched to any track, the matched track is a nullptr.
    // This means we delete the hit from the track and untick its taken flag.
    if (not matchedTrack) {
      recoHit.getWireHit().getAutomatonCell().unsetTakenFlag();
      return true;
    }

    // If the track, this hit should belong to (because the segment was matched to this track),
    // is the track we are currently looking on, the hit can stay. If not, the hit should be deleted from
    // this track. We do not have to untick the taken flag, because the hit is still used (by the other track).
    return matchedTrack != &thisTrack;
  };

  for (CDCTrack& track : tracks) {
    // Will call hitIsInOtherTrack(track, hit) for each hit in the track and remove those, where
    // hitIsInOtherTrack yields true.
    erase_remove_if(track,
                    std::bind(hitIsInOtherTrack, std::cref(track), std::placeholders::_1));
  }

  // Normalize the trajectory and hit contents of the tracks
  m_trackNormalizer.apply(tracks);
}