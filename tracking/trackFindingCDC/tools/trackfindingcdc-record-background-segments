#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import tracking.modules as modules
from tracking.run.event_generation import StandardEventGenerationRun
from tracking import add_cdc_track_finding

import logging
import sys


class BackgroundSegmentsRecordingRun(StandardEventGenerationRun):
    """
    Record the variables for the BackgroundSegmentsFilter in the SegmentsTrackCombinerModule
    """
    
    n_events = 3000
    bkg_files = os.path.join(os.environ["VO_BELLE2_SW_DIR"], "bkg")

    def create_path(self):
        # Sets up a path that plays back pregenerated events or generates events
        # based on the properties in the base class.
        main_path = StandardEventGenerationRun.create_path(self)
        add_cdc_track_finding(main_path)

        for m in main_path.modules():
            if m.name().startswith("SegmentTrackCombiner"):
                m.param("BackgroundSegmentsFilter", "recording")
                
        return main_path


def main():
    run = BackgroundSegmentsRecordingRun()
    run.configure_and_execute_from_commandline()


if __name__ == "__main__":
    logging.basicConfig(stream=sys.stdout, level=logging.INFO, format='%(levelname)s:%(message)s')
    main()
