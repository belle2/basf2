#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""Trains a boosted decision tree from a TTree set of records."""

import os
import sys
import os.path
import subprocess

import tracking.utilities as utilities
import tracking.root_utils as root_utils

from trackfindingcdc.tmva.train import FastBDTClassifier, show_tmva_results

import ROOT.TFile

import logging


def main():
    argument_parser = utilities.DefaultHelpArgumentParser()

    argument_parser.add_argument(
        "records_file_path",
        help="ROOT file containing the TTree of records on which to train a boosted decision tree.",
    )

    argument_parser.add_argument(
        "-t",
        "--input-tree-name",
        default="records",
        help="Name of the input TTree in the ROOT file",
    )

    argument_parser.add_argument(
        "-r",
        "--replace-nan",
        default=None,
        type=int,
        help="Choose a value to replace all non finit values (NaN, +inf, -Inf) of input variables.",
    )

    argument_parser.add_argument(
        "-s",
        "--show",
        action="store_true",
        help="Show the overview immediatly."
        )
    
    argument_parser.add_argument(
        "--show-tmva-results",
        action="store_true",
        help="Show the tmva results immediatly."
        )
    
    argument_parser.add_argument(
        "--truth",
        type=str,
        default="truth",
        help="Name of the column containing the truth information."
        )


    arguments = argument_parser.parse_args()

    records_file_path = arguments.records_file_path
    input_tree_name = arguments.input_tree_name

    with root_utils.root_open(records_file_path) as records_tfile:
        input_tree = records_tfile.Get(input_tree_name)

        records_folder_path, records_file_name = os.path.split(records_file_path)
        records_file_basename, ext = os.path.splitext(records_file_name)

        weights_file_name = records_file_basename + ".weights" + ext
        weights_file_path = os.path.join(records_folder_path, weights_file_name)

        decision_tree_name = records_file_basename

        classifer = FastBDTClassifier(
            decision_tree_name,
            weights_file_path,
            replace_nan=arguments.replace_nan,
            truth=arguments.truth
            )

        classifer.train(input_tree)

    if arguments.show:
        import tracking.validation.utilities
        with root_utils.root_open(weights_file_path) as tfile:
            root_utils.root_browse(tfile)
            input("Press enter to close.")


    if arguments.show_tmva_results:
        show_tmva_results(weights_file_path)
        #subprocess.Popen(['showTMVAResults', weights_file_path])


if __name__ == "__main__":
    logging.basicConfig(stream=sys.stdout, level=logging.INFO, format='%(levelname)s:%(message)s')
    main()
