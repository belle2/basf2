#!/usr/bin/env python3

##########################################################################
# basf2 (Belle II Analysis Software Framework)                           #
# Author: The Belle II Collaboration                                     #
#                                                                        #
# See git log for contributors and copyright holders.                    #
# This file is licensed under LGPL-3.0, see LICENSE.md.                  #
##########################################################################

"""
<header>
  <contact>software-tracking@belle2.org</contact>
  <input>EvtGenSim.root</input>
  <output>SVDHoughTrackingValidationBkg.root</output>
  <description>
  This module validates that the SVDHoughTracking is capable of reconstructing tracks in Y(4S) runs with background.
  </description>
</header>
"""

import tracking
from tracking.validation.run import TrackingValidationRun
import logging
import basf2
from tracking.path_utils import add_svd_hough_tracking

VALIDATION_OUTPUT_FILE = 'SVDHoughTrackingValidationBkg.root'
N_EVENTS = 1000
ACTIVE = True


class SVDHoughTrackingValidationBkg(TrackingValidationRun):
    """
    Validation class for the SVDHoughTracking
    """
    #: the number of events to process
    n_events = N_EVENTS
    #: Generator to be used in the simulation (-so)
    generator_module = 'generic'
    #: root input file to use, generated by central validation script
    root_input_file = '../EvtGenSim.root'
    #: use full detector for validation
    components = None

    @staticmethod
    def finder_module(path):
        """Add the VXDHoughTracking module and related modules to the basf2 path"""
        tracking.add_hit_preparation_modules(path, components=["SVD"])
        add_svd_hough_tracking(path)

    #: use only the svd hits when computing efficiencies
    tracking_coverage = {
        'WhichParticles': ['SVD'],  # Include all particles seen in the SVD detector, also secondaries
        'UsePXDHits': False,
        'UseSVDHits': True,
        'UseCDCHits': False,
    }

    #: perform fit after track finding
    fit_tracks = True
    #: plot pull distributions
    pulls = True
    #: do not create expert-level output histograms in dedicated folder but in the main folder
    use_expert_folder = False
    #: output file of plots
    output_file_name = VALIDATION_OUTPUT_FILE
    #: define empty list of non expert parameters so that no shifter plots are created (to revert just remove following line)
    non_expert_parameters = []


def main():
    """
    create SVD validation class and execute
    """
    basf2.set_random_seed(1337)
    validation_run = SVDHoughTrackingValidationBkg()
    validation_run.configure_and_execute_from_commandline()


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    if ACTIVE:
        main()
    else:
        print("This validation deactivated and thus basf2 is not executed.\n"
              "If you want to run this validation, please set the 'ACTIVE' flag above to 'True'.\n"
              "Exiting.")
