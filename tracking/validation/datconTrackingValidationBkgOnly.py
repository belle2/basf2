#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
<header>
  <contact>software-tracking@belle2.org</contact>
  <input>BGOnly.root</input>
  <output>DATCONTrackingValidationBkgOnly.root</output>
  <description>
  This module validates that the svd only track finding is capable of reconstructing tracks in Y(4S) runs with bkg included.
  </description>
</header>
"""

import tracking
from tracking.validation.run import TrackingValidationRun
import logging
import basf2
VALIDATION_OUTPUT_FILE = 'DATCONTrackingValidationBkgOnly.root'
N_EVENTS = 1000
ACTIVE = True

basf2.set_random_seed(1337)


def setupFinderModule(path):
    tracking.add_hit_preparation_modules(path, components=["SVD"])
    path.add_module('DATCON',
                    minimumUClusterTime=-10,
                    minimumVClusterTime=-10,
                    maximumUClusterTime=60,
                    maximumVClusterTime=60,

                    useSubHoughSpaces=False,

                    simpleVerticalHoughSpaceSize=0.25,
                    simpleNAngleSectors=256,
                    simpleNVerticalSectors=256,
                    simpleMinimumHSClusterSize=4,
                    simpleMaximumHSClusterSize=200,

                    maxRelations=1000000,
                    relationFilter='angleAndTime',
                    relationFilterParameters={'AngleAndTimeThetaCutDeltaL0': 0.03,
                                              'AngleAndTimeThetaCutDeltaL1': 0.10,
                                              'AngleAndTimeThetaCutDeltaL2': 0.15,
                                              'AngleAndTimeDeltaUTime': 30.,
                                              'AngleAndTimeDeltaVTime': 30., },
                    rootFileName='trackCandAnalysisBkgOnly.root',
                    maxRelationsCleaner=2000,
                    # twoHitFilter='twoHitVirtualIPQI',
                    # twoHitUseNBestHits=100,
                    twoHitFilter='all',
                    twoHitUseNBestHits=0,
                    threeHitUseNBestHits=20,
                    fourHitUseNBestHits=10,
                    fiveHitUseNBestHits=10,

                    # trackQualityEstimationMethod='helixFit',
                    minQualitiyIndicatorSize3=0.80,
                    minQualitiyIndicatorSize4=0.02,
                    minQualitiyIndicatorSize5=0.02,
                    maxNumberOfHitsForEachPathLength=8,

                    RecoTracksStoreArrayName='RecoTracks',
                    )


class DATCONTrackingValidationBkgOnly(TrackingValidationRun):
    """
    Validation class for the four 4-SVD Layer tracking
    """
    #: the number of events to process
    n_events = N_EVENTS
    #: Generator to be used in the simulation (-so)
    generator_module = 'generic'
    #: root input file to use, generated by central validation script
    root_input_file = '../BGOnly.root'
    #: use full detector for validation
    components = None

    #: lambda method which is used by the validation to add the svd finder modules
    finder_module = staticmethod(setupFinderModule)

    #: use only the svd hits when computing efficiencies
    tracking_coverage = {
        'WhichParticles': ['SVD'],  # Include all particles seen in the SVD detector, also secondaries
        'UsePXDHits': False,
        'UseSVDHits': True,
        'UseCDCHits': False,
    }

    #: perform fit after track finding
    fit_tracks = True
    #: plot pull distributions
    pulls = True
    #: output file of plots
    output_file_name = VALIDATION_OUTPUT_FILE

    #: Store additional information in output file (like the full trees)
    extended = True
    saveFullTrees = True


def main():
    """
    create SVD validation class and execute
    """
    validation_run = DATCONTrackingValidationBkgOnly()
    validation_run.configure_and_execute_from_commandline()


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    if ACTIVE:
        main()
