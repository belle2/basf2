#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
<header>
  <contact>tracking@belle2.kek.jp</contact>
  <input>EvtGenSimNoBkg.root</input>
  <output>VXDTrackingValidation.root</output>
  <description>This module validates that the vxd track finding is capable of reconstructing tracks in Y(4S) runs.</description>
</header>
"""

VALIDATION_OUTPUT_FILE = 'VXDTrackingValidation.root'
N_EVENTS = 1000
ACTIVE = True

import basf2
basf2.set_random_seed(1337)

import logging

from tracking.validation.run import TrackingValidationRun
import tracking


class VXD(TrackingValidationRun):
    """
    Class for the validation of the VXD track finders
    """

    #: number of events to process
    n_events = N_EVENTS
    #: root input file to use, in generated by central validation script
    root_input_file = '../EvtGenSimNoBkg.root'
    #: Use all Belle 2 detector components -> None
    components = None

    #: lambda method which is used by the validation to add the vxd finder modules
    finder_module = staticmethod(lambda path: tracking.add_vxd_track_finding(path, components=["PXD", "SVD"]))

    #: fit the tracks after the track finder
    fit_geometry = "default"

    #: use only hits from the VXD detectors
    tracking_coverage = {
        'UsePXDHits': True,
        'UseSVDHits': True,
        'UseCDCHits': False,
    }

    #: also create pull distributions
    pulls = True

    #: write to output file
    output_file_name = VALIDATION_OUTPUT_FILE


def main():
    """
    create and execute the VXD validation
    """
    validation_run = VXD()
    validation_run.configure_and_execute_from_commandline()


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    if ACTIVE:
        main()
