/**************************************************************************
 * basf2 (Belle II Analysis Software Framework)                           *
 * Author: The Belle II Collaboration                                     *
 *                                                                        *
 * See git log for contributors and copyright holders.                    *
 * This file is licensed under LGPL-3.0, see LICENSE.md.                  *
 **************************************************************************/

//-----------------------------------------------------------------------------
// Description : A program to generate CDC trigger configuration data
//-----------------------------------------------------------------------------

#define TRG_SHORT_NAMES

#include <cstdlib>
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include "trg/trg/Utilities.h"

using namespace std;
using namespace Belle2;

#define DEBUG_LEVEL   0
#define NAME          "TRGCDCConfig"
#define VERSION       "version 0.01"
#define ENV_PATH      "BELLE2_LOCAL_DIR"
#define N_FRONT       500
#define NOT_CONNECTED 99999

int
main(int argc, const char* argv[])
{

  cout << NAME << " ... " << VERSION << endl;
  const string tab = "    ";

  //...Check arguments...
  if (argc < 3) {
    cout << NAME << " !!! two arguments necessary" << endl
         << tab << " 1 : CDCWireConfig data file" << endl
         << tab << " 2 : Version for new config file" << endl;
    return -1;
  }

  //...Date...
  string ts0 = TRGUtil::dateStringF();
  string ts1 = TRGUtil::dateString();

  //...2nd argument...
  const string version = argv[2];

  //...1st argument...
  const string outname = "TRGCDCConfig_" + version + "_" + ts0 + ".dat";

  //...Get path to data...
  const string path = getenv(ENV_PATH);
  const string inname = path + "/data/trg/" + argv[1];
  cout << tab << "CDC Wire Config    : " << inname << endl;
  cout << tab << "CDC Trigger Config : " << outname << endl;

  //...Open configuration data...
  ifstream infile(inname.c_str(), ios::in);
  if (infile.fail()) {
    cout << NAME << " !!! can not open file" << endl
         << "    " << inname << endl;
    return -2;
  }

  //...Get CDC geometry...
//  TRGCDC & cdc = * TRGCDC::getTRGCDC();
//  cdc.dump("geometry");
//  return 0;

  //...Read configuration data
  string cdcVersion = "";
  char b[800];
  unsigned lines = 0;
  unsigned id[100];
  string type[100];
  unsigned sid[100];
  unsigned nw[100];
  unsigned lid[100];
  unsigned asid[100];
  unsigned assid[100];
  while (! infile.eof()) {
    infile.getline(b, 800);
    string l(b);

    bool skip = false;
    for (unsigned i = 0; i < 7; i++) {
      string car = TRGUtil::carstring(l);
      l = TRGUtil::cdrstring(l);

      if (car[0] == '#') {
        skip = true;
        break;
      } else if (car == "CDC") {
        cdcVersion = string(b);
        skip = true;
        break;
      }

      if (i == 0) {
        id[lines] = atoi(car.c_str());
      } else if (i == 1) {
        type[lines] = car;
      } else if (i == 2) {
        sid[lines] = atoi(car.c_str());
      } else if (i == 3) {
        nw[lines] = atoi(car.c_str());
      } else if (i == 4) {
        lid[lines] = atoi(car.c_str());
      } else if (i == 5) {
        asid[lines] = atoi(car.c_str());
      } else if (i == 6) {
        assid[lines] = atoi(car.c_str());
      }
    }

    if (skip)
      continue;

    if (DEBUG_LEVEL)
      cout << lines
           << " " << id[lines]
           << " " << type[lines]
           << " " << sid[lines]
           << " " << nw[lines]
           << " " << lid[lines]
           << " " << asid[lines]
           << " " << assid[lines]
           << endl;

    ++lines;
  }
  infile.close();

  //...Open configuration data...
  ofstream outfile(outname.c_str(), ios::out);
  if (outfile.fail()) {
    cout << NAME << " !!! can not open file" << endl
         << "    " << outname << endl;
    return -2;
  }

  //...Front-end...
  unsigned fidBase = 0;
  vector<unsigned> front[N_FRONT];

  //...Merger...
  unsigned midBase = 0;
  vector<unsigned> merge[N_FRONT];

  //...Wire by wire connection table...
  outfile << "# Generated by " << NAME << " " << VERSION << endl;
  outfile << "# " << ts1 << endl;
  outfile << "#" << endl;
  outfile << cdcVersion << endl;
  outfile << "CDC Trigger Config Version " << version << endl;
  outfile << "#" << endl;
  outfile << "# note : id is id of a board. Therefore tsf id is same as "
          << "super layer id" << endl;
  outfile << "# note : id 99999 means no connection" << endl;
  outfile << "#" << endl;
  outfile << "# wire id | layer id | front id | merge id | tsf id" << endl;
  unsigned nWires = 0;
  for (unsigned i = 0; i < lines; i++) {

    //...# of front-end...
    const unsigned nFront = nw[i] / 16;

    //...# of merger...
    unsigned nMerge = nFront / 4;
    if (nFront % 4)
      ++nMerge;

//        cout << "nMerge = " << nMerge << endl;

    //...Wire loop...
    for (unsigned j = 0; j < nw[i]; j++) {

      //...Wire ID...
      const unsigned wid = nWires + j;

      //...Front-end...
      const unsigned fid = j / 16 + fidBase;
      front[fid].push_back(wid);

      //...Merger...
      unsigned mid = j / 64 + midBase;
      if (fid < 10)
        mid = NOT_CONNECTED;
      else
        merge[mid].push_back(wid);

      outfile.width(9);
      outfile << wid;
      outfile << "   ";
      outfile.width(8);
      outfile << i;
      outfile << "   ";
      outfile.width(8);
      outfile << fid;
      outfile << "   ";
      outfile.width(8);
      outfile << mid;
      outfile << "   ";
      outfile.width(6);
      if (mid == NOT_CONNECTED)
        outfile << NOT_CONNECTED;
      else
        outfile << sid[i];
      outfile << endl;
    }

    //...Front-end...
    if (fidBase == 0) {
      if (front[fidBase].size() == 32)
        fidBase += nFront;
    } else {
      if (front[fidBase].size() == 48)
        fidBase += nFront;
    }

    //...Merger...
    if (merge[midBase].size() == 384)
      midBase += nMerge;

    //...# of wires...
    nWires += nw[i];

  }

  //...Implementaion...


  //...Termination...
  cout << NAME << " ... terminated" << endl;
}
