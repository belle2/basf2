readTRGCDC(){

  gROOT->Reset();
  gROOT->SetStyle("Plain");
  gStyle->SetOptStat(111111111);
  gStyle->SetOptFit(1111111111);
  gStyle->SetStatFontSize(0.05);

  // Read file
  TFile* inFile = new TFile("TRGCDC.root");
  TTree* inTree = (TTree*)inFile->Get("m_tree");
  // Set branches
  TClonesArray* fitParameters = new TClonesArray("TVectorD"); 
  TClonesArray* mcParameters = new TClonesArray("TVectorD"); 
  inTree->SetBranchAddress("fitParameters", &fitParameters);
  inTree->SetBranchAddress("mcParameters", &mcParameters);

  // Make Histogram
  TH1F* hpT    = new TH1F("histpT","Plot of pT",93,0,7.0);
  TH1F* hphi0   = new TH1F("hphi00","",87,0,360);
  TH1F* hz0     = new TH1F("histz0","Plot of z0",98,-25,25);
  TH1F* htheta = new TH1F("htheta","",130,20,150);
  hphi0->SetMinimum(0);
  hpT->SetMinimum(0);
  // MC Histograms
  TH1F* hMCpT    = new TH1F("histMCpT","Plot of pT",93,0,7.0);
  TH1F* hMCphi0   = new TH1F("hMCphi00","",87,0,360);
  TH1F* hMCz0     = new TH1F("histMCz0","Plot of z0",98,-25,25);
  TH1F* hMCtheta = new TH1F("hMCtheta","",130,20,150);
  hMCphi0->SetMinimum(0);
  hMCpT->SetMinimum(0);

  // pt Resolutions
  TH1F* hpT1    = new TH1F("histpT1","Plot Resolution pT=[0,1.5]GeV",93,-4,4);
  TH1F* hpT2    = new TH1F("histpT2","Plot Resolution pT=[1.5,2.5]GeV",93,-4,4);
  TH1F* hpT3    = new TH1F("histpT3","Plot Resolution pT=[2.5,3.5]GeV",93,-4,4);
  TH1F* hpT4    = new TH1F("histpT4","Plot Resolution pT=[3.5,inf]GeV",93,-4,4);

  const int nEvents = inTree->GetEntries();
  cout<<"Number of events: "<<nEvents<<endl;
  
  // For MC-Fit combined graph
  double* mcPt = new double[nEvents];
  double* fitPt = new double[nEvents];
  double* mcPhi0 = new double[nEvents];
  double* fitPhi0 = new double[nEvents];
  double* mcZ0 = new double[nEvents];
  double* fitZ0 = new double[nEvents];
  double* mcTheta = new double[nEvents];
  double* fitTheta = new double[nEvents];

  double Trg_PI = 3.141592653589793;

  //[0]=pt, [1]=phi0, [2]=z0(cm), [3]=cot
  TVectorD tempPar(4);
  TVectorD tempMCPar(4);

  Double_t theta;
  Double_t mctheta;
  for(int event=0; event<inTree->GetEntriesFast();event++){
    //Get event
    inTree->GetEntry(event);
    //Number of tracks
    //cout<<"Number of tracks: "<<fitParameters->GetEntriesFast()<<endl;
    for(int track=0; track<fitParameters->GetEntriesFast(); track++){
      tempPar = *(TVectorD*)fitParameters->At(track);
      tempMCPar = *(TVectorD*)mcParameters->At(track);

      hpT->Fill(tempPar[0]);
      fitPt[event] = tempPar[0];
      hMCpT->Fill(tempMCPar[0]);
      mcPt[event] = tempMCPar[0];
      if(tempMCPar[0]<1.5) hpT1->Fill((tempPar[0]-tempMCPar[0])/tempMCPar[0]);
      if(tempMCPar[0]>1.5 && tempMCPar[0]<2.5) hpT2->Fill((tempPar[0]-tempMCPar[0])/tempMCPar[0]);
      if(tempMCPar[0]>2.5 && tempMCPar[0]<3.5) hpT3->Fill((tempPar[0]-tempMCPar[0])/tempMCPar[0]);
      if(tempMCPar[0]>3.5) hpT4->Fill((tempPar[0]-tempMCPar[0])/tempMCPar[0]);

      if(tempPar[1]<0) tempPar[1] += 2*Trg_PI;
      tempPar[1] = tempPar[1]*180/Trg_PI;
      hphi0->Fill(tempPar[1]);
      fitPhi0[event] = tempPar[1];
      if(tempMCPar[1]<0) tempMCPar[1] += 2*Trg_PI;
      tempMCPar[1] = tempMCPar[1]*180/Trg_PI;
      hMCphi0->Fill(tempMCPar[1]);
      mcPhi0[event] = tempMCPar[1];

      hz0->Fill(tempPar[2]);
      fitZ0[event] = tempPar[2];
      hMCz0->Fill(tempMCPar[2]);
      mcZ0[event] = tempMCPar[2];

      theta = Trg_PI/2.-atan(tempPar[3]);
      theta*=180./Trg_PI;
      htheta->Fill(theta);
      fitTheta[event]=theta;
      mctheta=Trg_PI/2.-atan(tempMCPar[3]);
      mctheta*=180./Trg_PI;
      hMCtheta->Fill(mctheta);
      mcTheta[event]=mctheta;
    }
  }

  TCanvas *c1 = new TCanvas("c1", "", 1000, 500);
  c1->Divide(2,2);
  c1->cd(1);
  hpT->Draw();
  hMCpT->SetLineColor(2);
  hMCpT->Draw("same");
  c1->cd(2);
  hphi0->Draw();
  hMCphi0->SetLineColor(2);
  hMCphi0->Draw("same");
  c1->cd(3);
  hz0->Draw();
  hMCz0->SetLineColor(2);
  hMCz0->Draw("same");
  c1->cd(4);
  htheta->Draw();
  hMCtheta->SetLineColor(2);
  hMCtheta->Draw("same");

  //c1->SaveAs("histFitter3D.pdf");
  TCanvas *c2 = new TCanvas("c2", "", 600, 600);

  gPtMCFit = new TGraph(10000,mcPt,fitPt);
  gPhi0MCFit = new TGraph(10000,mcPhi0,fitPhi0);
  gZ0MCFit = new TGraph(10000,mcZ0,fitZ0);
  gThetaMCFit = new TGraph(10000,mcTheta,fitTheta);

  c2->Divide(2,2);
  c2->cd(1);
  gPtMCFit->SetMinimum(0);
  gPtMCFit->SetMaximum(6);
  gPtMCFit->GetXaxis()->SetLimits(0,6);
  gPtMCFit->SetTitle("fitPt-mcPt");
  gPtMCFit->Draw("AP");
  c2->cd(2);
  gPhi0MCFit->SetTitle("fitPhi0-mcPhi0");
  gPhi0MCFit->Draw("AP");
  c2->cd(3);
  gZ0MCFit->SetTitle("fitZ0-mcZ0");
  gZ0MCFit->GetXaxis()->SetLimits(-1,1);
  gZ0MCFit->Draw("AP");
  c2->cd(4);
  gThetaMCFit->SetTitle("fitTheta-mcTheta");
  gThetaMCFit->Draw("AP");

  TCanvas* c3 = new TCanvas("c3","",1000,500);
  c3->Divide(2,2);
  c3->cd(1);
  hpT1->Fit("gaus");
  hpT1->Draw();
  c3->cd(2);
  hpT2->Fit("gaus");
  hpT2->Draw();
  c3->cd(3);
  hpT3->Fit("gaus");
  hpT3->Draw();
  c3->cd(4);
  hpT4->Fit("gaus");
  hpT4->Draw();
}
